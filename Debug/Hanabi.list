
Hanabi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041c9c  0800d384  0800d384  0000e384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804f020  0804f020  0005109c  2**0
                  CONTENTS
  4 .ARM          00000008  0804f020  0804f020  00050020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804f028  0804f028  0005109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804f028  0804f028  00050028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804f02c  0804f02c  0005002c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0804f030  00051000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004abc  2000009c  0804f0cc  0005109c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b58  0804f0cc  00051b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005109c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000300e9  00000000  00000000  000510cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071de  00000000  00000000  000811b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002760  00000000  00000000  00088398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e67  00000000  00000000  0008aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030382  00000000  00000000  0008c95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000329aa  00000000  00000000  000bcce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001173e8  00000000  00000000  000ef68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00206a73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7bc  00000000  00000000  00206ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00211274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d36c 	.word	0x0800d36c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800d36c 	.word	0x0800d36c

08000210 <__aeabi_dmul>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000216:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800021a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800021e:	bf1d      	ittte	ne
 8000220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000224:	ea94 0f0c 	teqne	r4, ip
 8000228:	ea95 0f0c 	teqne	r5, ip
 800022c:	f000 f8de 	bleq	80003ec <__aeabi_dmul+0x1dc>
 8000230:	442c      	add	r4, r5
 8000232:	ea81 0603 	eor.w	r6, r1, r3
 8000236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800023e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000242:	bf18      	it	ne
 8000244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800024c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000250:	d038      	beq.n	80002c4 <__aeabi_dmul+0xb4>
 8000252:	fba0 ce02 	umull	ip, lr, r0, r2
 8000256:	f04f 0500 	mov.w	r5, #0
 800025a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800025e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000262:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000266:	f04f 0600 	mov.w	r6, #0
 800026a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800026e:	f09c 0f00 	teq	ip, #0
 8000272:	bf18      	it	ne
 8000274:	f04e 0e01 	orrne.w	lr, lr, #1
 8000278:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800027c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000280:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000284:	d204      	bcs.n	8000290 <__aeabi_dmul+0x80>
 8000286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028a:	416d      	adcs	r5, r5
 800028c:	eb46 0606 	adc.w	r6, r6, r6
 8000290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800029c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a8:	bf88      	it	hi
 80002aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ae:	d81e      	bhi.n	80002ee <__aeabi_dmul+0xde>
 80002b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c8:	ea46 0101 	orr.w	r1, r6, r1
 80002cc:	ea40 0002 	orr.w	r0, r0, r2
 80002d0:	ea81 0103 	eor.w	r1, r1, r3
 80002d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d8:	bfc2      	ittt	gt
 80002da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	popgt	{r4, r5, r6, pc}
 80002e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e8:	f04f 0e00 	mov.w	lr, #0
 80002ec:	3c01      	subs	r4, #1
 80002ee:	f300 80ab 	bgt.w	8000448 <__aeabi_dmul+0x238>
 80002f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002f6:	bfde      	ittt	le
 80002f8:	2000      	movle	r0, #0
 80002fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002fe:	bd70      	pople	{r4, r5, r6, pc}
 8000300:	f1c4 0400 	rsb	r4, r4, #0
 8000304:	3c20      	subs	r4, #32
 8000306:	da35      	bge.n	8000374 <__aeabi_dmul+0x164>
 8000308:	340c      	adds	r4, #12
 800030a:	dc1b      	bgt.n	8000344 <__aeabi_dmul+0x134>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f305 	lsl.w	r3, r0, r5
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f205 	lsl.w	r2, r1, r5
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000328:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800032c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000330:	fa21 f604 	lsr.w	r6, r1, r4
 8000334:	eb42 0106 	adc.w	r1, r2, r6
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 040c 	rsb	r4, r4, #12
 8000348:	f1c4 0520 	rsb	r5, r4, #32
 800034c:	fa00 f304 	lsl.w	r3, r0, r4
 8000350:	fa20 f005 	lsr.w	r0, r0, r5
 8000354:	fa01 f204 	lsl.w	r2, r1, r4
 8000358:	ea40 0002 	orr.w	r0, r0, r2
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f205 	lsl.w	r2, r0, r5
 800037c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000380:	fa20 f304 	lsr.w	r3, r0, r4
 8000384:	fa01 f205 	lsl.w	r2, r1, r5
 8000388:	ea43 0302 	orr.w	r3, r3, r2
 800038c:	fa21 f004 	lsr.w	r0, r1, r4
 8000390:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	fa21 f204 	lsr.w	r2, r1, r4
 8000398:	ea20 0002 	bic.w	r0, r0, r2
 800039c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f094 0f00 	teq	r4, #0
 80003b0:	d10f      	bne.n	80003d2 <__aeabi_dmul+0x1c2>
 80003b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003b6:	0040      	lsls	r0, r0, #1
 80003b8:	eb41 0101 	adc.w	r1, r1, r1
 80003bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3c01      	subeq	r4, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1a6>
 80003c6:	ea41 0106 	orr.w	r1, r1, r6
 80003ca:	f095 0f00 	teq	r5, #0
 80003ce:	bf18      	it	ne
 80003d0:	4770      	bxne	lr
 80003d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	eb43 0303 	adc.w	r3, r3, r3
 80003dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3d01      	subeq	r5, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1c6>
 80003e6:	ea43 0306 	orr.w	r3, r3, r6
 80003ea:	4770      	bx	lr
 80003ec:	ea94 0f0c 	teq	r4, ip
 80003f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f4:	bf18      	it	ne
 80003f6:	ea95 0f0c 	teqne	r5, ip
 80003fa:	d00c      	beq.n	8000416 <__aeabi_dmul+0x206>
 80003fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000400:	bf18      	it	ne
 8000402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000406:	d1d1      	bne.n	80003ac <__aeabi_dmul+0x19c>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041a:	bf06      	itte	eq
 800041c:	4610      	moveq	r0, r2
 800041e:	4619      	moveq	r1, r3
 8000420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000424:	d019      	beq.n	800045a <__aeabi_dmul+0x24a>
 8000426:	ea94 0f0c 	teq	r4, ip
 800042a:	d102      	bne.n	8000432 <__aeabi_dmul+0x222>
 800042c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000430:	d113      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000432:	ea95 0f0c 	teq	r5, ip
 8000436:	d105      	bne.n	8000444 <__aeabi_dmul+0x234>
 8000438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800043c:	bf1c      	itt	ne
 800043e:	4610      	movne	r0, r2
 8000440:	4619      	movne	r1, r3
 8000442:	d10a      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800044c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd70      	pop	{r4, r5, r6, pc}
 800045a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800045e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000462:	bd70      	pop	{r4, r5, r6, pc}

08000464 <__aeabi_drsub>:
 8000464:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e002      	b.n	8000470 <__adddf3>
 800046a:	bf00      	nop

0800046c <__aeabi_dsub>:
 800046c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000470 <__adddf3>:
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	bf1f      	itttt	ne
 8000486:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800048e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000496:	f000 80e2 	beq.w	800065e <__adddf3+0x1ee>
 800049a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800049e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a2:	bfb8      	it	lt
 80004a4:	426d      	neglt	r5, r5
 80004a6:	dd0c      	ble.n	80004c2 <__adddf3+0x52>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	ea82 0000 	eor.w	r0, r2, r0
 80004b6:	ea83 0101 	eor.w	r1, r3, r1
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	2d36      	cmp	r5, #54	@ 0x36
 80004c4:	bf88      	it	hi
 80004c6:	bd30      	pophi	{r4, r5, pc}
 80004c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x70>
 80004da:	4240      	negs	r0, r0
 80004dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x84>
 80004ee:	4252      	negs	r2, r2
 80004f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f4:	ea94 0f05 	teq	r4, r5
 80004f8:	f000 80a7 	beq.w	800064a <__adddf3+0x1da>
 80004fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000500:	f1d5 0e20 	rsbs	lr, r5, #32
 8000504:	db0d      	blt.n	8000522 <__adddf3+0xb2>
 8000506:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050a:	fa22 f205 	lsr.w	r2, r2, r5
 800050e:	1880      	adds	r0, r0, r2
 8000510:	f141 0100 	adc.w	r1, r1, #0
 8000514:	fa03 f20e 	lsl.w	r2, r3, lr
 8000518:	1880      	adds	r0, r0, r2
 800051a:	fa43 f305 	asr.w	r3, r3, r5
 800051e:	4159      	adcs	r1, r3
 8000520:	e00e      	b.n	8000540 <__adddf3+0xd0>
 8000522:	f1a5 0520 	sub.w	r5, r5, #32
 8000526:	f10e 0e20 	add.w	lr, lr, #32
 800052a:	2a01      	cmp	r2, #1
 800052c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000530:	bf28      	it	cs
 8000532:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000536:	fa43 f305 	asr.w	r3, r3, r5
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	d507      	bpl.n	8000556 <__adddf3+0xe6>
 8000546:	f04f 0e00 	mov.w	lr, #0
 800054a:	f1dc 0c00 	rsbs	ip, ip, #0
 800054e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000552:	eb6e 0101 	sbc.w	r1, lr, r1
 8000556:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800055a:	d31b      	bcc.n	8000594 <__adddf3+0x124>
 800055c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000560:	d30c      	bcc.n	800057c <__adddf3+0x10c>
 8000562:	0849      	lsrs	r1, r1, #1
 8000564:	ea5f 0030 	movs.w	r0, r0, rrx
 8000568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800056c:	f104 0401 	add.w	r4, r4, #1
 8000570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000574:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000578:	f080 809a 	bcs.w	80006b0 <__adddf3+0x240>
 800057c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	ea41 0105 	orr.w	r1, r1, r5
 8000592:	bd30      	pop	{r4, r5, pc}
 8000594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000598:	4140      	adcs	r0, r0
 800059a:	eb41 0101 	adc.w	r1, r1, r1
 800059e:	3c01      	subs	r4, #1
 80005a0:	bf28      	it	cs
 80005a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005a6:	d2e9      	bcs.n	800057c <__adddf3+0x10c>
 80005a8:	f091 0f00 	teq	r1, #0
 80005ac:	bf04      	itt	eq
 80005ae:	4601      	moveq	r1, r0
 80005b0:	2000      	moveq	r0, #0
 80005b2:	fab1 f381 	clz	r3, r1
 80005b6:	bf08      	it	eq
 80005b8:	3320      	addeq	r3, #32
 80005ba:	f1a3 030b 	sub.w	r3, r3, #11
 80005be:	f1b3 0220 	subs.w	r2, r3, #32
 80005c2:	da0c      	bge.n	80005de <__adddf3+0x16e>
 80005c4:	320c      	adds	r2, #12
 80005c6:	dd08      	ble.n	80005da <__adddf3+0x16a>
 80005c8:	f102 0c14 	add.w	ip, r2, #20
 80005cc:	f1c2 020c 	rsb	r2, r2, #12
 80005d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d4:	fa21 f102 	lsr.w	r1, r1, r2
 80005d8:	e00c      	b.n	80005f4 <__adddf3+0x184>
 80005da:	f102 0214 	add.w	r2, r2, #20
 80005de:	bfd8      	it	le
 80005e0:	f1c2 0c20 	rsble	ip, r2, #32
 80005e4:	fa01 f102 	lsl.w	r1, r1, r2
 80005e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ec:	bfdc      	itt	le
 80005ee:	ea41 010c 	orrle.w	r1, r1, ip
 80005f2:	4090      	lslle	r0, r2
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	bfa2      	ittt	ge
 80005f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005fc:	4329      	orrge	r1, r5
 80005fe:	bd30      	popge	{r4, r5, pc}
 8000600:	ea6f 0404 	mvn.w	r4, r4
 8000604:	3c1f      	subs	r4, #31
 8000606:	da1c      	bge.n	8000642 <__adddf3+0x1d2>
 8000608:	340c      	adds	r4, #12
 800060a:	dc0e      	bgt.n	800062a <__adddf3+0x1ba>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0220 	rsb	r2, r4, #32
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f302 	lsl.w	r3, r1, r2
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	fa21 f304 	lsr.w	r3, r1, r4
 8000624:	ea45 0103 	orr.w	r1, r5, r3
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f1c4 040c 	rsb	r4, r4, #12
 800062e:	f1c4 0220 	rsb	r2, r4, #32
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 f304 	lsl.w	r3, r1, r4
 800063a:	ea40 0003 	orr.w	r0, r0, r3
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	fa21 f004 	lsr.w	r0, r1, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f094 0f00 	teq	r4, #0
 800064e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000652:	bf06      	itte	eq
 8000654:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000658:	3401      	addeq	r4, #1
 800065a:	3d01      	subne	r5, #1
 800065c:	e74e      	b.n	80004fc <__adddf3+0x8c>
 800065e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000662:	bf18      	it	ne
 8000664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000668:	d029      	beq.n	80006be <__adddf3+0x24e>
 800066a:	ea94 0f05 	teq	r4, r5
 800066e:	bf08      	it	eq
 8000670:	ea90 0f02 	teqeq	r0, r2
 8000674:	d005      	beq.n	8000682 <__adddf3+0x212>
 8000676:	ea54 0c00 	orrs.w	ip, r4, r0
 800067a:	bf04      	itt	eq
 800067c:	4619      	moveq	r1, r3
 800067e:	4610      	moveq	r0, r2
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf1e      	ittt	ne
 8000688:	2100      	movne	r1, #0
 800068a:	2000      	movne	r0, #0
 800068c:	bd30      	popne	{r4, r5, pc}
 800068e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000692:	d105      	bne.n	80006a0 <__adddf3+0x230>
 8000694:	0040      	lsls	r0, r0, #1
 8000696:	4149      	adcs	r1, r1
 8000698:	bf28      	it	cs
 800069a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006a4:	bf3c      	itt	cc
 80006a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006aa:	bd30      	popcc	{r4, r5, pc}
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf1a      	itte	ne
 80006c4:	4619      	movne	r1, r3
 80006c6:	4610      	movne	r0, r2
 80006c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006cc:	bf1c      	itt	ne
 80006ce:	460b      	movne	r3, r1
 80006d0:	4602      	movne	r2, r0
 80006d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006d6:	bf06      	itte	eq
 80006d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006dc:	ea91 0f03 	teqeq	r1, r3
 80006e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	bf00      	nop

080006e8 <__aeabi_ui2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f04f 0500 	mov.w	r5, #0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e750      	b.n	80005a8 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_i2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e73e      	b.n	80005a8 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_f2d>:
 800072c:	0042      	lsls	r2, r0, #1
 800072e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000732:	ea4f 0131 	mov.w	r1, r1, rrx
 8000736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073a:	bf1f      	itttt	ne
 800073c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000740:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000744:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000748:	4770      	bxne	lr
 800074a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800074e:	bf08      	it	eq
 8000750:	4770      	bxeq	lr
 8000752:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000756:	bf04      	itt	eq
 8000758:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	e71c      	b.n	80005a8 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_ul2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	e00a      	b.n	8000796 <__aeabi_l2d+0x16>

08000780 <__aeabi_l2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800078e:	d502      	bpl.n	8000796 <__aeabi_l2d+0x16>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800079a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a2:	f43f aed8 	beq.w	8000556 <__adddf3+0xe6>
 80007a6:	f04f 0203 	mov.w	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007be:	f1c2 0320 	rsb	r3, r2, #32
 80007c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007c6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ce:	ea40 000e 	orr.w	r0, r0, lr
 80007d2:	fa21 f102 	lsr.w	r1, r1, r2
 80007d6:	4414      	add	r4, r2
 80007d8:	e6bd      	b.n	8000556 <__adddf3+0xe6>
 80007da:	bf00      	nop

080007dc <__aeabi_d2uiz>:
 80007dc:	004a      	lsls	r2, r1, #1
 80007de:	d211      	bcs.n	8000804 <__aeabi_d2uiz+0x28>
 80007e0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007e4:	d211      	bcs.n	800080a <__aeabi_d2uiz+0x2e>
 80007e6:	d50d      	bpl.n	8000804 <__aeabi_d2uiz+0x28>
 80007e8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f0:	d40e      	bmi.n	8000810 <__aeabi_d2uiz+0x34>
 80007f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d102      	bne.n	8000816 <__aeabi_d2uiz+0x3a>
 8000810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000814:	4770      	bx	lr
 8000816:	f04f 0000 	mov.w	r0, #0
 800081a:	4770      	bx	lr

0800081c <__aeabi_uldivmod>:
 800081c:	b953      	cbnz	r3, 8000834 <__aeabi_uldivmod+0x18>
 800081e:	b94a      	cbnz	r2, 8000834 <__aeabi_uldivmod+0x18>
 8000820:	2900      	cmp	r1, #0
 8000822:	bf08      	it	eq
 8000824:	2800      	cmpeq	r0, #0
 8000826:	bf1c      	itt	ne
 8000828:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800082c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000830:	f000 b96a 	b.w	8000b08 <__aeabi_idiv0>
 8000834:	f1ad 0c08 	sub.w	ip, sp, #8
 8000838:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800083c:	f000 f806 	bl	800084c <__udivmoddi4>
 8000840:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <__udivmoddi4>:
 800084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000850:	9d08      	ldr	r5, [sp, #32]
 8000852:	460c      	mov	r4, r1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d14e      	bne.n	80008f6 <__udivmoddi4+0xaa>
 8000858:	4694      	mov	ip, r2
 800085a:	458c      	cmp	ip, r1
 800085c:	4686      	mov	lr, r0
 800085e:	fab2 f282 	clz	r2, r2
 8000862:	d962      	bls.n	800092a <__udivmoddi4+0xde>
 8000864:	b14a      	cbz	r2, 800087a <__udivmoddi4+0x2e>
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	4091      	lsls	r1, r2
 800086c:	fa20 f303 	lsr.w	r3, r0, r3
 8000870:	fa0c fc02 	lsl.w	ip, ip, r2
 8000874:	4319      	orrs	r1, r3
 8000876:	fa00 fe02 	lsl.w	lr, r0, r2
 800087a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800087e:	fa1f f68c 	uxth.w	r6, ip
 8000882:	fbb1 f4f7 	udiv	r4, r1, r7
 8000886:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800088a:	fb07 1114 	mls	r1, r7, r4, r1
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb04 f106 	mul.w	r1, r4, r6
 8000896:	4299      	cmp	r1, r3
 8000898:	d90a      	bls.n	80008b0 <__udivmoddi4+0x64>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008a2:	f080 8112 	bcs.w	8000aca <__udivmoddi4+0x27e>
 80008a6:	4299      	cmp	r1, r3
 80008a8:	f240 810f 	bls.w	8000aca <__udivmoddi4+0x27e>
 80008ac:	3c02      	subs	r4, #2
 80008ae:	4463      	add	r3, ip
 80008b0:	1a59      	subs	r1, r3, r1
 80008b2:	fa1f f38e 	uxth.w	r3, lr
 80008b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ba:	fb07 1110 	mls	r1, r7, r0, r1
 80008be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c2:	fb00 f606 	mul.w	r6, r0, r6
 80008c6:	429e      	cmp	r6, r3
 80008c8:	d90a      	bls.n	80008e0 <__udivmoddi4+0x94>
 80008ca:	eb1c 0303 	adds.w	r3, ip, r3
 80008ce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008d2:	f080 80fc 	bcs.w	8000ace <__udivmoddi4+0x282>
 80008d6:	429e      	cmp	r6, r3
 80008d8:	f240 80f9 	bls.w	8000ace <__udivmoddi4+0x282>
 80008dc:	4463      	add	r3, ip
 80008de:	3802      	subs	r0, #2
 80008e0:	1b9b      	subs	r3, r3, r6
 80008e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008e6:	2100      	movs	r1, #0
 80008e8:	b11d      	cbz	r5, 80008f2 <__udivmoddi4+0xa6>
 80008ea:	40d3      	lsrs	r3, r2
 80008ec:	2200      	movs	r2, #0
 80008ee:	e9c5 3200 	strd	r3, r2, [r5]
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d905      	bls.n	8000906 <__udivmoddi4+0xba>
 80008fa:	b10d      	cbz	r5, 8000900 <__udivmoddi4+0xb4>
 80008fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000900:	2100      	movs	r1, #0
 8000902:	4608      	mov	r0, r1
 8000904:	e7f5      	b.n	80008f2 <__udivmoddi4+0xa6>
 8000906:	fab3 f183 	clz	r1, r3
 800090a:	2900      	cmp	r1, #0
 800090c:	d146      	bne.n	800099c <__udivmoddi4+0x150>
 800090e:	42a3      	cmp	r3, r4
 8000910:	d302      	bcc.n	8000918 <__udivmoddi4+0xcc>
 8000912:	4290      	cmp	r0, r2
 8000914:	f0c0 80f0 	bcc.w	8000af8 <__udivmoddi4+0x2ac>
 8000918:	1a86      	subs	r6, r0, r2
 800091a:	eb64 0303 	sbc.w	r3, r4, r3
 800091e:	2001      	movs	r0, #1
 8000920:	2d00      	cmp	r5, #0
 8000922:	d0e6      	beq.n	80008f2 <__udivmoddi4+0xa6>
 8000924:	e9c5 6300 	strd	r6, r3, [r5]
 8000928:	e7e3      	b.n	80008f2 <__udivmoddi4+0xa6>
 800092a:	2a00      	cmp	r2, #0
 800092c:	f040 8090 	bne.w	8000a50 <__udivmoddi4+0x204>
 8000930:	eba1 040c 	sub.w	r4, r1, ip
 8000934:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000938:	fa1f f78c 	uxth.w	r7, ip
 800093c:	2101      	movs	r1, #1
 800093e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000942:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000946:	fb08 4416 	mls	r4, r8, r6, r4
 800094a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800094e:	fb07 f006 	mul.w	r0, r7, r6
 8000952:	4298      	cmp	r0, r3
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x11c>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0x11a>
 8000960:	4298      	cmp	r0, r3
 8000962:	f200 80cd 	bhi.w	8000b00 <__udivmoddi4+0x2b4>
 8000966:	4626      	mov	r6, r4
 8000968:	1a1c      	subs	r4, r3, r0
 800096a:	fa1f f38e 	uxth.w	r3, lr
 800096e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000972:	fb08 4410 	mls	r4, r8, r0, r4
 8000976:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800097a:	fb00 f707 	mul.w	r7, r0, r7
 800097e:	429f      	cmp	r7, r3
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x148>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800098a:	d202      	bcs.n	8000992 <__udivmoddi4+0x146>
 800098c:	429f      	cmp	r7, r3
 800098e:	f200 80b0 	bhi.w	8000af2 <__udivmoddi4+0x2a6>
 8000992:	4620      	mov	r0, r4
 8000994:	1bdb      	subs	r3, r3, r7
 8000996:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099a:	e7a5      	b.n	80008e8 <__udivmoddi4+0x9c>
 800099c:	f1c1 0620 	rsb	r6, r1, #32
 80009a0:	408b      	lsls	r3, r1
 80009a2:	fa22 f706 	lsr.w	r7, r2, r6
 80009a6:	431f      	orrs	r7, r3
 80009a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009ac:	fa04 f301 	lsl.w	r3, r4, r1
 80009b0:	ea43 030c 	orr.w	r3, r3, ip
 80009b4:	40f4      	lsrs	r4, r6
 80009b6:	fa00 f801 	lsl.w	r8, r0, r1
 80009ba:	0c38      	lsrs	r0, r7, #16
 80009bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009c0:	fbb4 fef0 	udiv	lr, r4, r0
 80009c4:	fa1f fc87 	uxth.w	ip, r7
 80009c8:	fb00 441e 	mls	r4, r0, lr, r4
 80009cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d0:	fb0e f90c 	mul.w	r9, lr, ip
 80009d4:	45a1      	cmp	r9, r4
 80009d6:	fa02 f201 	lsl.w	r2, r2, r1
 80009da:	d90a      	bls.n	80009f2 <__udivmoddi4+0x1a6>
 80009dc:	193c      	adds	r4, r7, r4
 80009de:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009e2:	f080 8084 	bcs.w	8000aee <__udivmoddi4+0x2a2>
 80009e6:	45a1      	cmp	r9, r4
 80009e8:	f240 8081 	bls.w	8000aee <__udivmoddi4+0x2a2>
 80009ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80009f0:	443c      	add	r4, r7
 80009f2:	eba4 0409 	sub.w	r4, r4, r9
 80009f6:	fa1f f983 	uxth.w	r9, r3
 80009fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80009fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000a02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d907      	bls.n	8000a1e <__udivmoddi4+0x1d2>
 8000a0e:	193c      	adds	r4, r7, r4
 8000a10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a14:	d267      	bcs.n	8000ae6 <__udivmoddi4+0x29a>
 8000a16:	45a4      	cmp	ip, r4
 8000a18:	d965      	bls.n	8000ae6 <__udivmoddi4+0x29a>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	443c      	add	r4, r7
 8000a1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a22:	fba0 9302 	umull	r9, r3, r0, r2
 8000a26:	eba4 040c 	sub.w	r4, r4, ip
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	46ce      	mov	lr, r9
 8000a2e:	469c      	mov	ip, r3
 8000a30:	d351      	bcc.n	8000ad6 <__udivmoddi4+0x28a>
 8000a32:	d04e      	beq.n	8000ad2 <__udivmoddi4+0x286>
 8000a34:	b155      	cbz	r5, 8000a4c <__udivmoddi4+0x200>
 8000a36:	ebb8 030e 	subs.w	r3, r8, lr
 8000a3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a42:	40cb      	lsrs	r3, r1
 8000a44:	431e      	orrs	r6, r3
 8000a46:	40cc      	lsrs	r4, r1
 8000a48:	e9c5 6400 	strd	r6, r4, [r5]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e750      	b.n	80008f2 <__udivmoddi4+0xa6>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f103 	lsr.w	r1, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	430c      	orrs	r4, r1
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6c:	fa1f f78c 	uxth.w	r7, ip
 8000a70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a74:	fb08 3110 	mls	r1, r8, r0, r3
 8000a78:	0c23      	lsrs	r3, r4, #16
 8000a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7e:	fb00 f107 	mul.w	r1, r0, r7
 8000a82:	4299      	cmp	r1, r3
 8000a84:	d908      	bls.n	8000a98 <__udivmoddi4+0x24c>
 8000a86:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a8e:	d22c      	bcs.n	8000aea <__udivmoddi4+0x29e>
 8000a90:	4299      	cmp	r1, r3
 8000a92:	d92a      	bls.n	8000aea <__udivmoddi4+0x29e>
 8000a94:	3802      	subs	r0, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aa0:	fb08 3311 	mls	r3, r8, r1, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb01 f307 	mul.w	r3, r1, r7
 8000aac:	42a3      	cmp	r3, r4
 8000aae:	d908      	bls.n	8000ac2 <__udivmoddi4+0x276>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ab8:	d213      	bcs.n	8000ae2 <__udivmoddi4+0x296>
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	d911      	bls.n	8000ae2 <__udivmoddi4+0x296>
 8000abe:	3902      	subs	r1, #2
 8000ac0:	4464      	add	r4, ip
 8000ac2:	1ae4      	subs	r4, r4, r3
 8000ac4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac8:	e739      	b.n	800093e <__udivmoddi4+0xf2>
 8000aca:	4604      	mov	r4, r0
 8000acc:	e6f0      	b.n	80008b0 <__udivmoddi4+0x64>
 8000ace:	4608      	mov	r0, r1
 8000ad0:	e706      	b.n	80008e0 <__udivmoddi4+0x94>
 8000ad2:	45c8      	cmp	r8, r9
 8000ad4:	d2ae      	bcs.n	8000a34 <__udivmoddi4+0x1e8>
 8000ad6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ada:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7a8      	b.n	8000a34 <__udivmoddi4+0x1e8>
 8000ae2:	4631      	mov	r1, r6
 8000ae4:	e7ed      	b.n	8000ac2 <__udivmoddi4+0x276>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	e799      	b.n	8000a1e <__udivmoddi4+0x1d2>
 8000aea:	4630      	mov	r0, r6
 8000aec:	e7d4      	b.n	8000a98 <__udivmoddi4+0x24c>
 8000aee:	46d6      	mov	lr, sl
 8000af0:	e77f      	b.n	80009f2 <__udivmoddi4+0x1a6>
 8000af2:	4463      	add	r3, ip
 8000af4:	3802      	subs	r0, #2
 8000af6:	e74d      	b.n	8000994 <__udivmoddi4+0x148>
 8000af8:	4606      	mov	r6, r0
 8000afa:	4623      	mov	r3, r4
 8000afc:	4608      	mov	r0, r1
 8000afe:	e70f      	b.n	8000920 <__udivmoddi4+0xd4>
 8000b00:	3e02      	subs	r6, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	e730      	b.n	8000968 <__udivmoddi4+0x11c>
 8000b06:	bf00      	nop

08000b08 <__aeabi_idiv0>:
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	@ (8000ba8 <MX_ADC1_Init+0x9c>)
 8000b22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_ADC1_Init+0xa0>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6c:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b6e:	f004 f9b9 	bl	8004ee4 <HAL_ADC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b78:	f001 fec0 	bl	80028fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_ADC1_Init+0x98>)
 8000b8e:	f004 f9ed 	bl	8004f6c <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b98:	f001 feb0 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000b8 	.word	0x200000b8
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	0f000001 	.word	0x0f000001

08000bb0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <MX_ADC3_Init+0x9c>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <MX_ADC3_Init+0xa0>)
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000c12:	f004 f967 	bl	8004ee4 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c1c:	f001 fe6e 	bl	80028fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c20:	2306      	movs	r3, #6
 8000c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC3_Init+0x98>)
 8000c32:	f004 f99b 	bl	8004f6c <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f001 fe5e 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000100 	.word	0x20000100
 8000c4c:	40012200 	.word	0x40012200
 8000c50:	0f000001 	.word	0x0f000001

08000c54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a2a      	ldr	r2, [pc, #168]	@ (8000d1c <HAL_ADC_MspInit+0xc8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d124      	bne.n	8000cc0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a29      	ldr	r2, [pc, #164]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a23      	ldr	r2, [pc, #140]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <HAL_ADC_MspInit+0xd0>)
 8000cba:	f005 facd 	bl	8006258 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000cbe:	e029      	b.n	8000d14 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <HAL_ADC_MspInit+0xd4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d124      	bne.n	8000d14 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000cd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_ADC_MspInit+0xcc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000cfa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4807      	ldr	r0, [pc, #28]	@ (8000d2c <HAL_ADC_MspInit+0xd8>)
 8000d10:	f005 faa2 	bl	8006258 <HAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	@ 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40012000 	.word	0x40012000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40012200 	.word	0x40012200
 8000d2c:	40021400 	.word	0x40021400

08000d30 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_DAC_Init+0x4c>)
 8000d40:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <MX_DAC_Init+0x50>)
 8000d42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d44:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_DAC_Init+0x4c>)
 8000d46:	f004 fc47 	bl	80055d8 <HAL_DAC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d50:	f001 fdd4 	bl	80028fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <MX_DAC_Init+0x4c>)
 8000d64:	f004 fcba 	bl	80056dc <HAL_DAC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d6e:	f001 fdc5 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000148 	.word	0x20000148
 8000d80:	40007400 	.word	0x40007400

08000d84 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_DAC_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HAL_DAC_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <HAL_DAC_MspInit+0x8c>)
 8000dea:	f005 fa35 	bl	8006258 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	2036      	movs	r0, #54	@ 0x36
 8000df4:	f004 fbc6 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df8:	2036      	movs	r0, #54	@ 0x36
 8000dfa:	f004 fbdf 	bl	80055bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40007400 	.word	0x40007400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e1a:	4a16      	ldr	r2, [pc, #88]	@ (8000e74 <MX_DMA2D_Init+0x60>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e48:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e4a:	f004 fe69 	bl	8005b20 <HAL_DMA2D_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e54:	f001 fd52 	bl	80028fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e5c:	f005 f8ce 	bl	8005ffc <HAL_DMA2D_ConfigLayer>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e66:	f001 fd49 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000015c 	.word	0x2000015c
 8000e74:	4002b000 	.word	0x4002b000

08000e78 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_DMA2D_MspInit+0x44>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d113      	bne.n	8000eb2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_DMA2D_MspInit+0x48>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <HAL_DMA2D_MspInit+0x48>)
 8000e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_DMA2D_MspInit+0x48>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	205a      	movs	r0, #90	@ 0x5a
 8000ea8:	f004 fb6c 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eac:	205a      	movs	r0, #90	@ 0x5a
 8000eae:	f004 fb85 	bl	80055bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	4002b000 	.word	0x4002b000
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000ede:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <MX_FMC_Init+0x9c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000efc:	2240      	movs	r2, #64	@ 0x40
 8000efe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f02:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000f06:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f14:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f30:	2307      	movs	r3, #7
 8000f32:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f34:	2303      	movs	r3, #3
 8000f36:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_FMC_Init+0x98>)
 8000f46:	f008 fab9 	bl	80094bc <HAL_SDRAM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f50:	f001 fcd4 	bl	80028fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000019c 	.word	0x2000019c
 8000f60:	a0000140 	.word	0xa0000140

08000f64 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000f78:	4b3a      	ldr	r3, [pc, #232]	@ (8001064 <HAL_FMC_MspInit+0x100>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d16d      	bne.n	800105c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000f80:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <HAL_FMC_MspInit+0x100>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f86:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <HAL_FMC_MspInit+0x104>)
 8000f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f8a:	4a37      	ldr	r2, [pc, #220]	@ (8001068 <HAL_FMC_MspInit+0x104>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f92:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <HAL_FMC_MspInit+0x104>)
 8000f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000f9e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000fa2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482c      	ldr	r0, [pc, #176]	@ (800106c <HAL_FMC_MspInit+0x108>)
 8000fba:	f005 f94d 	bl	8006258 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000fbe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000fc2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4825      	ldr	r0, [pc, #148]	@ (8001070 <HAL_FMC_MspInit+0x10c>)
 8000fda:	f005 f93d 	bl	8006258 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000fde:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000fe2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <HAL_FMC_MspInit+0x110>)
 8000ffa:	f005 f92d 	bl	8006258 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ffe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001002:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001010:	230c      	movs	r3, #12
 8001012:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4817      	ldr	r0, [pc, #92]	@ (8001078 <HAL_FMC_MspInit+0x114>)
 800101a:	f005 f91d 	bl	8006258 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800101e:	2328      	movs	r3, #40	@ 0x28
 8001020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800102e:	230c      	movs	r3, #12
 8001030:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4811      	ldr	r0, [pc, #68]	@ (800107c <HAL_FMC_MspInit+0x118>)
 8001038:	f005 f90e 	bl	8006258 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800103c:	2308      	movs	r3, #8
 800103e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800104c:	230c      	movs	r3, #12
 800104e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	480a      	ldr	r0, [pc, #40]	@ (8001080 <HAL_FMC_MspInit+0x11c>)
 8001056:	f005 f8ff 	bl	8006258 <HAL_GPIO_Init>
 800105a:	e000      	b.n	800105e <HAL_FMC_MspInit+0xfa>
    return;
 800105c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001d0 	.word	0x200001d0
 8001068:	40023800 	.word	0x40023800
 800106c:	40021000 	.word	0x40021000
 8001070:	40021800 	.word	0x40021800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021400 	.word	0x40021400
 800107c:	40021c00 	.word	0x40021c00
 8001080:	40020800 	.word	0x40020800

08001084 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800108c:	f7ff ff6a 	bl	8000f64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000021c 	.word	0x2000021c
 80010c8:	200002bc 	.word	0x200002bc

080010cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b0a4      	sub	sp, #144	@ 0x90
 80010d0:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of displayQueue */
  osMessageQDef(displayQueue, 3, DisplayOrder);
 80010d2:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <MX_FREERTOS_Init+0xe0>)
 80010d4:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 80010d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  displayQueueHandle = osMessageCreate(osMessageQ(displayQueue), NULL);
 80010de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 fdea 	bl	800acbe <osMessageCreate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a30      	ldr	r2, [pc, #192]	@ (80011b0 <MX_FREERTOS_Init+0xe4>)
 80010ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchQueue */
  osMessageQDef(touchQueue, 3, TouchState);
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <MX_FREERTOS_Init+0xe0>)
 80010f2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  touchQueueHandle = osMessageCreate(osMessageQ(touchQueue), NULL);
 80010fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f009 fddb 	bl	800acbe <osMessageCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <MX_FREERTOS_Init+0xe8>)
 800110c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <MX_FREERTOS_Init+0xec>)
 8001110:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001122:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f009 fd68 	bl	800abfe <osThreadCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <MX_FREERTOS_Init+0xf0>)
 8001132:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, displayTaskFunction, osPriorityAboveNormal, 0, 1024);
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <MX_FREERTOS_Init+0xf4>)
 8001136:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800113a:	461d      	mov	r5, r3
 800113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001140:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001148:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f009 fd55 	bl	800abfe <osThreadCreate>
 8001154:	4603      	mov	r3, r0
 8001156:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <MX_FREERTOS_Init+0xf8>)
 8001158:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchTask */
  osThreadDef(touchTask, touchTaskFunction, osPriorityAboveNormal, 0, 256);
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_FREERTOS_Init+0xfc>)
 800115c:	f107 041c 	add.w	r4, r7, #28
 8001160:	461d      	mov	r5, r3
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f009 fd42 	bl	800abfe <osThreadCreate>
 800117a:	4603      	mov	r3, r0
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <MX_FREERTOS_Init+0x100>)
 800117e:	6013      	str	r3, [r2, #0]

  /* definition and creation of stateTask */
  osThreadDef(stateTask, stateTaskFunction, osPriorityHigh, 0, 512);
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_FREERTOS_Init+0x104>)
 8001182:	463c      	mov	r4, r7
 8001184:	461d      	mov	r5, r3
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateTaskHandle = osThreadCreate(osThread(stateTask), NULL);
 8001192:	463b      	mov	r3, r7
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f009 fd31 	bl	800abfe <osThreadCreate>
 800119c:	4603      	mov	r3, r0
 800119e:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <MX_FREERTOS_Init+0x108>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011a2:	bf00      	nop
 80011a4:	3790      	adds	r7, #144	@ 0x90
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdb0      	pop	{r4, r5, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800d384 	.word	0x0800d384
 80011b0:	20000214 	.word	0x20000214
 80011b4:	20000218 	.word	0x20000218
 80011b8:	0800d3a0 	.word	0x0800d3a0
 80011bc:	20000204 	.word	0x20000204
 80011c0:	0800d3c8 	.word	0x0800d3c8
 80011c4:	20000208 	.word	0x20000208
 80011c8:	0800d3f0 	.word	0x0800d3f0
 80011cc:	2000020c 	.word	0x2000020c
 80011d0:	0800d418 	.word	0x0800d418
 80011d4:	20000210 	.word	0x20000210

080011d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(10000);
 80011e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80011e4:	f009 fd57 	bl	800ac96 <osDelay>
 80011e8:	e7fa      	b.n	80011e0 <StartDefaultTask+0x8>
	...

080011ec <displayTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayTaskFunction */
void displayTaskFunction(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTaskFunction */
	osEvent event;
	/* Infinite loop */
	for(;;)
	{
		event = osMessageGet(displayQueueHandle, 100);
 80011f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001498 <displayTaskFunction+0x2ac>)
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2264      	movs	r2, #100	@ 0x64
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 fdc6 	bl	800ad90 <osMessageGet>
		switch(state) {
 8001204:	4ba5      	ldr	r3, [pc, #660]	@ (800149c <displayTaskFunction+0x2b0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d8f3      	bhi.n	80011f4 <displayTaskFunction+0x8>
 800120c:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <displayTaskFunction+0x28>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	080011f5 	.word	0x080011f5
 8001218:	08001229 	.word	0x08001229
 800121c:	0800128f 	.word	0x0800128f
 8001220:	080013d1 	.word	0x080013d1
 8001224:	0800142d 	.word	0x0800142d
		case INIT:
			break;

		case TITLE_SCREEN:
			if (event.status == osEventMessage) {
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b10      	cmp	r3, #16
 800122c:	f040 812c 	bne.w	8001488 <displayTaskFunction+0x29c>
				if (event.value.v == DISPLAY_TITLE) {
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 8128 	bne.w	8001488 <displayTaskFunction+0x29c>

					BSP_LCD_SelectLayer(0);
 8001238:	2000      	movs	r0, #0
 800123a:	f001 ff73 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(LCD_COLOR_DARKBLUE);
 800123e:	4898      	ldr	r0, [pc, #608]	@ (80014a0 <displayTaskFunction+0x2b4>)
 8001240:	f001 ffe2 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_DrawBitmap(0,0,(uint8_t*)hanabi_bmp);
 8001244:	4a97      	ldr	r2, [pc, #604]	@ (80014a4 <displayTaskFunction+0x2b8>)
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f002 f959 	bl	8003500 <BSP_LCD_DrawBitmap>

					BSP_LCD_SelectLayer(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f001 ff68 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(00);
 8001254:	2000      	movs	r0, #0
 8001256:	f001 ffd7 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_SetFont(&Font12);
 800125a:	4893      	ldr	r0, [pc, #588]	@ (80014a8 <displayTaskFunction+0x2bc>)
 800125c:	f001 ffa4 	bl	80031a8 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001260:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001264:	f001 ff6e 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_SetBackColor(00);
 8001268:	2000      	movs	r0, #0
 800126a:	f001 ff83 	bl	8003174 <BSP_LCD_SetBackColor>
					BSP_LCD_DisplayStringAt(0, LINE(16), (void*)"Touch the screen to continue", CENTER_MODE);
 800126e:	f001 ffb5 	bl	80031dc <BSP_LCD_GetFont>
 8001272:	4603      	mov	r3, r0
 8001274:	88db      	ldrh	r3, [r3, #6]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	b299      	uxth	r1, r3
 800127a:	2301      	movs	r3, #1
 800127c:	4a8b      	ldr	r2, [pc, #556]	@ (80014ac <displayTaskFunction+0x2c0>)
 800127e:	2000      	movs	r0, #0
 8001280:	f002 f82e 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					osDelay (400);
 8001284:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001288:	f009 fd05 	bl	800ac96 <osDelay>
				}
			}
			break;
 800128c:	e0fc      	b.n	8001488 <displayTaskFunction+0x29c>

		case CHOICE_SCREEN:
			if (event.status == osEventMessage) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b10      	cmp	r3, #16
 8001292:	f040 80fb 	bne.w	800148c <displayTaskFunction+0x2a0>
				if (event.value.v == DISPLAY_CHOICE) {
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 80f7 	bne.w	800148c <displayTaskFunction+0x2a0>
					BSP_LCD_SelectLayer(0);
 800129e:	2000      	movs	r0, #0
 80012a0:	f001 ff40 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(LCD_COLOR_DARKBLUE);
 80012a4:	487e      	ldr	r0, [pc, #504]	@ (80014a0 <displayTaskFunction+0x2b4>)
 80012a6:	f001 ffaf 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80012aa:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80012ae:	f001 ff49 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(70, 36, 140, 200);
 80012b2:	23c8      	movs	r3, #200	@ 0xc8
 80012b4:	228c      	movs	r2, #140	@ 0x8c
 80012b6:	2124      	movs	r1, #36	@ 0x24
 80012b8:	2046      	movs	r0, #70	@ 0x46
 80012ba:	f002 f9d3 	bl	8003664 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80012be:	487c      	ldr	r0, [pc, #496]	@ (80014b0 <displayTaskFunction+0x2c4>)
 80012c0:	f001 ff40 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(270, 36, 140, 200);
 80012c4:	23c8      	movs	r3, #200	@ 0xc8
 80012c6:	228c      	movs	r2, #140	@ 0x8c
 80012c8:	2124      	movs	r1, #36	@ 0x24
 80012ca:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80012ce:	f002 f9c9 	bl	8003664 <BSP_LCD_FillRect>

					BSP_LCD_SelectLayer(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f001 ff26 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(00);
 80012d8:	2000      	movs	r0, #0
 80012da:	f001 ff95 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_SetBackColor(00);
 80012de:	2000      	movs	r0, #0
 80012e0:	f001 ff48 	bl	8003174 <BSP_LCD_SetBackColor>
					BSP_LCD_SetFont(&Font24);
 80012e4:	4873      	ldr	r0, [pc, #460]	@ (80014b4 <displayTaskFunction+0x2c8>)
 80012e6:	f001 ff5f 	bl	80031a8 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012ea:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80012ee:	f001 ff29 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(-100, LINE(4.5), (void*)"HOST", CENTER_MODE);
 80012f2:	f001 ff73 	bl	80031dc <BSP_LCD_GetFont>
 80012f6:	4603      	mov	r3, r0
 80012f8:	88db      	ldrh	r3, [r3, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fa04 	bl	8000708 <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b6c      	ldr	r3, [pc, #432]	@ (80014b8 <displayTaskFunction+0x2cc>)
 8001306:	f7fe ff83 	bl	8000210 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fa63 	bl	80007dc <__aeabi_d2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	b299      	uxth	r1, r3
 800131a:	2301      	movs	r3, #1
 800131c:	4a67      	ldr	r2, [pc, #412]	@ (80014bc <displayTaskFunction+0x2d0>)
 800131e:	f64f 709c 	movw	r0, #65436	@ 0xff9c
 8001322:	f001 ffdd 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					BSP_LCD_DisplayStringAt(-100, LINE(5.5), (void*)"GAME", CENTER_MODE);
 8001326:	f001 ff59 	bl	80031dc <BSP_LCD_GetFont>
 800132a:	4603      	mov	r3, r0
 800132c:	88db      	ldrh	r3, [r3, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9ea 	bl	8000708 <__aeabi_i2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b61      	ldr	r3, [pc, #388]	@ (80014c0 <displayTaskFunction+0x2d4>)
 800133a:	f7fe ff69 	bl	8000210 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fa49 	bl	80007dc <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	b299      	uxth	r1, r3
 800134e:	2301      	movs	r3, #1
 8001350:	4a5c      	ldr	r2, [pc, #368]	@ (80014c4 <displayTaskFunction+0x2d8>)
 8001352:	f64f 709c 	movw	r0, #65436	@ 0xff9c
 8001356:	f001 ffc3 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800135a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800135e:	f001 fef1 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(100, LINE(4.5), (void*)"JOIN", CENTER_MODE);
 8001362:	f001 ff3b 	bl	80031dc <BSP_LCD_GetFont>
 8001366:	4603      	mov	r3, r0
 8001368:	88db      	ldrh	r3, [r3, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f9cc 	bl	8000708 <__aeabi_i2d>
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b50      	ldr	r3, [pc, #320]	@ (80014b8 <displayTaskFunction+0x2cc>)
 8001376:	f7fe ff4b 	bl	8000210 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fa2b 	bl	80007dc <__aeabi_d2uiz>
 8001386:	4603      	mov	r3, r0
 8001388:	b299      	uxth	r1, r3
 800138a:	2301      	movs	r3, #1
 800138c:	4a4e      	ldr	r2, [pc, #312]	@ (80014c8 <displayTaskFunction+0x2dc>)
 800138e:	2064      	movs	r0, #100	@ 0x64
 8001390:	f001 ffa6 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					BSP_LCD_DisplayStringAt(100, LINE(5.5), (void*)"GAME", CENTER_MODE);
 8001394:	f001 ff22 	bl	80031dc <BSP_LCD_GetFont>
 8001398:	4603      	mov	r3, r0
 800139a:	88db      	ldrh	r3, [r3, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9b3 	bl	8000708 <__aeabi_i2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b46      	ldr	r3, [pc, #280]	@ (80014c0 <displayTaskFunction+0x2d4>)
 80013a8:	f7fe ff32 	bl	8000210 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fa12 	bl	80007dc <__aeabi_d2uiz>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b299      	uxth	r1, r3
 80013bc:	2301      	movs	r3, #1
 80013be:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <displayTaskFunction+0x2d8>)
 80013c0:	2064      	movs	r0, #100	@ 0x64
 80013c2:	f001 ff8d 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					osDelay (400);
 80013c6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80013ca:	f009 fc64 	bl	800ac96 <osDelay>
				} else {
					// Unexpected message
				}
			}
			break;
 80013ce:	e05d      	b.n	800148c <displayTaskFunction+0x2a0>

		case HOST_GAME_SCREEN:
			if (event.status == osEventMessage) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d15c      	bne.n	8001490 <displayTaskFunction+0x2a4>
				if (event.value.v == DISPLAY_HOST) {
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d159      	bne.n	8001490 <displayTaskFunction+0x2a4>
					BSP_LCD_SelectLayer(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f001 fea1 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 80013e2:	483a      	ldr	r0, [pc, #232]	@ (80014cc <displayTaskFunction+0x2e0>)
 80013e4:	f001 ff10 	bl	8003208 <BSP_LCD_Clear>

					BSP_LCD_SelectLayer(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f001 fe9b 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f001 ff0a 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_SetBackColor(00);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f001 febd 	bl	8003174 <BSP_LCD_SetBackColor>
					BSP_LCD_SetFont(&Font24);
 80013fa:	482e      	ldr	r0, [pc, #184]	@ (80014b4 <displayTaskFunction+0x2c8>)
 80013fc:	f001 fed4 	bl	80031a8 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001404:	f001 fe9e 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, LINE(5), (void*)"HOST GAME", CENTER_MODE);
 8001408:	f001 fee8 	bl	80031dc <BSP_LCD_GetFont>
 800140c:	4603      	mov	r3, r0
 800140e:	88db      	ldrh	r3, [r3, #6]
 8001410:	461a      	mov	r2, r3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4413      	add	r3, r2
 8001416:	b299      	uxth	r1, r3
 8001418:	2301      	movs	r3, #1
 800141a:	4a2d      	ldr	r2, [pc, #180]	@ (80014d0 <displayTaskFunction+0x2e4>)
 800141c:	2000      	movs	r0, #0
 800141e:	f001 ff5f 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					osDelay (400);
 8001422:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001426:	f009 fc36 	bl	800ac96 <osDelay>
				}
			}
			break;
 800142a:	e031      	b.n	8001490 <displayTaskFunction+0x2a4>

		case JOIN_GAME_SCREEN:
			if (event.status == osEventMessage) {
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d130      	bne.n	8001494 <displayTaskFunction+0x2a8>
				if (event.value.v == DISPLAY_JOIN) {
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d12d      	bne.n	8001494 <displayTaskFunction+0x2a8>
					BSP_LCD_SelectLayer(0);
 8001438:	2000      	movs	r0, #0
 800143a:	f001 fe73 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(LCD_COLOR_DARKRED);
 800143e:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <displayTaskFunction+0x2e8>)
 8001440:	f001 fee2 	bl	8003208 <BSP_LCD_Clear>

					BSP_LCD_SelectLayer(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f001 fe6d 	bl	8003124 <BSP_LCD_SelectLayer>
					BSP_LCD_Clear(00);
 800144a:	2000      	movs	r0, #0
 800144c:	f001 fedc 	bl	8003208 <BSP_LCD_Clear>
					BSP_LCD_SetBackColor(00);
 8001450:	2000      	movs	r0, #0
 8001452:	f001 fe8f 	bl	8003174 <BSP_LCD_SetBackColor>
					BSP_LCD_SetFont(&Font24);
 8001456:	4817      	ldr	r0, [pc, #92]	@ (80014b4 <displayTaskFunction+0x2c8>)
 8001458:	f001 fea6 	bl	80031a8 <BSP_LCD_SetFont>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001460:	f001 fe70 	bl	8003144 <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, LINE(5), (void*)"JOIN GAME", CENTER_MODE);
 8001464:	f001 feba 	bl	80031dc <BSP_LCD_GetFont>
 8001468:	4603      	mov	r3, r0
 800146a:	88db      	ldrh	r3, [r3, #6]
 800146c:	461a      	mov	r2, r3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4413      	add	r3, r2
 8001472:	b299      	uxth	r1, r3
 8001474:	2301      	movs	r3, #1
 8001476:	4a18      	ldr	r2, [pc, #96]	@ (80014d8 <displayTaskFunction+0x2ec>)
 8001478:	2000      	movs	r0, #0
 800147a:	f001 ff31 	bl	80032e0 <BSP_LCD_DisplayStringAt>
					osDelay (400);
 800147e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001482:	f009 fc08 	bl	800ac96 <osDelay>
				}
			}
			break;
 8001486:	e005      	b.n	8001494 <displayTaskFunction+0x2a8>
			break;
 8001488:	bf00      	nop
 800148a:	e6b3      	b.n	80011f4 <displayTaskFunction+0x8>
			break;
 800148c:	bf00      	nop
 800148e:	e6b1      	b.n	80011f4 <displayTaskFunction+0x8>
			break;
 8001490:	bf00      	nop
 8001492:	e6af      	b.n	80011f4 <displayTaskFunction+0x8>
			break;
 8001494:	bf00      	nop
 8001496:	e6ad      	b.n	80011f4 <displayTaskFunction+0x8>
 8001498:	20000214 	.word	0x20000214
 800149c:	200001d4 	.word	0x200001d4
 80014a0:	ff000080 	.word	0xff000080
 80014a4:	0800d48c 	.word	0x0800d48c
 80014a8:	20000030 	.word	0x20000030
 80014ac:	0800d434 	.word	0x0800d434
 80014b0:	ffff0000 	.word	0xffff0000
 80014b4:	20000028 	.word	0x20000028
 80014b8:	40120000 	.word	0x40120000
 80014bc:	0800d454 	.word	0x0800d454
 80014c0:	40160000 	.word	0x40160000
 80014c4:	0800d45c 	.word	0x0800d45c
 80014c8:	0800d464 	.word	0x0800d464
 80014cc:	ff008000 	.word	0xff008000
 80014d0:	0800d46c 	.word	0x0800d46c
 80014d4:	ff800000 	.word	0xff800000
 80014d8:	0800d478 	.word	0x0800d478

080014dc <touchTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_touchTaskFunction */
void touchTaskFunction(void const * argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	uint32_t y;
	osStatus status;
	/* Infinite loop */
	for(;;)
	{
		BSP_TS_GetState(&TS_State);
 80014e4:	4830      	ldr	r0, [pc, #192]	@ (80015a8 <touchTaskFunction+0xcc>)
 80014e6:	f002 fd89 	bl	8003ffc <BSP_TS_GetState>
		switch(state) {
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <touchTaskFunction+0xd0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d016      	beq.n	8001520 <touchTaskFunction+0x44>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	dc53      	bgt.n	800159e <touchTaskFunction+0xc2>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d04c      	beq.n	8001594 <touchTaskFunction+0xb8>
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d14f      	bne.n	800159e <touchTaskFunction+0xc2>
		case INIT:

			break;
		case TITLE_SCREEN:
			if (TS_State.touchDetected) {
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <touchTaskFunction+0xcc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d048      	beq.n	8001598 <touchTaskFunction+0xbc>
				status = osMessagePut(touchQueueHandle, TOUCHED_TITLE, 0);
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <touchTaskFunction+0xd4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f009 fbfe 	bl	800ad10 <osMessagePut>
 8001514:	60f8      	str	r0, [r7, #12]
				osDelay (400);
 8001516:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800151a:	f009 fbbc 	bl	800ac96 <osDelay>
			}
			break;
 800151e:	e03b      	b.n	8001598 <touchTaskFunction+0xbc>
		case CHOICE_SCREEN:
			if (TS_State.touchDetected) {
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <touchTaskFunction+0xcc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d039      	beq.n	800159c <touchTaskFunction+0xc0>
				x = TS_State.touchX[0];
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <touchTaskFunction+0xcc>)
 800152a:	885b      	ldrh	r3, [r3, #2]
 800152c:	617b      	str	r3, [r7, #20]
				y = TS_State.touchY[0];
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <touchTaskFunction+0xcc>)
 8001530:	899b      	ldrh	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
				if (x >= 70 && x <= 210 && y >= 36 && y <= 236) {
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b45      	cmp	r3, #69	@ 0x45
 8001538:	d911      	bls.n	800155e <touchTaskFunction+0x82>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2bd2      	cmp	r3, #210	@ 0xd2
 800153e:	d80e      	bhi.n	800155e <touchTaskFunction+0x82>
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b23      	cmp	r3, #35	@ 0x23
 8001544:	d90b      	bls.n	800155e <touchTaskFunction+0x82>
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2bec      	cmp	r3, #236	@ 0xec
 800154a:	d808      	bhi.n	800155e <touchTaskFunction+0x82>
					status = osMessagePut(touchQueueHandle, HOST_GAME_BTN, 0);
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <touchTaskFunction+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f009 fbdb 	bl	800ad10 <osMessagePut>
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	e015      	b.n	800158a <touchTaskFunction+0xae>
				} else if (x >= 270 && x <= 410 && y >= 36 && y <= 236) {
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001564:	d311      	bcc.n	800158a <touchTaskFunction+0xae>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 800156c:	d80d      	bhi.n	800158a <touchTaskFunction+0xae>
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b23      	cmp	r3, #35	@ 0x23
 8001572:	d90a      	bls.n	800158a <touchTaskFunction+0xae>
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	2bec      	cmp	r3, #236	@ 0xec
 8001578:	d807      	bhi.n	800158a <touchTaskFunction+0xae>
					status = osMessagePut(touchQueueHandle, JOIN_GAME_BTN, 0);
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <touchTaskFunction+0xd4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f009 fbc4 	bl	800ad10 <osMessagePut>
 8001588:	60f8      	str	r0, [r7, #12]
				}
				osDelay (400);
 800158a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800158e:	f009 fb82 	bl	800ac96 <osDelay>
			}
			break;
 8001592:	e003      	b.n	800159c <touchTaskFunction+0xc0>
			break;
 8001594:	bf00      	nop
 8001596:	e002      	b.n	800159e <touchTaskFunction+0xc2>
			break;
 8001598:	bf00      	nop
 800159a:	e000      	b.n	800159e <touchTaskFunction+0xc2>
			break;
 800159c:	bf00      	nop
		}
		osDelay(50);
 800159e:	2032      	movs	r0, #50	@ 0x32
 80015a0:	f009 fb79 	bl	800ac96 <osDelay>
		BSP_TS_GetState(&TS_State);
 80015a4:	e79e      	b.n	80014e4 <touchTaskFunction+0x8>
 80015a6:	bf00      	nop
 80015a8:	200001d8 	.word	0x200001d8
 80015ac:	200001d4 	.word	0x200001d4
 80015b0:	20000218 	.word	0x20000218

080015b4 <stateTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_stateTaskFunction */
void stateTaskFunction(void const * argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	osEvent event;
	osStatus status;
	/* Infinite loop */
	for(;;)
	{
		event = osMessageGet(touchQueueHandle, 100);
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <stateTaskFunction+0xc0>)
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	2264      	movs	r2, #100	@ 0x64
 80015c6:	4618      	mov	r0, r3
 80015c8:	f009 fbe2 	bl	800ad90 <osMessageGet>
		switch(state) {
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <stateTaskFunction+0xc4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d023      	beq.n	800161c <stateTaskFunction+0x68>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	dc49      	bgt.n	800166c <stateTaskFunction+0xb8>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <stateTaskFunction+0x2e>
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d00b      	beq.n	80015f8 <stateTaskFunction+0x44>
 80015e0:	e044      	b.n	800166c <stateTaskFunction+0xb8>
		case INIT:
			state = TITLE_SCREEN;
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <stateTaskFunction+0xc4>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
			osMessagePut(displayQueueHandle, DISPLAY_TITLE, 0);
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <stateTaskFunction+0xc8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f009 fb8d 	bl	800ad10 <osMessagePut>
			break;
 80015f6:	e039      	b.n	800166c <stateTaskFunction+0xb8>
		case TITLE_SCREEN:
			if (event.status == osEventMessage && event.value.v == TOUCHED_TITLE) {
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d133      	bne.n	8001666 <stateTaskFunction+0xb2>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d130      	bne.n	8001666 <stateTaskFunction+0xb2>
				state = CHOICE_SCREEN;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <stateTaskFunction+0xc4>)
 8001606:	2202      	movs	r2, #2
 8001608:	701a      	strb	r2, [r3, #0]
				status = osMessagePut(displayQueueHandle, DISPLAY_CHOICE, 0);
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <stateTaskFunction+0xc8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	2101      	movs	r1, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f009 fb7c 	bl	800ad10 <osMessagePut>
 8001618:	6178      	str	r0, [r7, #20]
			}
			break;
 800161a:	e024      	b.n	8001666 <stateTaskFunction+0xb2>
		case CHOICE_SCREEN:
			if (event.status == osEventMessage && event.value.v == HOST_GAME_BTN) {
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d10f      	bne.n	8001642 <stateTaskFunction+0x8e>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10c      	bne.n	8001642 <stateTaskFunction+0x8e>
				state = HOST_GAME_SCREEN;
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <stateTaskFunction+0xc4>)
 800162a:	2203      	movs	r2, #3
 800162c:	701a      	strb	r2, [r3, #0]
				status = osMessagePut(displayQueueHandle, DISPLAY_HOST, 0);
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <stateTaskFunction+0xc8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f009 fb6a 	bl	800ad10 <osMessagePut>
 800163c:	6178      	str	r0, [r7, #20]
 800163e:	bf00      	nop
			} else if (event.status == osEventMessage && event.value.v == JOIN_GAME_BTN) {
				state = JOIN_GAME_SCREEN;
				status = osMessagePut(displayQueueHandle, DISPLAY_JOIN, 0);
			}
			break;
 8001640:	e013      	b.n	800166a <stateTaskFunction+0xb6>
			} else if (event.status == osEventMessage && event.value.v == JOIN_GAME_BTN) {
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b10      	cmp	r3, #16
 8001646:	d110      	bne.n	800166a <stateTaskFunction+0xb6>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d10d      	bne.n	800166a <stateTaskFunction+0xb6>
				state = JOIN_GAME_SCREEN;
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <stateTaskFunction+0xc4>)
 8001650:	2204      	movs	r2, #4
 8001652:	701a      	strb	r2, [r3, #0]
				status = osMessagePut(displayQueueHandle, DISPLAY_JOIN, 0);
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <stateTaskFunction+0xc8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	2103      	movs	r1, #3
 800165c:	4618      	mov	r0, r3
 800165e:	f009 fb57 	bl	800ad10 <osMessagePut>
 8001662:	6178      	str	r0, [r7, #20]
			break;
 8001664:	e001      	b.n	800166a <stateTaskFunction+0xb6>
			break;
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <stateTaskFunction+0xb8>
			break;
 800166a:	bf00      	nop
		}
		osDelay(50);
 800166c:	2032      	movs	r0, #50	@ 0x32
 800166e:	f009 fb12 	bl	800ac96 <osDelay>
		event = osMessageGet(touchQueueHandle, 100);
 8001672:	e7a3      	b.n	80015bc <stateTaskFunction+0x8>
 8001674:	20000218 	.word	0x20000218
 8001678:	200001d4 	.word	0x200001d4
 800167c:	20000214 	.word	0x20000214

08001680 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800168a:	20c8      	movs	r0, #200	@ 0xc8
 800168c:	f001 fc46 	bl	8002f1c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001690:	f000 fa7a 	bl	8001b88 <ft5336_I2C_InitializeIfRequired>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80016c4:	2300      	movs	r3, #0
 80016c6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80016c8:	f000 fa5e 	bl	8001b88 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e010      	b.n	80016f4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	21a8      	movs	r1, #168	@ 0xa8
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fc01 	bl	8002ee0 <TS_IO_Read>
 80016de:	4603      	mov	r3, r0
 80016e0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80016e2:	7b7b      	ldrb	r3, [r7, #13]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b51      	cmp	r3, #81	@ 0x51
 80016e8:	d101      	bne.n	80016ee <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	3301      	adds	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d802      	bhi.n	8001700 <ft5336_ReadID+0x4e>
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0e8      	beq.n	80016d2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001700:	7b7b      	ldrb	r3, [r7, #13]
 8001702:	b2db      	uxtb	r3, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fa45 	bl	8001ba8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f933 	bl	800198c <ft5336_TS_DisableIT>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2102      	movs	r1, #2
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fbcb 	bl	8002ee0 <TS_IO_Read>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2db      	uxtb	r3, r3
 8001758:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d901      	bls.n	8001766 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <ft5336_TS_DetectTouch+0x50>)
 800176c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <ft5336_TS_DetectTouch+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b2db      	uxtb	r3, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200004bc 	.word	0x200004bc

08001784 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	@ (800195c <ft5336_TS_GetXY+0x1d8>)
 80017a8:	789a      	ldrb	r2, [r3, #2]
 80017aa:	4b6c      	ldr	r3, [pc, #432]	@ (800195c <ft5336_TS_GetXY+0x1d8>)
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	f080 80cf 	bcs.w	8001952 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80017b4:	4b69      	ldr	r3, [pc, #420]	@ (800195c <ft5336_TS_GetXY+0x1d8>)
 80017b6:	789b      	ldrb	r3, [r3, #2]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d871      	bhi.n	80018a0 <ft5336_TS_GetXY+0x11c>
 80017bc:	a201      	add	r2, pc, #4	@ (adr r2, 80017c4 <ft5336_TS_GetXY+0x40>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	080017ff 	.word	0x080017ff
 80017cc:	08001811 	.word	0x08001811
 80017d0:	08001823 	.word	0x08001823
 80017d4:	08001835 	.word	0x08001835
 80017d8:	08001847 	.word	0x08001847
 80017dc:	08001859 	.word	0x08001859
 80017e0:	0800186b 	.word	0x0800186b
 80017e4:	0800187d 	.word	0x0800187d
 80017e8:	0800188f 	.word	0x0800188f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80017ec:	2304      	movs	r3, #4
 80017ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80017f0:	2303      	movs	r3, #3
 80017f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80017f4:	2306      	movs	r3, #6
 80017f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80017f8:	2305      	movs	r3, #5
 80017fa:	753b      	strb	r3, [r7, #20]
      break;
 80017fc:	e051      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80017fe:	230a      	movs	r3, #10
 8001800:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001802:	2309      	movs	r3, #9
 8001804:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001806:	230c      	movs	r3, #12
 8001808:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800180a:	230b      	movs	r3, #11
 800180c:	753b      	strb	r3, [r7, #20]
      break;
 800180e:	e048      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001810:	2310      	movs	r3, #16
 8001812:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001814:	230f      	movs	r3, #15
 8001816:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001818:	2312      	movs	r3, #18
 800181a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800181c:	2311      	movs	r3, #17
 800181e:	753b      	strb	r3, [r7, #20]
      break;
 8001820:	e03f      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001822:	2316      	movs	r3, #22
 8001824:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001826:	2315      	movs	r3, #21
 8001828:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800182a:	2318      	movs	r3, #24
 800182c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800182e:	2317      	movs	r3, #23
 8001830:	753b      	strb	r3, [r7, #20]
      break;
 8001832:	e036      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001834:	231c      	movs	r3, #28
 8001836:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001838:	231b      	movs	r3, #27
 800183a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800183c:	231e      	movs	r3, #30
 800183e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001840:	231d      	movs	r3, #29
 8001842:	753b      	strb	r3, [r7, #20]
      break;
 8001844:	e02d      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001846:	2322      	movs	r3, #34	@ 0x22
 8001848:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800184a:	2321      	movs	r3, #33	@ 0x21
 800184c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800184e:	2324      	movs	r3, #36	@ 0x24
 8001850:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001852:	2323      	movs	r3, #35	@ 0x23
 8001854:	753b      	strb	r3, [r7, #20]
      break;
 8001856:	e024      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001858:	2328      	movs	r3, #40	@ 0x28
 800185a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800185c:	2327      	movs	r3, #39	@ 0x27
 800185e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001860:	232a      	movs	r3, #42	@ 0x2a
 8001862:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001864:	2329      	movs	r3, #41	@ 0x29
 8001866:	753b      	strb	r3, [r7, #20]
      break;
 8001868:	e01b      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800186a:	232e      	movs	r3, #46	@ 0x2e
 800186c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800186e:	232d      	movs	r3, #45	@ 0x2d
 8001870:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001872:	2330      	movs	r3, #48	@ 0x30
 8001874:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001876:	232f      	movs	r3, #47	@ 0x2f
 8001878:	753b      	strb	r3, [r7, #20]
      break;
 800187a:	e012      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800187c:	2334      	movs	r3, #52	@ 0x34
 800187e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001880:	2333      	movs	r3, #51	@ 0x33
 8001882:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001884:	2336      	movs	r3, #54	@ 0x36
 8001886:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001888:	2335      	movs	r3, #53	@ 0x35
 800188a:	753b      	strb	r3, [r7, #20]
      break;
 800188c:	e009      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800188e:	233a      	movs	r3, #58	@ 0x3a
 8001890:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001892:	2339      	movs	r3, #57	@ 0x39
 8001894:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001896:	233c      	movs	r3, #60	@ 0x3c
 8001898:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800189a:	233b      	movs	r3, #59	@ 0x3b
 800189c:	753b      	strb	r3, [r7, #20]
      break;
 800189e:	e000      	b.n	80018a2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80018a0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	7dfa      	ldrb	r2, [r7, #23]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fb18 	bl	8002ee0 <TS_IO_Read>
 80018b0:	4603      	mov	r3, r0
 80018b2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 80018bc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	7dba      	ldrb	r2, [r7, #22]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fb0a 	bl	8002ee0 <TS_IO_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 80018ea:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	7d7a      	ldrb	r2, [r7, #21]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 faef 	bl	8002ee0 <TS_IO_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 800190e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	7d3a      	ldrb	r2, [r7, #20]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fae1 	bl	8002ee0 <TS_IO_Read>
 800191e:	4603      	mov	r3, r0
 8001920:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001922:	7cfb      	ldrb	r3, [r7, #19]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b21b      	sxth	r3, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	b21b      	sxth	r3, r3
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 800193c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <ft5336_TS_GetXY+0x1dc>)
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <ft5336_TS_GetXY+0x1d8>)
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	3301      	adds	r3, #1
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b03      	ldr	r3, [pc, #12]	@ (800195c <ft5336_TS_GetXY+0x1d8>)
 8001950:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200004bc 	.word	0x200004bc
 8001960:	200004c0 	.word	0x200004c0

08001964 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	21a4      	movs	r1, #164	@ 0xa4
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fa94 	bl	8002eac <TS_IO_Write>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	21a4      	movs	r1, #164	@ 0xa4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fa80 	bl	8002eac <TS_IO_Write>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	6039      	str	r1, [r7, #0]
 80019ec:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fa71 	bl	8002ee0 <TS_IO_Read>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	601a      	str	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	4603      	mov	r3, r0
 8001a22:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001a34:	4b4d      	ldr	r3, [pc, #308]	@ (8001b6c <ft5336_TS_GetTouchInfo+0x158>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f080 8090 	bcs.w	8001b62 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b09      	cmp	r3, #9
 8001a46:	d85d      	bhi.n	8001b04 <ft5336_TS_GetTouchInfo+0xf0>
 8001a48:	a201      	add	r2, pc, #4	@ (adr r2, 8001a50 <ft5336_TS_GetTouchInfo+0x3c>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a79 	.word	0x08001a79
 8001a54:	08001a87 	.word	0x08001a87
 8001a58:	08001a95 	.word	0x08001a95
 8001a5c:	08001aa3 	.word	0x08001aa3
 8001a60:	08001ab1 	.word	0x08001ab1
 8001a64:	08001abf 	.word	0x08001abf
 8001a68:	08001acd 	.word	0x08001acd
 8001a6c:	08001adb 	.word	0x08001adb
 8001a70:	08001ae9 	.word	0x08001ae9
 8001a74:	08001af7 	.word	0x08001af7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001a80:	2308      	movs	r3, #8
 8001a82:	757b      	strb	r3, [r7, #21]
      break;
 8001a84:	e03f      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001a86:	2309      	movs	r3, #9
 8001a88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001a8a:	230d      	movs	r3, #13
 8001a8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001a8e:	230e      	movs	r3, #14
 8001a90:	757b      	strb	r3, [r7, #21]
      break;
 8001a92:	e038      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001a94:	230f      	movs	r3, #15
 8001a96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001a98:	2313      	movs	r3, #19
 8001a9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001a9c:	2314      	movs	r3, #20
 8001a9e:	757b      	strb	r3, [r7, #21]
      break;
 8001aa0:	e031      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001aa2:	2315      	movs	r3, #21
 8001aa4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001aa6:	2319      	movs	r3, #25
 8001aa8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001aaa:	231a      	movs	r3, #26
 8001aac:	757b      	strb	r3, [r7, #21]
      break;
 8001aae:	e02a      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001ab0:	231b      	movs	r3, #27
 8001ab2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001ab4:	231f      	movs	r3, #31
 8001ab6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	757b      	strb	r3, [r7, #21]
      break;
 8001abc:	e023      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001abe:	2321      	movs	r3, #33	@ 0x21
 8001ac0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001ac2:	2325      	movs	r3, #37	@ 0x25
 8001ac4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001ac6:	2326      	movs	r3, #38	@ 0x26
 8001ac8:	757b      	strb	r3, [r7, #21]
      break;
 8001aca:	e01c      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001acc:	2327      	movs	r3, #39	@ 0x27
 8001ace:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001ad0:	232b      	movs	r3, #43	@ 0x2b
 8001ad2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001ad4:	232c      	movs	r3, #44	@ 0x2c
 8001ad6:	757b      	strb	r3, [r7, #21]
      break;
 8001ad8:	e015      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001ada:	232d      	movs	r3, #45	@ 0x2d
 8001adc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001ade:	2331      	movs	r3, #49	@ 0x31
 8001ae0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001ae2:	2332      	movs	r3, #50	@ 0x32
 8001ae4:	757b      	strb	r3, [r7, #21]
      break;
 8001ae6:	e00e      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001ae8:	2333      	movs	r3, #51	@ 0x33
 8001aea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001aec:	2337      	movs	r3, #55	@ 0x37
 8001aee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001af0:	2338      	movs	r3, #56	@ 0x38
 8001af2:	757b      	strb	r3, [r7, #21]
      break;
 8001af4:	e007      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001af6:	2339      	movs	r3, #57	@ 0x39
 8001af8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001afa:	233d      	movs	r3, #61	@ 0x3d
 8001afc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001afe:	233e      	movs	r3, #62	@ 0x3e
 8001b00:	757b      	strb	r3, [r7, #21]
      break;
 8001b02:	e000      	b.n	8001b06 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001b04:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	7dfa      	ldrb	r2, [r7, #23]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 f9e6 	bl	8002ee0 <TS_IO_Read>
 8001b14:	4603      	mov	r3, r0
 8001b16:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	119b      	asrs	r3, r3, #6
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	7dba      	ldrb	r2, [r7, #22]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 f9d6 	bl	8002ee0 <TS_IO_Read>
 8001b34:	4603      	mov	r3, r0
 8001b36:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001b38:	7d3b      	ldrb	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	7d7a      	ldrb	r2, [r7, #21]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 f9c8 	bl	8002ee0 <TS_IO_Read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001b54:	7d3b      	ldrb	r3, [r7, #20]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	111b      	asrs	r3, r3, #4
 8001b5a:	f003 0204 	and.w	r2, r3, #4
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200004bc 	.word	0x200004bc

08001b70 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200004bc 	.word	0x200004bc

08001b88 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001b8c:	f7ff fff0 	bl	8001b70 <ft5336_Get_I2C_InitializedStatus>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d104      	bne.n	8001ba0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001b96:	f001 f97f 	bl	8002e98 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001b9a:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200004bc 	.word	0x200004bc

08001ba8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b090      	sub	sp, #64	@ 0x40
 8001bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	4baf      	ldr	r3, [pc, #700]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4aae      	ldr	r2, [pc, #696]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4bac      	ldr	r3, [pc, #688]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf2:	4ba9      	ldr	r3, [pc, #676]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4aa8      	ldr	r2, [pc, #672]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4ba6      	ldr	r3, [pc, #664]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4ba3      	ldr	r3, [pc, #652]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4aa2      	ldr	r2, [pc, #648]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4ba0      	ldr	r3, [pc, #640]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b9d      	ldr	r3, [pc, #628]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a9c      	ldr	r2, [pc, #624]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b9a      	ldr	r3, [pc, #616]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b97      	ldr	r3, [pc, #604]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a96      	ldr	r2, [pc, #600]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b94      	ldr	r3, [pc, #592]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b91      	ldr	r3, [pc, #580]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a90      	ldr	r2, [pc, #576]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b8e      	ldr	r3, [pc, #568]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a8a      	ldr	r2, [pc, #552]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b88      	ldr	r3, [pc, #544]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c82:	4b85      	ldr	r3, [pc, #532]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a84      	ldr	r2, [pc, #528]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b82      	ldr	r3, [pc, #520]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	4b79      	ldr	r3, [pc, #484]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a78      	ldr	r2, [pc, #480]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b76      	ldr	r3, [pc, #472]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a72      	ldr	r2, [pc, #456]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b70      	ldr	r3, [pc, #448]	@ (8001e98 <MX_GPIO_Init+0x2d4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2160      	movs	r1, #96	@ 0x60
 8001ce6:	486d      	ldr	r0, [pc, #436]	@ (8001e9c <MX_GPIO_Init+0x2d8>)
 8001ce8:	f004 fd6e 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2120      	movs	r1, #32
 8001cf0:	486b      	ldr	r0, [pc, #428]	@ (8001ea0 <MX_GPIO_Init+0x2dc>)
 8001cf2:	f004 fd69 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	4869      	ldr	r0, [pc, #420]	@ (8001ea0 <MX_GPIO_Init+0x2dc>)
 8001cfc:	f004 fd64 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2108      	movs	r1, #8
 8001d04:	4867      	ldr	r0, [pc, #412]	@ (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001d06:	f004 fd5f 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d10:	4865      	ldr	r0, [pc, #404]	@ (8001ea8 <MX_GPIO_Init+0x2e4>)
 8001d12:	f004 fd59 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d16:	2200      	movs	r2, #0
 8001d18:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001d1c:	4863      	ldr	r0, [pc, #396]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001d1e:	f004 fd53 	bl	80067c8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	21c8      	movs	r1, #200	@ 0xc8
 8001d26:	4862      	ldr	r0, [pc, #392]	@ (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001d28:	f004 fd4e 	bl	80067c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4857      	ldr	r0, [pc, #348]	@ (8001e9c <MX_GPIO_Init+0x2d8>)
 8001d40:	f004 fa8a 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001d44:	2304      	movs	r3, #4
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d54:	2309      	movs	r3, #9
 8001d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	484f      	ldr	r0, [pc, #316]	@ (8001e9c <MX_GPIO_Init+0x2d8>)
 8001d60:	f004 fa7a 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d64:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d76:	230b      	movs	r3, #11
 8001d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	484b      	ldr	r0, [pc, #300]	@ (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001d82:	f004 fa69 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d86:	f643 0323 	movw	r3, #14371	@ 0x3823
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4844      	ldr	r0, [pc, #272]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001da4:	f004 fa58 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001db8:	2308      	movs	r3, #8
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4837      	ldr	r0, [pc, #220]	@ (8001ea0 <MX_GPIO_Init+0x2dc>)
 8001dc4:	f004 fa48 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001dc8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001dda:	230c      	movs	r3, #12
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4834      	ldr	r0, [pc, #208]	@ (8001eb8 <MX_GPIO_Init+0x2f4>)
 8001de6:	f004 fa37 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001dea:	f248 1340 	movw	r3, #33088	@ 0x8140
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482f      	ldr	r0, [pc, #188]	@ (8001ebc <MX_GPIO_Init+0x2f8>)
 8001e00:	f004 fa2a 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001e04:	2360      	movs	r3, #96	@ 0x60
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4820      	ldr	r0, [pc, #128]	@ (8001e9c <MX_GPIO_Init+0x2d8>)
 8001e1c:	f004 fa1c 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001e20:	2340      	movs	r3, #64	@ 0x40
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e30:	230a      	movs	r3, #10
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	481e      	ldr	r0, [pc, #120]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e3c:	f004 fa0c 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	481a      	ldr	r0, [pc, #104]	@ (8001ec0 <MX_GPIO_Init+0x2fc>)
 8001e56:	f004 f9ff 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e5a:	2340      	movs	r3, #64	@ 0x40
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e5e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <MX_GPIO_Init+0x2dc>)
 8001e70:	f004 f9f2 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001e74:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e86:	230a      	movs	r3, #10
 8001e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480a      	ldr	r0, [pc, #40]	@ (8001ebc <MX_GPIO_Init+0x2f8>)
 8001e92:	f004 f9e1 	bl	8006258 <HAL_GPIO_Init>
 8001e96:	e015      	b.n	8001ec4 <MX_GPIO_Init+0x300>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40022800 	.word	0x40022800
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021c00 	.word	0x40021c00
 8001eb0:	40021800 	.word	0x40021800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ec4:	23f0      	movs	r3, #240	@ 0xf0
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001edc:	4619      	mov	r1, r3
 8001ede:	4891      	ldr	r0, [pc, #580]	@ (8002124 <MX_GPIO_Init+0x560>)
 8001ee0:	f004 f9ba 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001efe:	4619      	mov	r1, r3
 8001f00:	4889      	ldr	r0, [pc, #548]	@ (8002128 <MX_GPIO_Init+0x564>)
 8001f02:	f004 f9a9 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001f06:	2328      	movs	r3, #40	@ 0x28
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4883      	ldr	r0, [pc, #524]	@ (800212c <MX_GPIO_Init+0x568>)
 8001f1e:	f004 f99b 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	487e      	ldr	r0, [pc, #504]	@ (8002130 <MX_GPIO_Init+0x56c>)
 8001f38:	f004 f98e 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f50:	4619      	mov	r1, r3
 8001f52:	4878      	ldr	r0, [pc, #480]	@ (8002134 <MX_GPIO_Init+0x570>)
 8001f54:	f004 f980 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001f58:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	486e      	ldr	r0, [pc, #440]	@ (8002128 <MX_GPIO_Init+0x564>)
 8001f6e:	f004 f973 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f72:	2310      	movs	r3, #16
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4869      	ldr	r0, [pc, #420]	@ (800212c <MX_GPIO_Init+0x568>)
 8001f86:	f004 f967 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4861      	ldr	r0, [pc, #388]	@ (800212c <MX_GPIO_Init+0x568>)
 8001fa6:	f004 f957 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001faa:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	485e      	ldr	r0, [pc, #376]	@ (8002138 <MX_GPIO_Init+0x574>)
 8001fc0:	f004 f94a 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4851      	ldr	r0, [pc, #324]	@ (8002124 <MX_GPIO_Init+0x560>)
 8001fde:	f004 f93b 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001fe2:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	484f      	ldr	r0, [pc, #316]	@ (8002138 <MX_GPIO_Init+0x574>)
 8001ffc:	f004 f92c 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002000:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002006:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002014:	4619      	mov	r1, r3
 8002016:	4843      	ldr	r0, [pc, #268]	@ (8002124 <MX_GPIO_Init+0x560>)
 8002018:	f004 f91e 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800201c:	2310      	movs	r3, #16
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800202c:	230a      	movs	r3, #10
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002030:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	4840      	ldr	r0, [pc, #256]	@ (8002138 <MX_GPIO_Init+0x574>)
 8002038:	f004 f90e 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800203c:	23c8      	movs	r3, #200	@ 0xc8
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800204c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	4835      	ldr	r0, [pc, #212]	@ (8002128 <MX_GPIO_Init+0x564>)
 8002054:	f004 f900 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002058:	2305      	movs	r3, #5
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002068:	230a      	movs	r3, #10
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002070:	4619      	mov	r1, r3
 8002072:	482f      	ldr	r0, [pc, #188]	@ (8002130 <MX_GPIO_Init+0x56c>)
 8002074:	f004 f8f0 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002078:	2332      	movs	r3, #50	@ 0x32
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002088:	230b      	movs	r3, #11
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	4827      	ldr	r0, [pc, #156]	@ (8002130 <MX_GPIO_Init+0x56c>)
 8002094:	f004 f8e0 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002098:	2304      	movs	r3, #4
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020a8:	2309      	movs	r3, #9
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b0:	4619      	mov	r1, r3
 80020b2:	4822      	ldr	r0, [pc, #136]	@ (800213c <MX_GPIO_Init+0x578>)
 80020b4:	f004 f8d0 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80020b8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ca:	2309      	movs	r3, #9
 80020cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	4815      	ldr	r0, [pc, #84]	@ (800212c <MX_GPIO_Init+0x568>)
 80020d6:	f004 f8bf 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020da:	2386      	movs	r3, #134	@ 0x86
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ea:	230b      	movs	r3, #11
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f2:	4619      	mov	r1, r3
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <MX_GPIO_Init+0x57c>)
 80020f6:	f004 f8af 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80020fa:	2328      	movs	r3, #40	@ 0x28
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800210a:	230a      	movs	r3, #10
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002112:	4619      	mov	r1, r3
 8002114:	480a      	ldr	r0, [pc, #40]	@ (8002140 <MX_GPIO_Init+0x57c>)
 8002116:	f004 f89f 	bl	8006258 <HAL_GPIO_Init>

}
 800211a:	bf00      	nop
 800211c:	3740      	adds	r7, #64	@ 0x40
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021800 	.word	0x40021800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40020800 	.word	0x40020800
 8002134:	40022800 	.word	0x40022800
 8002138:	40021c00 	.word	0x40021c00
 800213c:	40020400 	.word	0x40020400
 8002140:	40020000 	.word	0x40020000

08002144 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <MX_I2C1_Init+0x74>)
 800214a:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <MX_I2C1_Init+0x78>)
 800214c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002150:	4a1b      	ldr	r2, [pc, #108]	@ (80021c0 <MX_I2C1_Init+0x7c>)
 8002152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <MX_I2C1_Init+0x74>)
 800215c:	2201      	movs	r2, #1
 800215e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <MX_I2C1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <MX_I2C1_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217e:	480e      	ldr	r0, [pc, #56]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002180:	f004 fb3c 	bl	80067fc <HAL_I2C_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800218a:	f000 fbb7 	bl	80028fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218e:	2100      	movs	r1, #0
 8002190:	4809      	ldr	r0, [pc, #36]	@ (80021b8 <MX_I2C1_Init+0x74>)
 8002192:	f005 f8fd 	bl	8007390 <HAL_I2CEx_ConfigAnalogFilter>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800219c:	f000 fbae 	bl	80028fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021a0:	2100      	movs	r1, #0
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_I2C1_Init+0x74>)
 80021a4:	f005 f93f 	bl	8007426 <HAL_I2CEx_ConfigDigitalFilter>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ae:	f000 fba5 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200004c4 	.word	0x200004c4
 80021bc:	40005400 	.word	0x40005400
 80021c0:	00c0eaff 	.word	0x00c0eaff

080021c4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021ca:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <MX_I2C3_Init+0x78>)
 80021cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002240 <MX_I2C3_Init+0x7c>)
 80021d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80021d4:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021dc:	2201      	movs	r2, #1
 80021de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e0:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <MX_I2C3_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021fe:	480e      	ldr	r0, [pc, #56]	@ (8002238 <MX_I2C3_Init+0x74>)
 8002200:	f004 fafc 	bl	80067fc <HAL_I2C_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800220a:	f000 fb77 	bl	80028fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800220e:	2100      	movs	r1, #0
 8002210:	4809      	ldr	r0, [pc, #36]	@ (8002238 <MX_I2C3_Init+0x74>)
 8002212:	f005 f8bd 	bl	8007390 <HAL_I2CEx_ConfigAnalogFilter>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800221c:	f000 fb6e 	bl	80028fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002220:	2100      	movs	r1, #0
 8002222:	4805      	ldr	r0, [pc, #20]	@ (8002238 <MX_I2C3_Init+0x74>)
 8002224:	f005 f8ff 	bl	8007426 <HAL_I2CEx_ConfigDigitalFilter>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800222e:	f000 fb65 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000518 	.word	0x20000518
 800223c:	40005c00 	.word	0x40005c00
 8002240:	00c0eaff 	.word	0x00c0eaff

08002244 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0ac      	sub	sp, #176	@ 0xb0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	2284      	movs	r2, #132	@ 0x84
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f00a ff99 	bl	800d19c <memset>
  if(i2cHandle->Instance==I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a44      	ldr	r2, [pc, #272]	@ (8002380 <HAL_I2C_MspInit+0x13c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13d      	bne.n	80022f0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002274:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002278:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800227a:	2300      	movs	r3, #0
 800227c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	4618      	mov	r0, r3
 8002284:	f006 f958 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800228e:	f000 fb35 	bl	80028fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	4a3b      	ldr	r2, [pc, #236]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	@ 0x30
 800229e:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	2312      	movs	r3, #18
 80022b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c4:	2304      	movs	r3, #4
 80022c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ce:	4619      	mov	r1, r3
 80022d0:	482d      	ldr	r0, [pc, #180]	@ (8002388 <HAL_I2C_MspInit+0x144>)
 80022d2:	f003 ffc1 	bl	8006258 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a2a      	ldr	r2, [pc, #168]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 80022dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80022ee:	e042      	b.n	8002376 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	@ (800238c <HAL_I2C_MspInit+0x148>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d13d      	bne.n	8002376 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4618      	mov	r0, r3
 800230c:	f006 f914 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002316:	f000 faf1 	bl	80028fc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800231a:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002332:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233a:	2312      	movs	r3, #18
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800234c:	2304      	movs	r3, #4
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002352:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002356:	4619      	mov	r1, r3
 8002358:	480d      	ldr	r0, [pc, #52]	@ (8002390 <HAL_I2C_MspInit+0x14c>)
 800235a:	f003 ff7d 	bl	8006258 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 8002364:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_I2C_MspInit+0x140>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
}
 8002376:	bf00      	nop
 8002378:	37b0      	adds	r7, #176	@ 0xb0
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40005400 	.word	0x40005400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400
 800238c:	40005c00 	.word	0x40005c00
 8002390:	40021c00 	.word	0x40021c00

08002394 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <HAL_I2C_MspDeInit+0x64>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d110      	bne.n	80023c8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_I2C_MspDeInit+0x68>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_I2C_MspDeInit+0x68>)
 80023ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80023b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b6:	4812      	ldr	r0, [pc, #72]	@ (8002400 <HAL_I2C_MspDeInit+0x6c>)
 80023b8:	f004 f8fa 	bl	80065b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80023bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023c0:	480f      	ldr	r0, [pc, #60]	@ (8002400 <HAL_I2C_MspDeInit+0x6c>)
 80023c2:	f004 f8f5 	bl	80065b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80023c6:	e013      	b.n	80023f0 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <HAL_I2C_MspDeInit+0x70>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <HAL_I2C_MspDeInit+0x68>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <HAL_I2C_MspDeInit+0x68>)
 80023d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	4809      	ldr	r0, [pc, #36]	@ (8002408 <HAL_I2C_MspDeInit+0x74>)
 80023e2:	f004 f8e5 	bl	80065b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80023e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ea:	4807      	ldr	r0, [pc, #28]	@ (8002408 <HAL_I2C_MspDeInit+0x74>)
 80023ec:	f004 f8e0 	bl	80065b0 <HAL_GPIO_DeInit>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40005400 	.word	0x40005400
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020400 	.word	0x40020400
 8002404:	40005c00 	.word	0x40005c00
 8002408:	40021c00 	.word	0x40021c00

0800240c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	@ 0x38
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2234      	movs	r2, #52	@ 0x34
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f00a febf 	bl	800d19c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800241e:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002420:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <MX_LTDC_Init+0x100>)
 8002422:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002424:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002430:	4b35      	ldr	r3, [pc, #212]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800243e:	2228      	movs	r2, #40	@ 0x28
 8002440:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002444:	2209      	movs	r2, #9
 8002446:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002448:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800244a:	2235      	movs	r2, #53	@ 0x35
 800244c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800244e:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002450:	220b      	movs	r2, #11
 8002452:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002454:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002456:	f240 2215 	movw	r2, #533	@ 0x215
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800245c:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800245e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002466:	f240 2235 	movw	r2, #565	@ 0x235
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800246e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <MX_LTDC_Init+0xfc>)
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800248c:	481e      	ldr	r0, [pc, #120]	@ (8002508 <MX_LTDC_Init+0xfc>)
 800248e:	f005 f816 	bl	80074be <HAL_LTDC_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002498:	f000 fa30 	bl	80028fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80024a0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80024a4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80024aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80024ae:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80024b0:	2302      	movs	r3, #2
 80024b2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80024b4:	23ff      	movs	r3, #255	@ 0xff
 80024b6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80024bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024c0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80024c2:	2307      	movs	r3, #7
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80024c6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80024cc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80024d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_LTDC_Init+0xfc>)
 80024f2:	f005 f943 	bl	800777c <HAL_LTDC_ConfigLayer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80024fc:	f000 f9fe 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3738      	adds	r7, #56	@ 0x38
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000056c 	.word	0x2000056c
 800250c:	40016800 	.word	0x40016800

08002510 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0ae      	sub	sp, #184	@ 0xb8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	2284      	movs	r2, #132	@ 0x84
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00a fe33 	bl	800d19c <memset>
  if(ltdcHandle->Instance==LTDC)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6f      	ldr	r2, [pc, #444]	@ (80026f8 <HAL_LTDC_MspInit+0x1e8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	f040 80d6 	bne.w	80026ee <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002542:	2308      	movs	r3, #8
 8002544:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002546:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800254c:	2305      	movs	r3, #5
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002550:	2302      	movs	r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002554:	2303      	movs	r3, #3
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002558:	2301      	movs	r3, #1
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800255c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002560:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	4618      	mov	r0, r3
 8002568:	f005 ffe6 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8002572:	f000 f9c3 	bl	80028fc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002576:	4b61      	ldr	r3, [pc, #388]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a60      	ldr	r2, [pc, #384]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 800257c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b5e      	ldr	r3, [pc, #376]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800258e:	4b5b      	ldr	r3, [pc, #364]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a5a      	ldr	r2, [pc, #360]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 8002594:	f043 0310 	orr.w	r3, r3, #16
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b58      	ldr	r3, [pc, #352]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025a6:	4b55      	ldr	r3, [pc, #340]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a54      	ldr	r2, [pc, #336]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b52      	ldr	r3, [pc, #328]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80025be:	4b4f      	ldr	r3, [pc, #316]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025d6:	4b49      	ldr	r3, [pc, #292]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b46      	ldr	r3, [pc, #280]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80025ee:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a42      	ldr	r2, [pc, #264]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <HAL_LTDC_MspInit+0x1ec>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002606:	2310      	movs	r3, #16
 8002608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800261e:	230e      	movs	r3, #14
 8002620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002628:	4619      	mov	r1, r3
 800262a:	4835      	ldr	r0, [pc, #212]	@ (8002700 <HAL_LTDC_MspInit+0x1f0>)
 800262c:	f003 fe14 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002630:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800264a:	230e      	movs	r3, #14
 800264c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002650:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002654:	4619      	mov	r1, r3
 8002656:	482b      	ldr	r0, [pc, #172]	@ (8002704 <HAL_LTDC_MspInit+0x1f4>)
 8002658:	f003 fdfe 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800265c:	23f7      	movs	r3, #247	@ 0xf7
 800265e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002674:	230e      	movs	r3, #14
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800267a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800267e:	4619      	mov	r1, r3
 8002680:	4821      	ldr	r0, [pc, #132]	@ (8002708 <HAL_LTDC_MspInit+0x1f8>)
 8002682:	f003 fde9 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026a0:	2309      	movs	r3, #9
 80026a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4817      	ldr	r0, [pc, #92]	@ (800270c <HAL_LTDC_MspInit+0x1fc>)
 80026ae:	f003 fdd3 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80026b2:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80026b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026cc:	230e      	movs	r3, #14
 80026ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026d6:	4619      	mov	r1, r3
 80026d8:	480d      	ldr	r0, [pc, #52]	@ (8002710 <HAL_LTDC_MspInit+0x200>)
 80026da:	f003 fdbd 	bl	8006258 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2105      	movs	r1, #5
 80026e2:	2058      	movs	r0, #88	@ 0x58
 80026e4:	f002 ff4e 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80026e8:	2058      	movs	r0, #88	@ 0x58
 80026ea:	f002 ff67 	bl	80055bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80026ee:	bf00      	nop
 80026f0:	37b8      	adds	r7, #184	@ 0xb8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40016800 	.word	0x40016800
 80026fc:	40023800 	.word	0x40023800
 8002700:	40021000 	.word	0x40021000
 8002704:	40022400 	.word	0x40022400
 8002708:	40022800 	.word	0x40022800
 800270c:	40021800 	.word	0x40021800
 8002710:	40022000 	.word	0x40022000

08002714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h;
	ADC_ChannelConfTypeDef sConfig = {0};
 800271a:	463b      	mov	r3, r7
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002726:	2301      	movs	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272e:	f002 fb88 	bl	8004e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002732:	f000 f85f 	bl	80027f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002736:	f7ff fa45 	bl	8001bc4 <MX_GPIO_Init>
  MX_ADC3_Init();
 800273a:	f7fe fa39 	bl	8000bb0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 800273e:	f7fe fb69 	bl	8000e14 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002742:	f7fe fbbf 	bl	8000ec4 <MX_FMC_Init>
  MX_I2C1_Init();
 8002746:	f7ff fcfd 	bl	8002144 <MX_I2C1_Init>
  MX_I2C3_Init();
 800274a:	f7ff fd3b 	bl	80021c4 <MX_I2C3_Init>
  MX_LTDC_Init();
 800274e:	f7ff fe5d 	bl	800240c <MX_LTDC_Init>
  MX_RTC_Init();
 8002752:	f000 f8d9 	bl	8002908 <MX_RTC_Init>
  MX_SPI2_Init();
 8002756:	f000 f9a9 	bl	8002aac <MX_SPI2_Init>
  MX_TIM1_Init();
 800275a:	f001 ff85 	bl	8004668 <MX_TIM1_Init>
  MX_TIM2_Init();
 800275e:	f001 ffd7 	bl	8004710 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002762:	f002 f823 	bl	80047ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8002766:	f002 f86f 	bl	8004848 <MX_TIM5_Init>
  MX_TIM8_Init();
 800276a:	f002 f8bb 	bl	80048e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800276e:	f002 f9cf 	bl	8004b10 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002772:	f002 f9fd 	bl	8004b70 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002776:	f7fe f9c9 	bl	8000b0c <MX_ADC1_Init>
  MX_DAC_Init();
 800277a:	f7fe fad9 	bl	8000d30 <MX_DAC_Init>
  MX_UART7_Init();
 800277e:	f002 f997 	bl	8004ab0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8002782:	f000 fbd7 	bl	8002f34 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002786:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800278a:	2000      	movs	r0, #0
 800278c:	f000 fc6a 	bl	8003064 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8002790:	f000 fc40 	bl	8003014 <BSP_LCD_GetXSize>
 8002794:	4604      	mov	r4, r0
 8002796:	f000 fc51 	bl	800303c <BSP_LCD_GetYSize>
 800279a:	4603      	mov	r3, r0
 800279c:	fb04 f303 	mul.w	r3, r4, r3
 80027a0:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4619      	mov	r1, r3
 80027a8:	2001      	movs	r0, #1
 80027aa:	f000 fc5b 	bl	8003064 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80027ae:	f000 ffd3 	bl	8003758 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 fcb6 	bl	8003124 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_DARKBLUE);
 80027b8:	480d      	ldr	r0, [pc, #52]	@ (80027f0 <main+0xdc>)
 80027ba:	f000 fd25 	bl	8003208 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80027be:	2001      	movs	r0, #1
 80027c0:	f000 fcb0 	bl	8003124 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f000 fd1f 	bl	8003208 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80027ca:	f000 fc23 	bl	8003014 <BSP_LCD_GetXSize>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29c      	uxth	r4, r3
 80027d2:	f000 fc33 	bl	800303c <BSP_LCD_GetYSize>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	4620      	mov	r0, r4
 80027de:	f001 fbcd 	bl	8003f7c <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80027e2:	f7fe fc73 	bl	80010cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80027e6:	f008 fa03 	bl	800abf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <main+0xd6>
 80027ee:	bf00      	nop
 80027f0:	ff000080 	.word	0xff000080

080027f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b094      	sub	sp, #80	@ 0x50
 80027f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	2230      	movs	r2, #48	@ 0x30
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f00a fcca 	bl	800d19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002818:	f005 f972 	bl	8007b00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <SystemClock_Config+0xdc>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <SystemClock_Config+0xdc>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	@ 0x40
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <SystemClock_Config+0xdc>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <SystemClock_Config+0xe0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a26      	ldr	r2, [pc, #152]	@ (80028d4 <SystemClock_Config+0xe0>)
 800283a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <SystemClock_Config+0xe0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800284c:	2309      	movs	r3, #9
 800284e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002856:	2301      	movs	r3, #1
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285a:	2302      	movs	r3, #2
 800285c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002864:	2319      	movs	r3, #25
 8002866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002868:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286e:	2302      	movs	r3, #2
 8002870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002872:	2309      	movs	r3, #9
 8002874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	4618      	mov	r0, r3
 800287c:	f005 f9a0 	bl	8007bc0 <HAL_RCC_OscConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002886:	f000 f839 	bl	80028fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800288a:	f005 f949 	bl	8007b20 <HAL_PWREx_EnableOverDrive>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002894:	f000 f832 	bl	80028fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002898:	230f      	movs	r3, #15
 800289a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289c:	2302      	movs	r3, #2
 800289e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	2106      	movs	r1, #6
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 fc26 	bl	8008108 <HAL_RCC_ClockConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80028c2:	f000 f81b 	bl	80028fc <Error_Handler>
  }
}
 80028c6:	bf00      	nop
 80028c8:	3750      	adds	r7, #80	@ 0x50
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000

080028d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ea:	f002 fab7 	bl	8004e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40001000 	.word	0x40001000

080028fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i
}
 8002902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <Error_Handler+0x8>

08002908 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b090      	sub	sp, #64	@ 0x40
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800290e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002922:	463b      	mov	r3, r7
 8002924:	2228      	movs	r2, #40	@ 0x28
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f00a fc37 	bl	800d19c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800292e:	4b46      	ldr	r3, [pc, #280]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002930:	4a46      	ldr	r2, [pc, #280]	@ (8002a4c <MX_RTC_Init+0x144>)
 8002932:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002934:	4b44      	ldr	r3, [pc, #272]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800293a:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <MX_RTC_Init+0x140>)
 800293c:	227f      	movs	r2, #127	@ 0x7f
 800293e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002940:	4b41      	ldr	r3, [pc, #260]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002942:	22ff      	movs	r2, #255	@ 0xff
 8002944:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002946:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800294c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a48 <MX_RTC_Init+0x140>)
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002952:	4b3d      	ldr	r3, [pc, #244]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002958:	483b      	ldr	r0, [pc, #236]	@ (8002a48 <MX_RTC_Init+0x140>)
 800295a:	f006 f9dd 	bl	8008d18 <HAL_RTC_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002964:	f7ff ffca 	bl	80028fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800297a:	2300      	movs	r3, #0
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002986:	2201      	movs	r2, #1
 8002988:	4619      	mov	r1, r3
 800298a:	482f      	ldr	r0, [pc, #188]	@ (8002a48 <MX_RTC_Init+0x140>)
 800298c:	f006 fa46 	bl	8008e1c <HAL_RTC_SetTime>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002996:	f7ff ffb1 	bl	80028fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b6:	2201      	movs	r2, #1
 80029b8:	4619      	mov	r1, r3
 80029ba:	4823      	ldr	r0, [pc, #140]	@ (8002a48 <MX_RTC_Init+0x140>)
 80029bc:	f006 fac8 	bl	8008f50 <HAL_RTC_SetDate>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80029c6:	f7ff ff99 	bl	80028fc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80029f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029fa:	463b      	mov	r3, r7
 80029fc:	2201      	movs	r2, #1
 80029fe:	4619      	mov	r1, r3
 8002a00:	4811      	ldr	r0, [pc, #68]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002a02:	f006 fb29 	bl	8009058 <HAL_RTC_SetAlarm>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002a0c:	f7ff ff76 	bl	80028fc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a16:	463b      	mov	r3, r7
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480a      	ldr	r0, [pc, #40]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002a1e:	f006 fb1b 	bl	8009058 <HAL_RTC_SetAlarm>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002a28:	f7ff ff68 	bl	80028fc <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_RTC_Init+0x140>)
 8002a32:	f006 fcdb 	bl	80093ec <HAL_RTCEx_SetTimeStamp>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002a3c:	f7ff ff5e 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3740      	adds	r7, #64	@ 0x40
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000614 	.word	0x20000614
 8002a4c:	40002800 	.word	0x40002800

08002a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0a4      	sub	sp, #144	@ 0x90
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	2284      	movs	r2, #132	@ 0x84
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00a fb9b 	bl	800d19c <memset>
  if(rtcHandle->Instance==RTC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa4 <HAL_RTC_MspInit+0x54>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d114      	bne.n	8002a9a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a70:	2320      	movs	r3, #32
 8002a72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 fd5a 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a8a:	f7ff ff37 	bl	80028fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_RTC_MspInit+0x58>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <HAL_RTC_MspInit+0x58>)
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a98:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3790      	adds	r7, #144	@ 0x90
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40002800 	.word	0x40002800
 8002aa8:	40023800 	.word	0x40023800

08002aac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <MX_SPI2_Init+0x78>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ab8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ac6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002aca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad2:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ada:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002ade:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002afa:	2207      	movs	r2, #7
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002b06:	2208      	movs	r2, #8
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_SPI2_Init+0x74>)
 8002b0c:	f006 fd67 	bl	80095de <HAL_SPI_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b16:	f7ff fef1 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000634 	.word	0x20000634
 8002b24:	40003800 	.word	0x40003800

08002b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a25      	ldr	r2, [pc, #148]	@ (8002bdc <HAL_SPI_MspInit+0xb4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d144      	bne.n	8002bd4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b4a:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	4a24      	ldr	r2, [pc, #144]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b56:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b62:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a1e      	ldr	r2, [pc, #120]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <HAL_SPI_MspInit+0xb8>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002b92:	2303      	movs	r3, #3
 8002b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	480d      	ldr	r0, [pc, #52]	@ (8002be4 <HAL_SPI_MspInit+0xbc>)
 8002bae:	f003 fb53 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002bb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4806      	ldr	r0, [pc, #24]	@ (8002be8 <HAL_SPI_MspInit+0xc0>)
 8002bd0:	f003 fb42 	bl	8006258 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3728      	adds	r7, #40	@ 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40003800 	.word	0x40003800
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40020400 	.word	0x40020400

08002bec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a51      	ldr	r2, [pc, #324]	@ (8002d3c <I2Cx_MspInit+0x150>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d14d      	bne.n	8002c98 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002bfc:	4b50      	ldr	r3, [pc, #320]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a4f      	ldr	r2, [pc, #316]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c08:	4b4d      	ldr	r3, [pc, #308]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c18:	2312      	movs	r3, #18
 8002c1a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c20:	2302      	movs	r3, #2
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002c24:	2304      	movs	r3, #4
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4845      	ldr	r0, [pc, #276]	@ (8002d44 <I2Cx_MspInit+0x158>)
 8002c30:	f003 fb12 	bl	8006258 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4840      	ldr	r0, [pc, #256]	@ (8002d44 <I2Cx_MspInit+0x158>)
 8002c42:	f003 fb09 	bl	8006258 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c46:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a37      	ldr	r2, [pc, #220]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c68:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c6a:	4b35      	ldr	r3, [pc, #212]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a34      	ldr	r2, [pc, #208]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c74:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	210f      	movs	r1, #15
 8002c7a:	2048      	movs	r0, #72	@ 0x48
 8002c7c:	f002 fc82 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002c80:	2048      	movs	r0, #72	@ 0x48
 8002c82:	f002 fc9b 	bl	80055bc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	210f      	movs	r1, #15
 8002c8a:	2049      	movs	r0, #73	@ 0x49
 8002c8c:	f002 fc7a 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002c90:	2049      	movs	r0, #73	@ 0x49
 8002c92:	f002 fc93 	bl	80055bc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002c96:	e04d      	b.n	8002d34 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	4a28      	ldr	r2, [pc, #160]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca4:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cb4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481e      	ldr	r0, [pc, #120]	@ (8002d48 <I2Cx_MspInit+0x15c>)
 8002cce:	f003 fac3 	bl	8006258 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002cd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	481a      	ldr	r0, [pc, #104]	@ (8002d48 <I2Cx_MspInit+0x15c>)
 8002ce0:	f003 faba 	bl	8006258 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002cea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002d02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d06:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <I2Cx_MspInit+0x154>)
 8002d0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d12:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	210f      	movs	r1, #15
 8002d18:	201f      	movs	r0, #31
 8002d1a:	f002 fc33 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002d1e:	201f      	movs	r0, #31
 8002d20:	f002 fc4c 	bl	80055bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	210f      	movs	r1, #15
 8002d28:	2020      	movs	r0, #32
 8002d2a:	f002 fc2b 	bl	8005584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002d2e:	2020      	movs	r0, #32
 8002d30:	f002 fc44 	bl	80055bc <HAL_NVIC_EnableIRQ>
}
 8002d34:	bf00      	nop
 8002d36:	3730      	adds	r7, #48	@ 0x30
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000698 	.word	0x20000698
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40021c00 	.word	0x40021c00
 8002d48:	40020400 	.word	0x40020400

08002d4c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f004 f84b 	bl	8006df0 <HAL_I2C_GetState>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d125      	bne.n	8002dac <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <I2Cx_Init+0x68>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <I2Cx_Init+0x6c>)
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e002      	b.n	8002d76 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <I2Cx_Init+0x70>)
 8002d74:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <I2Cx_Init+0x74>)
 8002d7a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff23 	bl	8002bec <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f003 fd28 	bl	80067fc <HAL_I2C_Init>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000698 	.word	0x20000698
 8002db8:	40005c00 	.word	0x40005c00
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	40912732 	.word	0x40912732

08002dc4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	72fb      	strb	r3, [r7, #11]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	b299      	uxth	r1, r3
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f003 fede 	bl	8006bbc <HAL_I2C_Mem_Read>
 8002e00:	4603      	mov	r3, r0
 8002e02:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f832 	bl	8002e78 <I2Cx_Error>
  }
  return status;    
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08a      	sub	sp, #40	@ 0x28
 8002e22:	af04      	add	r7, sp, #16
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	4608      	mov	r0, r1
 8002e28:	4611      	mov	r1, r2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	72fb      	strb	r3, [r7, #11]
 8002e30:	460b      	mov	r3, r1
 8002e32:	813b      	strh	r3, [r7, #8]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	88f8      	ldrh	r0, [r7, #6]
 8002e42:	893a      	ldrh	r2, [r7, #8]
 8002e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e48:	9302      	str	r3, [sp, #8]
 8002e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4603      	mov	r3, r0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f003 fd9d 	bl	8006994 <HAL_I2C_Mem_Write>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	4619      	mov	r1, r3
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f805 	bl	8002e78 <I2Cx_Error>
  }
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f003 fd55 	bl	8006934 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff5e 	bl	8002d4c <I2Cx_Init>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002e9c:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <TS_IO_Init+0x10>)
 8002e9e:	f7ff ff55 	bl	8002d4c <I2Cx_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000698 	.word	0x20000698

08002eac <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	71bb      	strb	r3, [r7, #6]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	79f9      	ldrb	r1, [r7, #7]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	1d7b      	adds	r3, r7, #5
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4803      	ldr	r0, [pc, #12]	@ (8002edc <TS_IO_Write+0x30>)
 8002ed0:	f7ff ffa5 	bl	8002e1e <I2Cx_WriteMultiple>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000698 	.word	0x20000698

08002ee0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	79f9      	ldrb	r1, [r7, #7]
 8002efa:	2301      	movs	r3, #1
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	f107 030f 	add.w	r3, r7, #15
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <TS_IO_Read+0x38>)
 8002f08:	f7ff ff5c 	bl	8002dc4 <I2Cx_ReadMultiple>

  return read_value;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000698 	.word	0x20000698

08002f1c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 ffb9 	bl	8004e9c <HAL_Delay>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002f38:	4b31      	ldr	r3, [pc, #196]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f3a:	2228      	movs	r2, #40	@ 0x28
 8002f3c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002f3e:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f40:	2209      	movs	r2, #9
 8002f42:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f44:	4b2e      	ldr	r3, [pc, #184]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f46:	2235      	movs	r2, #53	@ 0x35
 8002f48:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f4c:	220b      	movs	r2, #11
 8002f4e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f50:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f52:	f240 121b 	movw	r2, #283	@ 0x11b
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f5a:	f240 2215 	movw	r2, #533	@ 0x215
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002f60:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f62:	f240 121d 	movw	r2, #285	@ 0x11d
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f6a:	f240 2235 	movw	r2, #565	@ 0x235
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002f70:	2100      	movs	r1, #0
 8002f72:	4823      	ldr	r0, [pc, #140]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f74:	f000 fce8 	bl	8003948 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002f78:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f82:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002f86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fa0:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002fa6:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <BSP_LCD_Init+0xd0>)
 8002fbc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002fbe:	4810      	ldr	r0, [pc, #64]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fc0:	f004 fc1a 	bl	80077f8 <HAL_LTDC_GetState>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002fca:	2100      	movs	r1, #0
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fce:	f000 fbe1 	bl	8003794 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002fd2:	480b      	ldr	r0, [pc, #44]	@ (8003000 <BSP_LCD_Init+0xcc>)
 8002fd4:	f004 fa73 	bl	80074be <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fde:	480a      	ldr	r0, [pc, #40]	@ (8003008 <BSP_LCD_Init+0xd4>)
 8002fe0:	f003 fbf2 	bl	80067c8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	4808      	ldr	r0, [pc, #32]	@ (800300c <BSP_LCD_Init+0xd8>)
 8002fea:	f003 fbed 	bl	80067c8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002fee:	f000 fe0f 	bl	8003c10 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <BSP_LCD_Init+0xdc>)
 8002ff4:	f000 f8d8 	bl	80031a8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200006ec 	.word	0x200006ec
 8003004:	40016800 	.word	0x40016800
 8003008:	40022000 	.word	0x40022000
 800300c:	40022800 	.word	0x40022800
 8003010:	20000028 	.word	0x20000028

08003014 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <BSP_LCD_GetXSize+0x20>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <BSP_LCD_GetXSize+0x24>)
 800301e:	2134      	movs	r1, #52	@ 0x34
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3360      	adds	r3, #96	@ 0x60
 8003028:	681b      	ldr	r3, [r3, #0]
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	200007d4 	.word	0x200007d4
 8003038:	200006ec 	.word	0x200006ec

0800303c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <BSP_LCD_GetYSize+0x20>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a06      	ldr	r2, [pc, #24]	@ (8003060 <BSP_LCD_GetYSize+0x24>)
 8003046:	2134      	movs	r1, #52	@ 0x34
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3364      	adds	r3, #100	@ 0x64
 8003050:	681b      	ldr	r3, [r3, #0]
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	200007d4 	.word	0x200007d4
 8003060:	200006ec 	.word	0x200006ec

08003064 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003064:	b580      	push	{r7, lr}
 8003066:	b090      	sub	sp, #64	@ 0x40
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003074:	f7ff ffce 	bl	8003014 <BSP_LCD_GetXSize>
 8003078:	4603      	mov	r3, r0
 800307a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003080:	f7ff ffdc 	bl	800303c <BSP_LCD_GetYSize>
 8003084:	4603      	mov	r3, r0
 8003086:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003090:	23ff      	movs	r3, #255	@ 0xff
 8003092:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80030aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80030b0:	2307      	movs	r3, #7
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80030b4:	f7ff ffae 	bl	8003014 <BSP_LCD_GetXSize>
 80030b8:	4603      	mov	r3, r0
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80030bc:	f7ff ffbe 	bl	800303c <BSP_LCD_GetYSize>
 80030c0:	4603      	mov	r3, r0
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	4619      	mov	r1, r3
 80030cc:	4812      	ldr	r0, [pc, #72]	@ (8003118 <BSP_LCD_LayerDefaultInit+0xb4>)
 80030ce:	f004 fb55 	bl	800777c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030d2:	88fa      	ldrh	r2, [r7, #6]
 80030d4:	4911      	ldr	r1, [pc, #68]	@ (800311c <BSP_LCD_LayerDefaultInit+0xb8>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3304      	adds	r3, #4
 80030e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	490c      	ldr	r1, [pc, #48]	@ (800311c <BSP_LCD_LayerDefaultInit+0xb8>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3308      	adds	r3, #8
 80030f8:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <BSP_LCD_LayerDefaultInit+0xbc>)
 80030fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	4907      	ldr	r1, [pc, #28]	@ (800311c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800310e:	601a      	str	r2, [r3, #0]
}
 8003110:	bf00      	nop
 8003112:	3740      	adds	r7, #64	@ 0x40
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200006ec 	.word	0x200006ec
 800311c:	200007d8 	.word	0x200007d8
 8003120:	20000028 	.word	0x20000028

08003124 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <BSP_LCD_SelectLayer+0x1c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
} 
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	200007d4 	.word	0x200007d4

08003144 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800314c:	4b07      	ldr	r3, [pc, #28]	@ (800316c <BSP_LCD_SetTextColor+0x28>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4907      	ldr	r1, [pc, #28]	@ (8003170 <BSP_LCD_SetTextColor+0x2c>)
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	200007d4 	.word	0x200007d4
 8003170:	200007d8 	.word	0x200007d8

08003174 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <BSP_LCD_SetBackColor+0x2c>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4908      	ldr	r1, [pc, #32]	@ (80031a4 <BSP_LCD_SetBackColor+0x30>)
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3304      	adds	r3, #4
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	200007d4 	.word	0x200007d4
 80031a4:	200007d8 	.word	0x200007d8

080031a8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <BSP_LCD_SetFont+0x2c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <BSP_LCD_SetFont+0x30>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3308      	adds	r3, #8
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200007d4 	.word	0x200007d4
 80031d8:	200007d8 	.word	0x200007d8

080031dc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80031e0:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <BSP_LCD_GetFont+0x24>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4907      	ldr	r1, [pc, #28]	@ (8003204 <BSP_LCD_GetFont+0x28>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3308      	adds	r3, #8
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200007d4 	.word	0x200007d4
 8003204:	200007d8 	.word	0x200007d8

08003208 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <BSP_LCD_Clear+0x48>)
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <BSP_LCD_Clear+0x48>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0e      	ldr	r2, [pc, #56]	@ (8003254 <BSP_LCD_Clear+0x4c>)
 800321a:	2134      	movs	r1, #52	@ 0x34
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	335c      	adds	r3, #92	@ 0x5c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461e      	mov	r6, r3
 8003228:	f7ff fef4 	bl	8003014 <BSP_LCD_GetXSize>
 800322c:	4605      	mov	r5, r0
 800322e:	f7ff ff05 	bl	800303c <BSP_LCD_GetYSize>
 8003232:	4602      	mov	r2, r0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	462a      	mov	r2, r5
 8003240:	4631      	mov	r1, r6
 8003242:	4620      	mov	r0, r4
 8003244:	f000 fc54 	bl	8003af0 <LL_FillBuffer>
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003250:	200007d4 	.word	0x200007d4
 8003254:	200006ec 	.word	0x200006ec

08003258 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	460b      	mov	r3, r1
 8003264:	80bb      	strh	r3, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <BSP_LCD_DisplayChar+0x80>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	491b      	ldr	r1, [pc, #108]	@ (80032dc <BSP_LCD_DisplayChar+0x84>)
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3308      	adds	r3, #8
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <BSP_LCD_DisplayChar+0x80>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4c14      	ldr	r4, [pc, #80]	@ (80032dc <BSP_LCD_DisplayChar+0x84>)
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4423      	add	r3, r4
 8003296:	3308      	adds	r3, #8
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800329c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80032a0:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <BSP_LCD_DisplayChar+0x80>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <BSP_LCD_DisplayChar+0x84>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4423      	add	r3, r4
 80032b0:	3308      	adds	r3, #8
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	889b      	ldrh	r3, [r3, #4]
 80032b6:	3307      	adds	r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <BSP_LCD_DisplayChar+0x66>
 80032bc:	3307      	adds	r3, #7
 80032be:	10db      	asrs	r3, r3, #3
 80032c0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032c4:	18ca      	adds	r2, r1, r3
 80032c6:	88b9      	ldrh	r1, [r7, #4]
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fb58 	bl	8003980 <DrawChar>
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	200007d4 	.word	0x200007d4
 80032dc:	200007d8 	.word	0x200007d8

080032e0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60ba      	str	r2, [r7, #8]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	460b      	mov	r3, r1
 80032f0:	81bb      	strh	r3, [r7, #12]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80032f6:	2301      	movs	r3, #1
 80032f8:	83fb      	strh	r3, [r7, #30]
 80032fa:	2300      	movs	r3, #0
 80032fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800330a:	e002      	b.n	8003312 <BSP_LCD_DisplayStringAt+0x32>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3301      	adds	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	617a      	str	r2, [r7, #20]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f6      	bne.n	800330c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800331e:	f7ff fe79 	bl	8003014 <BSP_LCD_GetXSize>
 8003322:	4601      	mov	r1, r0
 8003324:	4b50      	ldr	r3, [pc, #320]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4850      	ldr	r0, [pc, #320]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4403      	add	r3, r0
 8003334:	3308      	adds	r3, #8
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	889b      	ldrh	r3, [r3, #4]
 800333a:	fbb1 f3f3 	udiv	r3, r1, r3
 800333e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d01c      	beq.n	8003380 <BSP_LCD_DisplayStringAt+0xa0>
 8003346:	2b03      	cmp	r3, #3
 8003348:	dc33      	bgt.n	80033b2 <BSP_LCD_DisplayStringAt+0xd2>
 800334a:	2b01      	cmp	r3, #1
 800334c:	d002      	beq.n	8003354 <BSP_LCD_DisplayStringAt+0x74>
 800334e:	2b02      	cmp	r3, #2
 8003350:	d019      	beq.n	8003386 <BSP_LCD_DisplayStringAt+0xa6>
 8003352:	e02e      	b.n	80033b2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	1ad1      	subs	r1, r2, r3
 800335a:	4b43      	ldr	r3, [pc, #268]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4843      	ldr	r0, [pc, #268]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4403      	add	r3, r0
 800336a:	3308      	adds	r3, #8
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	889b      	ldrh	r3, [r3, #4]
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	4413      	add	r3, r2
 800337c:	83fb      	strh	r3, [r7, #30]
      break;
 800337e:	e01b      	b.n	80033b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	83fb      	strh	r3, [r7, #30]
      break;
 8003384:	e018      	b.n	80033b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	b299      	uxth	r1, r3
 800338e:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4836      	ldr	r0, [pc, #216]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3308      	adds	r3, #8
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	889b      	ldrh	r3, [r3, #4]
 80033a4:	fb11 f303 	smulbb	r3, r1, r3
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	83fb      	strh	r3, [r7, #30]
      break;
 80033b0:	e002      	b.n	80033b8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80033b2:	89fb      	ldrh	r3, [r7, #14]
 80033b4:	83fb      	strh	r3, [r7, #30]
      break;
 80033b6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80033b8:	8bfb      	ldrh	r3, [r7, #30]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <BSP_LCD_DisplayStringAt+0xe6>
 80033be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da1d      	bge.n	8003402 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033ca:	e01a      	b.n	8003402 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	89b9      	ldrh	r1, [r7, #12]
 80033d2:	8bfb      	ldrh	r3, [r7, #30]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff3f 	bl	8003258 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80033da:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4923      	ldr	r1, [pc, #140]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3308      	adds	r3, #8
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	889a      	ldrh	r2, [r3, #4]
 80033f0:	8bfb      	ldrh	r3, [r7, #30]
 80033f2:	4413      	add	r3, r2
 80033f4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
    i++;
 80033fc:	8bbb      	ldrh	r3, [r7, #28]
 80033fe:	3301      	adds	r3, #1
 8003400:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2dc      	uxtb	r4, r3
 8003410:	f7ff fe00 	bl	8003014 <BSP_LCD_GetXSize>
 8003414:	8bb9      	ldrh	r1, [r7, #28]
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4d14      	ldr	r5, [pc, #80]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	442b      	add	r3, r5
 8003426:	3308      	adds	r3, #8
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	889b      	ldrh	r3, [r3, #4]
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ac3      	subs	r3, r0, r3
 8003432:	b299      	uxth	r1, r3
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <BSP_LCD_DisplayStringAt+0x188>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <BSP_LCD_DisplayStringAt+0x18c>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4403      	add	r3, r0
 8003444:	3308      	adds	r3, #8
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	889b      	ldrh	r3, [r3, #4]
 800344a:	4299      	cmp	r1, r3
 800344c:	bf2c      	ite	cs
 800344e:	2301      	movcs	r3, #1
 8003450:	2300      	movcc	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4023      	ands	r3, r4
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1b7      	bne.n	80033cc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	bf00      	nop
 8003468:	200007d4 	.word	0x200007d4
 800346c:	200007d8 	.word	0x200007d8

08003470 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	603a      	str	r2, [r7, #0]
 800347a:	80fb      	strh	r3, [r7, #6]
 800347c:	460b      	mov	r3, r1
 800347e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003480:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <BSP_LCD_DrawPixel+0x88>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <BSP_LCD_DrawPixel+0x8c>)
 8003486:	2134      	movs	r1, #52	@ 0x34
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3348      	adds	r3, #72	@ 0x48
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d116      	bne.n	80034c4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <BSP_LCD_DrawPixel+0x88>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <BSP_LCD_DrawPixel+0x8c>)
 800349c:	2134      	movs	r1, #52	@ 0x34
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	335c      	adds	r3, #92	@ 0x5c
 80034a6:	681c      	ldr	r4, [r3, #0]
 80034a8:	88bd      	ldrh	r5, [r7, #4]
 80034aa:	f7ff fdb3 	bl	8003014 <BSP_LCD_GetXSize>
 80034ae:	4603      	mov	r3, r0
 80034b0:	fb03 f205 	mul.w	r2, r3, r5
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	4413      	add	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4423      	add	r3, r4
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	b292      	uxth	r2, r2
 80034c0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80034c2:	e015      	b.n	80034f0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <BSP_LCD_DrawPixel+0x88>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <BSP_LCD_DrawPixel+0x8c>)
 80034ca:	2134      	movs	r1, #52	@ 0x34
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	@ 0x5c
 80034d4:	681c      	ldr	r4, [r3, #0]
 80034d6:	88bd      	ldrh	r5, [r7, #4]
 80034d8:	f7ff fd9c 	bl	8003014 <BSP_LCD_GetXSize>
 80034dc:	4603      	mov	r3, r0
 80034de:	fb03 f205 	mul.w	r2, r3, r5
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4423      	add	r3, r4
 80034ea:	461a      	mov	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}
 80034f8:	200007d4 	.word	0x200007d4
 80034fc:	200006ec 	.word	0x200006ec

08003500 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b08b      	sub	sp, #44	@ 0x2c
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	330a      	adds	r3, #10
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	330b      	adds	r3, #11
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	330c      	adds	r3, #12
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	441a      	add	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	330d      	adds	r3, #13
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	4413      	add	r3, r2
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3312      	adds	r3, #18
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3313      	adds	r3, #19
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	441a      	add	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3314      	adds	r3, #20
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	441a      	add	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3315      	adds	r3, #21
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	4413      	add	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3316      	adds	r3, #22
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3317      	adds	r3, #23
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3318      	adds	r3, #24
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	441a      	add	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3319      	adds	r3, #25
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	4413      	add	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	331c      	adds	r3, #28
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	331d      	adds	r3, #29
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	4413      	add	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <BSP_LCD_DrawBitmap+0x15c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003660 <BSP_LCD_DrawBitmap+0x160>)
 80035b2:	2134      	movs	r1, #52	@ 0x34
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	335c      	adds	r3, #92	@ 0x5c
 80035bc:	681c      	ldr	r4, [r3, #0]
 80035be:	f7ff fd29 	bl	8003014 <BSP_LCD_GetXSize>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	fb03 f202 	mul.w	r2, r3, r2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4423      	add	r3, r4
 80035d2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3b20      	subs	r3, #32
 80035d8:	2b07      	cmp	r3, #7
 80035da:	d802      	bhi.n	80035e2 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e008      	b.n	80035f4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3b10      	subs	r3, #16
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d802      	bhi.n	80035f0 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80035ea:	2302      	movs	r3, #2
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e001      	b.n	80035f4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	08d2      	lsrs	r2, r2, #3
 8003602:	fb03 f202 	mul.w	r2, r3, r2
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	4413      	add	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	e018      	b.n	8003648 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fab3 	bl	8003b88 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003622:	f7ff fcf7 	bl	8003014 <BSP_LCD_GetXSize>
 8003626:	4603      	mov	r3, r0
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	4413      	add	r3, r2
 800362e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	425b      	negs	r3, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	3301      	adds	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
 8003648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d3e2      	bcc.n	8003616 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	372c      	adds	r7, #44	@ 0x2c
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	200007d4 	.word	0x200007d4
 8003660:	200006ec 	.word	0x200006ec

08003664 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af02      	add	r7, sp, #8
 800366c:	4604      	mov	r4, r0
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	461a      	mov	r2, r3
 8003674:	4623      	mov	r3, r4
 8003676:	80fb      	strh	r3, [r7, #6]
 8003678:	4603      	mov	r3, r0
 800367a:	80bb      	strh	r3, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003688:	4b30      	ldr	r3, [pc, #192]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4930      	ldr	r1, [pc, #192]	@ (8003750 <BSP_LCD_FillRect+0xec>)
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fd52 	bl	8003144 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036a0:	4b2a      	ldr	r3, [pc, #168]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <BSP_LCD_FillRect+0xf0>)
 80036a6:	2134      	movs	r1, #52	@ 0x34
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3348      	adds	r3, #72	@ 0x48
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d114      	bne.n	80036e0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036b6:	4b25      	ldr	r3, [pc, #148]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <BSP_LCD_FillRect+0xf0>)
 80036bc:	2134      	movs	r1, #52	@ 0x34
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	335c      	adds	r3, #92	@ 0x5c
 80036c6:	681c      	ldr	r4, [r3, #0]
 80036c8:	f7ff fca4 	bl	8003014 <BSP_LCD_GetXSize>
 80036cc:	4602      	mov	r2, r0
 80036ce:	88bb      	ldrh	r3, [r7, #4]
 80036d0:	fb03 f202 	mul.w	r2, r3, r2
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4423      	add	r3, r4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e013      	b.n	8003708 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036e0:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <BSP_LCD_FillRect+0xf0>)
 80036e6:	2134      	movs	r1, #52	@ 0x34
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	335c      	adds	r3, #92	@ 0x5c
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	f7ff fc8f 	bl	8003014 <BSP_LCD_GetXSize>
 80036f6:	4602      	mov	r2, r0
 80036f8:	88bb      	ldrh	r3, [r7, #4]
 80036fa:	fb03 f202 	mul.w	r2, r3, r2
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4423      	add	r3, r4
 8003706:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 800370a:	681c      	ldr	r4, [r3, #0]
 800370c:	68fd      	ldr	r5, [r7, #12]
 800370e:	887e      	ldrh	r6, [r7, #2]
 8003710:	f8b7 8000 	ldrh.w	r8, [r7]
 8003714:	f7ff fc7e 	bl	8003014 <BSP_LCD_GetXSize>
 8003718:	4602      	mov	r2, r0
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	1ad1      	subs	r1, r2, r3
 800371e:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <BSP_LCD_FillRect+0xe8>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	480b      	ldr	r0, [pc, #44]	@ (8003750 <BSP_LCD_FillRect+0xec>)
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	9100      	str	r1, [sp, #0]
 8003734:	4643      	mov	r3, r8
 8003736:	4632      	mov	r2, r6
 8003738:	4629      	mov	r1, r5
 800373a:	4620      	mov	r0, r4
 800373c:	f000 f9d8 	bl	8003af0 <LL_FillBuffer>
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374a:	bf00      	nop
 800374c:	200007d4 	.word	0x200007d4
 8003750:	200007d8 	.word	0x200007d8
 8003754:	200006ec 	.word	0x200006ec

08003758 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <BSP_LCD_DisplayOn+0x30>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <BSP_LCD_DisplayOn+0x30>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800376c:	2201      	movs	r2, #1
 800376e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003772:	4806      	ldr	r0, [pc, #24]	@ (800378c <BSP_LCD_DisplayOn+0x34>)
 8003774:	f003 f828 	bl	80067c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003778:	2201      	movs	r2, #1
 800377a:	2108      	movs	r1, #8
 800377c:	4804      	ldr	r0, [pc, #16]	@ (8003790 <BSP_LCD_DisplayOn+0x38>)
 800377e:	f003 f823 	bl	80067c8 <HAL_GPIO_WritePin>
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200006ec 	.word	0x200006ec
 800378c:	40022000 	.word	0x40022000
 8003790:	40022800 	.word	0x40022800

08003794 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	@ 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800379e:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037aa:	4b61      	ldr	r3, [pc, #388]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80037b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ce:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037d4:	f043 0310 	orr.w	r3, r3, #16
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037e6:	4b52      	ldr	r3, [pc, #328]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	4a51      	ldr	r2, [pc, #324]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4a4b      	ldr	r2, [pc, #300]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6313      	str	r3, [r2, #48]	@ 0x30
 800380a:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003816:	4b46      	ldr	r3, [pc, #280]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	4a45      	ldr	r2, [pc, #276]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 800381c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003820:	6313      	str	r3, [r2, #48]	@ 0x30
 8003822:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800382e:	4b40      	ldr	r3, [pc, #256]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	4a3f      	ldr	r2, [pc, #252]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003834:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003838:	6313      	str	r3, [r2, #48]	@ 0x30
 800383a:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003846:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	4a39      	ldr	r2, [pc, #228]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	6313      	str	r3, [r2, #48]	@ 0x30
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	4a33      	ldr	r2, [pc, #204]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 8003864:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003868:	6313      	str	r3, [r2, #48]	@ 0x30
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <BSP_LCD_MspInit+0x19c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003876:	2310      	movs	r3, #16
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003882:	2302      	movs	r3, #2
 8003884:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003886:	230e      	movs	r3, #14
 8003888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800388a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800388e:	4619      	mov	r1, r3
 8003890:	4828      	ldr	r0, [pc, #160]	@ (8003934 <BSP_LCD_MspInit+0x1a0>)
 8003892:	f002 fce1 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80038a0:	2309      	movs	r3, #9
 80038a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038a8:	4619      	mov	r1, r3
 80038aa:	4823      	ldr	r0, [pc, #140]	@ (8003938 <BSP_LCD_MspInit+0x1a4>)
 80038ac:	f002 fcd4 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80038b0:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038ba:	230e      	movs	r3, #14
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80038be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	481d      	ldr	r0, [pc, #116]	@ (800393c <BSP_LCD_MspInit+0x1a8>)
 80038c6:	f002 fcc7 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80038ca:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038d4:	230e      	movs	r3, #14
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80038d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038dc:	4619      	mov	r1, r3
 80038de:	4818      	ldr	r0, [pc, #96]	@ (8003940 <BSP_LCD_MspInit+0x1ac>)
 80038e0:	f002 fcba 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80038e4:	23f7      	movs	r3, #247	@ 0xf7
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038ec:	230e      	movs	r3, #14
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80038f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038f4:	4619      	mov	r1, r3
 80038f6:	4813      	ldr	r0, [pc, #76]	@ (8003944 <BSP_LCD_MspInit+0x1b0>)
 80038f8:	f002 fcae 	bl	8006258 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80038fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003902:	2301      	movs	r3, #1
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003906:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	480b      	ldr	r0, [pc, #44]	@ (800393c <BSP_LCD_MspInit+0x1a8>)
 800390e:	f002 fca3 	bl	8006258 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003912:	2308      	movs	r3, #8
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003916:	2301      	movs	r3, #1
 8003918:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800391a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800391e:	4619      	mov	r1, r3
 8003920:	4808      	ldr	r0, [pc, #32]	@ (8003944 <BSP_LCD_MspInit+0x1b0>)
 8003922:	f002 fc99 	bl	8006258 <HAL_GPIO_Init>
}
 8003926:	bf00      	nop
 8003928:	3740      	adds	r7, #64	@ 0x40
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	40021000 	.word	0x40021000
 8003938:	40021800 	.word	0x40021800
 800393c:	40022000 	.word	0x40022000
 8003940:	40022400 	.word	0x40022400
 8003944:	40022800 	.word	0x40022800

08003948 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003952:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <BSP_LCD_ClockConfig+0x34>)
 8003954:	2208      	movs	r2, #8
 8003956:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <BSP_LCD_ClockConfig+0x34>)
 800395a:	22c0      	movs	r2, #192	@ 0xc0
 800395c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <BSP_LCD_ClockConfig+0x34>)
 8003960:	2205      	movs	r2, #5
 8003962:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <BSP_LCD_ClockConfig+0x34>)
 8003966:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800396a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800396c:	4803      	ldr	r0, [pc, #12]	@ (800397c <BSP_LCD_ClockConfig+0x34>)
 800396e:	f004 fde3 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200007f0 	.word	0x200007f0

08003980 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	603a      	str	r2, [r7, #0]
 800398a:	80fb      	strh	r3, [r7, #6]
 800398c:	460b      	mov	r3, r1
 800398e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003998:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <DrawChar+0x168>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4953      	ldr	r1, [pc, #332]	@ (8003aec <DrawChar+0x16c>)
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3308      	adds	r3, #8
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	88db      	ldrh	r3, [r3, #6]
 80039ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80039b0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae8 <DrawChar+0x168>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	494d      	ldr	r1, [pc, #308]	@ (8003aec <DrawChar+0x16c>)
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3308      	adds	r3, #8
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80039c8:	8a3b      	ldrh	r3, [r7, #16]
 80039ca:	3307      	adds	r3, #7
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da00      	bge.n	80039d2 <DrawChar+0x52>
 80039d0:	3307      	adds	r3, #7
 80039d2:	10db      	asrs	r3, r3, #3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8a3b      	ldrh	r3, [r7, #16]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e076      	b.n	8003ad6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80039e8:	8a3b      	ldrh	r3, [r7, #16]
 80039ea:	3307      	adds	r3, #7
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da00      	bge.n	80039f2 <DrawChar+0x72>
 80039f0:	3307      	adds	r3, #7
 80039f2:	10db      	asrs	r3, r3, #3
 80039f4:	461a      	mov	r2, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a02:	8a3b      	ldrh	r3, [r7, #16]
 8003a04:	3307      	adds	r3, #7
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da00      	bge.n	8003a0c <DrawChar+0x8c>
 8003a0a:	3307      	adds	r3, #7
 8003a0c:	10db      	asrs	r3, r3, #3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d002      	beq.n	8003a18 <DrawChar+0x98>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d004      	beq.n	8003a20 <DrawChar+0xa0>
 8003a16:	e00c      	b.n	8003a32 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]
      break;
 8003a1e:	e016      	b.n	8003a4e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	3201      	adds	r2, #1
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
      break;
 8003a30:	e00d      	b.n	8003a4e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	041a      	lsls	r2, r3, #16
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	4313      	orrs	r3, r2
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	3202      	adds	r2, #2
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
      break;
 8003a4c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e036      	b.n	8003ac2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a54:	8a3a      	ldrh	r2, [r7, #16]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad2      	subs	r2, r2, r3
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	2201      	movs	r2, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d012      	beq.n	8003a96 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	4413      	add	r3, r2
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <DrawChar+0x168>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	491b      	ldr	r1, [pc, #108]	@ (8003aec <DrawChar+0x16c>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	88bb      	ldrh	r3, [r7, #4]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7ff fcee 	bl	8003470 <BSP_LCD_DrawPixel>
 8003a94:	e012      	b.n	8003abc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b298      	uxth	r0, r3
 8003aa0:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <DrawChar+0x168>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4911      	ldr	r1, [pc, #68]	@ (8003aec <DrawChar+0x16c>)
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	88bb      	ldrh	r3, [r7, #4]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7ff fcda 	bl	8003470 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	8a3b      	ldrh	r3, [r7, #16]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d3c4      	bcc.n	8003a54 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003aca:	88bb      	ldrh	r3, [r7, #4]
 8003acc:	3301      	adds	r3, #1
 8003ace:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	8a7b      	ldrh	r3, [r7, #18]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d384      	bcc.n	80039e8 <DrawChar+0x68>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200007d4 	.word	0x200007d4
 8003aec:	200007d8 	.word	0x200007d8

08003af0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b04:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b06:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <LL_FillBuffer+0x8c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b80 <LL_FillBuffer+0x90>)
 8003b0c:	2134      	movs	r1, #52	@ 0x34
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3348      	adds	r3, #72	@ 0x48
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d103      	bne.n	8003b24 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b1e:	2202      	movs	r2, #2
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	e002      	b.n	8003b2a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b24:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003b2a:	4a13      	ldr	r2, [pc, #76]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b32:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <LL_FillBuffer+0x94>)
 8003b34:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003b36:	4810      	ldr	r0, [pc, #64]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b38:	f001 fff2 	bl	8005b20 <HAL_DMA2D_Init>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d115      	bne.n	8003b6e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	480c      	ldr	r0, [pc, #48]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b46:	f002 fa59 	bl	8005ffc <HAL_DMA2D_ConfigLayer>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10e      	bne.n	8003b6e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	4807      	ldr	r0, [pc, #28]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b5c:	f002 f82a 	bl	8005bb4 <HAL_DMA2D_Start>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003b66:	210a      	movs	r1, #10
 8003b68:	4803      	ldr	r0, [pc, #12]	@ (8003b78 <LL_FillBuffer+0x88>)
 8003b6a:	f002 f84e 	bl	8005c0a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000794 	.word	0x20000794
 8003b7c:	200007d4 	.word	0x200007d4
 8003b80:	200006ec 	.word	0x200006ec
 8003b84:	4002b000 	.word	0x4002b000

08003b88 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003b98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b9c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003ba4:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003baa:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bb2:	22ff      	movs	r2, #255	@ 0xff
 8003bb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003bb6:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bc4:	4a11      	ldr	r2, [pc, #68]	@ (8003c0c <LL_ConvertLineToARGB8888+0x84>)
 8003bc6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003bc8:	480f      	ldr	r0, [pc, #60]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bca:	f001 ffa9 	bl	8005b20 <HAL_DMA2D_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d115      	bne.n	8003c00 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	480c      	ldr	r0, [pc, #48]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bd8:	f002 fa10 	bl	8005ffc <HAL_DMA2D_ConfigLayer>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10e      	bne.n	8003c00 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	2301      	movs	r3, #1
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4806      	ldr	r0, [pc, #24]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bee:	f001 ffe1 	bl	8005bb4 <HAL_DMA2D_Start>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003bf8:	210a      	movs	r1, #10
 8003bfa:	4803      	ldr	r0, [pc, #12]	@ (8003c08 <LL_ConvertLineToARGB8888+0x80>)
 8003bfc:	f002 f805 	bl	8005c0a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000794 	.word	0x20000794
 8003c0c:	4002b000 	.word	0x4002b000

08003c10 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003c14:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c16:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc0 <BSP_SDRAM_Init+0xb0>)
 8003c18:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003c20:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c22:	2207      	movs	r2, #7
 8003c24:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003c26:	4b27      	ldr	r3, [pc, #156]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c28:	2204      	movs	r2, #4
 8003c2a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003c2c:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c2e:	2207      	movs	r2, #7
 8003c30:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003c32:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c34:	2202      	movs	r2, #2
 8003c36:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003c38:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003c3e:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003c44:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c52:	2204      	movs	r2, #4
 8003c54:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003c56:	4b19      	ldr	r3, [pc, #100]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c58:	2210      	movs	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003c5c:	4b17      	ldr	r3, [pc, #92]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c68:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003c6a:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003c70:	4b12      	ldr	r3, [pc, #72]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c76:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003c78:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003c86:	2100      	movs	r1, #0
 8003c88:	480c      	ldr	r0, [pc, #48]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c8a:	f000 f87f 	bl	8003d8c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003c8e:	490d      	ldr	r1, [pc, #52]	@ (8003cc4 <BSP_SDRAM_Init+0xb4>)
 8003c90:	480a      	ldr	r0, [pc, #40]	@ (8003cbc <BSP_SDRAM_Init+0xac>)
 8003c92:	f005 fc13 	bl	80094bc <HAL_SDRAM_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <BSP_SDRAM_Init+0xb8>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <BSP_SDRAM_Init+0xb8>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003caa:	f240 6003 	movw	r0, #1539	@ 0x603
 8003cae:	f000 f80d 	bl	8003ccc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003cb2:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <BSP_SDRAM_Init+0xb8>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000874 	.word	0x20000874
 8003cc0:	a0000140 	.word	0xa0000140
 8003cc4:	200008a8 	.word	0x200008a8
 8003cc8:	20000038 	.word	0x20000038

08003ccc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ce4:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cea:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cf4:	4923      	ldr	r1, [pc, #140]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf6:	4824      	ldr	r0, [pc, #144]	@ (8003d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cf8:	f005 fc14 	bl	8009524 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f001 f8cd 	bl	8004e9c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d1e:	4919      	ldr	r1, [pc, #100]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d20:	4819      	ldr	r0, [pc, #100]	@ (8003d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d22:	f005 fbff 	bl	8009524 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003d26:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d28:	2203      	movs	r2, #3
 8003d2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d2e:	2210      	movs	r2, #16
 8003d30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003d32:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d34:	2208      	movs	r2, #8
 8003d36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d38:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d42:	4910      	ldr	r1, [pc, #64]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d44:	4810      	ldr	r0, [pc, #64]	@ (8003d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d46:	f005 fbed 	bl	8009524 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d4a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8003d4e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d52:	2204      	movs	r2, #4
 8003d54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d58:	2210      	movs	r2, #16
 8003d5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a07      	ldr	r2, [pc, #28]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d66:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d6c:	4905      	ldr	r1, [pc, #20]	@ (8003d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d6e:	4806      	ldr	r0, [pc, #24]	@ (8003d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d70:	f005 fbd8 	bl	8009524 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4804      	ldr	r0, [pc, #16]	@ (8003d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d78:	f005 fc09 	bl	800958e <HAL_SDRAM_ProgramRefreshRate>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200008c4 	.word	0x200008c4
 8003d88:	20000874 	.word	0x20000874

08003d8c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	@ 0x40
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d96:	4b70      	ldr	r3, [pc, #448]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6393      	str	r3, [r2, #56]	@ 0x38
 8003da2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003dae:	4b6a      	ldr	r3, [pc, #424]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a69      	ldr	r2, [pc, #420]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003db4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b67      	ldr	r3, [pc, #412]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	4b64      	ldr	r3, [pc, #400]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	4a63      	ldr	r2, [pc, #396]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd2:	4b61      	ldr	r3, [pc, #388]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dde:	4b5e      	ldr	r3, [pc, #376]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dea:	4b5b      	ldr	r3, [pc, #364]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003df6:	4b58      	ldr	r3, [pc, #352]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	4a57      	ldr	r2, [pc, #348]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003dfc:	f043 0310 	orr.w	r3, r3, #16
 8003e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e02:	4b55      	ldr	r3, [pc, #340]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e0e:	4b52      	ldr	r3, [pc, #328]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4a51      	ldr	r2, [pc, #324]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e14:	f043 0320 	orr.w	r3, r3, #32
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e26:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	4a4b      	ldr	r2, [pc, #300]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e32:	4b49      	ldr	r3, [pc, #292]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e3e:	4b46      	ldr	r3, [pc, #280]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	4a45      	ldr	r2, [pc, #276]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4a:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <BSP_SDRAM_MspInit+0x1cc>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e56:	2302      	movs	r3, #2
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003e62:	230c      	movs	r3, #12
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003e66:	2308      	movs	r3, #8
 8003e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	483a      	ldr	r0, [pc, #232]	@ (8003f5c <BSP_SDRAM_MspInit+0x1d0>)
 8003e72:	f002 f9f1 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003e76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e80:	4619      	mov	r1, r3
 8003e82:	4837      	ldr	r0, [pc, #220]	@ (8003f60 <BSP_SDRAM_MspInit+0x1d4>)
 8003e84:	f002 f9e8 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003e88:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e92:	4619      	mov	r1, r3
 8003e94:	4833      	ldr	r0, [pc, #204]	@ (8003f64 <BSP_SDRAM_MspInit+0x1d8>)
 8003e96:	f002 f9df 	bl	8006258 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e9a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4830      	ldr	r0, [pc, #192]	@ (8003f68 <BSP_SDRAM_MspInit+0x1dc>)
 8003ea8:	f002 f9d6 	bl	8006258 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003eac:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	482c      	ldr	r0, [pc, #176]	@ (8003f6c <BSP_SDRAM_MspInit+0x1e0>)
 8003eba:	f002 f9cd 	bl	8006258 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003ebe:	2328      	movs	r3, #40	@ 0x28
 8003ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4829      	ldr	r0, [pc, #164]	@ (8003f70 <BSP_SDRAM_MspInit+0x1e4>)
 8003eca:	f002 f9c5 	bl	8006258 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003ece:	4b29      	ldr	r3, [pc, #164]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003ed4:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003ed6:	2280      	movs	r2, #128	@ 0x80
 8003ed8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003eda:	4b26      	ldr	r3, [pc, #152]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ee8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ef0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003ef4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ef8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003f00:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f06:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003f08:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003f0e:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f10:	2203      	movs	r2, #3
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003f14:	4b17      	ldr	r3, [pc, #92]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003f1a:	4b16      	ldr	r3, [pc, #88]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <BSP_SDRAM_MspInit+0x1ec>)
 8003f24:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a12      	ldr	r2, [pc, #72]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f2c:	4a11      	ldr	r2, [pc, #68]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003f32:	4810      	ldr	r0, [pc, #64]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f34:	f001 fce4 	bl	8005900 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003f38:	480e      	ldr	r0, [pc, #56]	@ (8003f74 <BSP_SDRAM_MspInit+0x1e8>)
 8003f3a:	f001 fc33 	bl	80057a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	210f      	movs	r1, #15
 8003f42:	2038      	movs	r0, #56	@ 0x38
 8003f44:	f001 fb1e 	bl	8005584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003f48:	2038      	movs	r0, #56	@ 0x38
 8003f4a:	f001 fb37 	bl	80055bc <HAL_NVIC_EnableIRQ>
}
 8003f4e:	bf00      	nop
 8003f50:	3740      	adds	r7, #64	@ 0x40
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	40020c00 	.word	0x40020c00
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40021400 	.word	0x40021400
 8003f6c:	40021800 	.word	0x40021800
 8003f70:	40021c00 	.word	0x40021c00
 8003f74:	200008d4 	.word	0x200008d4
 8003f78:	40026410 	.word	0x40026410

08003f7c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	460a      	mov	r2, r1
 8003f86:	80fb      	strh	r3, [r7, #6]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <BSP_TS_Init+0x68>)
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003f96:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <BSP_TS_Init+0x6c>)
 8003f98:	88bb      	ldrh	r3, [r7, #4]
 8003f9a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <BSP_TS_Init+0x70>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2070      	movs	r0, #112	@ 0x70
 8003fa2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <BSP_TS_Init+0x70>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2070      	movs	r0, #112	@ 0x70
 8003faa:	4798      	blx	r3
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b51      	cmp	r3, #81	@ 0x51
 8003fb0:	d110      	bne.n	8003fd4 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <BSP_TS_Init+0x74>)
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <BSP_TS_Init+0x70>)
 8003fb6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <BSP_TS_Init+0x78>)
 8003fba:	2270      	movs	r2, #112	@ 0x70
 8003fbc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <BSP_TS_Init+0x7c>)
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <BSP_TS_Init+0x74>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <BSP_TS_Init+0x78>)
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4798      	blx	r3
 8003fd2:	e001      	b.n	8003fd8 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000938 	.word	0x20000938
 8003fe8:	2000093a 	.word	0x2000093a
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	20000934 	.word	0x20000934
 8003ff4:	2000093d 	.word	0x2000093d
 8003ff8:	2000093c 	.word	0x2000093c

08003ffc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b097      	sub	sp, #92	@ 0x5c
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004016:	4bb8      	ldr	r3, [pc, #736]	@ (80042f8 <BSP_TS_GetState+0x2fc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	4ab7      	ldr	r2, [pc, #732]	@ (80042fc <BSP_TS_GetState+0x300>)
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8198 	beq.w	8004366 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004036:	2300      	movs	r3, #0
 8004038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800403a:	e187      	b.n	800434c <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800403c:	4bae      	ldr	r3, [pc, #696]	@ (80042f8 <BSP_TS_GetState+0x2fc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4aae      	ldr	r2, [pc, #696]	@ (80042fc <BSP_TS_GetState+0x300>)
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	4614      	mov	r4, r2
 8004048:	f107 0120 	add.w	r1, r7, #32
 800404c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	1888      	adds	r0, r1, r2
 8004052:	f107 0114 	add.w	r1, r7, #20
 8004056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004058:	0052      	lsls	r2, r2, #1
 800405a:	440a      	add	r2, r1
 800405c:	4601      	mov	r1, r0
 800405e:	4620      	mov	r0, r4
 8004060:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004062:	4ba7      	ldr	r3, [pc, #668]	@ (8004300 <BSP_TS_GetState+0x304>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d117      	bne.n	800409a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800406a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	3350      	adds	r3, #80	@ 0x50
 8004070:	443b      	add	r3, r7
 8004072:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	3350      	adds	r3, #80	@ 0x50
 800407c:	443b      	add	r3, r7
 800407e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	3350      	adds	r3, #80	@ 0x50
 8004088:	443b      	add	r3, r7
 800408a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800408e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	3350      	adds	r3, #80	@ 0x50
 8004094:	443b      	add	r3, r7
 8004096:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800409a:	4b99      	ldr	r3, [pc, #612]	@ (8004300 <BSP_TS_GetState+0x304>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80040a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	3350      	adds	r3, #80	@ 0x50
 80040ac:	443b      	add	r3, r7
 80040ae:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80040b2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	3350      	adds	r3, #80	@ 0x50
 80040be:	443b      	add	r3, r7
 80040c0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80040c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004300 <BSP_TS_GetState+0x304>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00e      	beq.n	80040ee <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80040d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	3350      	adds	r3, #80	@ 0x50
 80040d6:	443b      	add	r3, r7
 80040d8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80040dc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	3350      	adds	r3, #80	@ 0x50
 80040e8:	443b      	add	r3, r7
 80040ea:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80040ee:	4b84      	ldr	r3, [pc, #528]	@ (8004300 <BSP_TS_GetState+0x304>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80040fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	3350      	adds	r3, #80	@ 0x50
 8004100:	443b      	add	r3, r7
 8004102:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	3350      	adds	r3, #80	@ 0x50
 800410c:	443b      	add	r3, r7
 800410e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	3350      	adds	r3, #80	@ 0x50
 8004118:	443b      	add	r3, r7
 800411a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	3350      	adds	r3, #80	@ 0x50
 8004124:	443b      	add	r3, r7
 8004126:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800412a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	3350      	adds	r3, #80	@ 0x50
 8004130:	443b      	add	r3, r7
 8004132:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004136:	4619      	mov	r1, r3
 8004138:	4a72      	ldr	r2, [pc, #456]	@ (8004304 <BSP_TS_GetState+0x308>)
 800413a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004140:	4299      	cmp	r1, r3
 8004142:	d90d      	bls.n	8004160 <BSP_TS_GetState+0x164>
 8004144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	3350      	adds	r3, #80	@ 0x50
 800414a:	443b      	add	r3, r7
 800414c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004150:	496c      	ldr	r1, [pc, #432]	@ (8004304 <BSP_TS_GetState+0x308>)
 8004152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004154:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	b29b      	uxth	r3, r3
 800415e:	e00c      	b.n	800417a <BSP_TS_GetState+0x17e>
 8004160:	4a68      	ldr	r2, [pc, #416]	@ (8004304 <BSP_TS_GetState+0x308>)
 8004162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	b29a      	uxth	r2, r3
 800416a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	3350      	adds	r3, #80	@ 0x50
 8004170:	443b      	add	r3, r7
 8004172:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800417e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	3350      	adds	r3, #80	@ 0x50
 8004184:	443b      	add	r3, r7
 8004186:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800418a:	4619      	mov	r1, r3
 800418c:	4a5e      	ldr	r2, [pc, #376]	@ (8004308 <BSP_TS_GetState+0x30c>)
 800418e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	4299      	cmp	r1, r3
 8004196:	d90d      	bls.n	80041b4 <BSP_TS_GetState+0x1b8>
 8004198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	3350      	adds	r3, #80	@ 0x50
 800419e:	443b      	add	r3, r7
 80041a0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80041a4:	4958      	ldr	r1, [pc, #352]	@ (8004308 <BSP_TS_GetState+0x30c>)
 80041a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	e00c      	b.n	80041ce <BSP_TS_GetState+0x1d2>
 80041b4:	4a54      	ldr	r2, [pc, #336]	@ (8004308 <BSP_TS_GetState+0x30c>)
 80041b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	3350      	adds	r3, #80	@ 0x50
 80041c4:	443b      	add	r3, r7
 80041c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80041d2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80041d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80041da:	4413      	add	r3, r2
 80041dc:	2b05      	cmp	r3, #5
 80041de:	dd15      	ble.n	800420c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80041e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	3350      	adds	r3, #80	@ 0x50
 80041e6:	443b      	add	r3, r7
 80041e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80041ec:	4619      	mov	r1, r3
 80041ee:	4a45      	ldr	r2, [pc, #276]	@ (8004304 <BSP_TS_GetState+0x308>)
 80041f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	3350      	adds	r3, #80	@ 0x50
 80041fc:	443b      	add	r3, r7
 80041fe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004202:	4619      	mov	r1, r3
 8004204:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <BSP_TS_GetState+0x30c>)
 8004206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800420c:	4b3b      	ldr	r3, [pc, #236]	@ (80042fc <BSP_TS_GetState+0x300>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b70      	cmp	r3, #112	@ 0x70
 8004212:	d119      	bne.n	8004248 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	3350      	adds	r3, #80	@ 0x50
 800421a:	443b      	add	r3, r7
 800421c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	460a      	mov	r2, r1
 800422a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800422c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	3350      	adds	r3, #80	@ 0x50
 8004232:	443b      	add	r3, r7
 8004234:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423c:	3304      	adds	r3, #4
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	460a      	mov	r2, r1
 8004244:	809a      	strh	r2, [r3, #4]
 8004246:	e022      	b.n	800428e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004248:	4b30      	ldr	r3, [pc, #192]	@ (800430c <BSP_TS_GetState+0x310>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	4a2d      	ldr	r2, [pc, #180]	@ (8004304 <BSP_TS_GetState+0x308>)
 8004250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	0b1b      	lsrs	r3, r3, #12
 800425c:	b299      	uxth	r1, r3
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	460a      	mov	r2, r1
 8004268:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800426a:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <BSP_TS_GetState+0x314>)
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	4619      	mov	r1, r3
 8004270:	4a25      	ldr	r2, [pc, #148]	@ (8004308 <BSP_TS_GetState+0x30c>)
 8004272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	0b1b      	lsrs	r3, r3, #12
 800427e:	b299      	uxth	r1, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004284:	3304      	adds	r3, #4
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	460a      	mov	r2, r1
 800428c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800428e:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <BSP_TS_GetState+0x300>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f107 010c 	add.w	r1, r7, #12
 8004298:	f107 0210 	add.w	r2, r7, #16
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	460b      	mov	r3, r1
 80042a4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80042a6:	f7fd fbb5 	bl	8001a14 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	b2d9      	uxtb	r1, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b2:	4413      	add	r3, r2
 80042b4:	3316      	adds	r3, #22
 80042b6:	460a      	mov	r2, r1
 80042b8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	b2d9      	uxtb	r1, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c2:	4413      	add	r3, r2
 80042c4:	3320      	adds	r3, #32
 80042c6:	460a      	mov	r2, r1
 80042c8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d836      	bhi.n	800433e <BSP_TS_GetState+0x342>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <BSP_TS_GetState+0x2dc>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	08004315 	.word	0x08004315
 80042e0:	08004323 	.word	0x08004323
 80042e4:	08004331 	.word	0x08004331
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ec:	4413      	add	r3, r2
 80042ee:	331b      	adds	r3, #27
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
          break;
 80042f4:	e027      	b.n	8004346 <BSP_TS_GetState+0x34a>
 80042f6:	bf00      	nop
 80042f8:	20000934 	.word	0x20000934
 80042fc:	2000093d 	.word	0x2000093d
 8004300:	2000093c 	.word	0x2000093c
 8004304:	20000940 	.word	0x20000940
 8004308:	20000954 	.word	0x20000954
 800430c:	20000938 	.word	0x20000938
 8004310:	2000093a 	.word	0x2000093a
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004318:	4413      	add	r3, r2
 800431a:	331b      	adds	r3, #27
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
          break;
 8004320:	e011      	b.n	8004346 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004326:	4413      	add	r3, r2
 8004328:	331b      	adds	r3, #27
 800432a:	2203      	movs	r2, #3
 800432c:	701a      	strb	r2, [r3, #0]
          break;
 800432e:	e00a      	b.n	8004346 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004334:	4413      	add	r3, r2
 8004336:	331b      	adds	r3, #27
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
          break;
 800433c:	e003      	b.n	8004346 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8004344:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004348:	3301      	adds	r3, #1
 800434a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004354:	4293      	cmp	r3, r2
 8004356:	f4ff ae71 	bcc.w	800403c <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f80a 	bl	8004374 <BSP_TS_Get_GestureId>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800436a:	4618      	mov	r0, r3
 800436c:	3754      	adds	r7, #84	@ 0x54
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	bf00      	nop

08004374 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004384:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <BSP_TS_Get_GestureId+0x100>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7fd fb26 	bl	80019e2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b49      	cmp	r3, #73	@ 0x49
 800439a:	d05e      	beq.n	800445a <BSP_TS_Get_GestureId+0xe6>
 800439c:	2b49      	cmp	r3, #73	@ 0x49
 800439e:	d860      	bhi.n	8004462 <BSP_TS_Get_GestureId+0xee>
 80043a0:	2b1c      	cmp	r3, #28
 80043a2:	d83f      	bhi.n	8004424 <BSP_TS_Get_GestureId+0xb0>
 80043a4:	2b1c      	cmp	r3, #28
 80043a6:	d85c      	bhi.n	8004462 <BSP_TS_Get_GestureId+0xee>
 80043a8:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <BSP_TS_Get_GestureId+0x3c>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	0800442b 	.word	0x0800442b
 80043b4:	08004463 	.word	0x08004463
 80043b8:	08004463 	.word	0x08004463
 80043bc:	08004463 	.word	0x08004463
 80043c0:	08004463 	.word	0x08004463
 80043c4:	08004463 	.word	0x08004463
 80043c8:	08004463 	.word	0x08004463
 80043cc:	08004463 	.word	0x08004463
 80043d0:	08004463 	.word	0x08004463
 80043d4:	08004463 	.word	0x08004463
 80043d8:	08004463 	.word	0x08004463
 80043dc:	08004463 	.word	0x08004463
 80043e0:	08004463 	.word	0x08004463
 80043e4:	08004463 	.word	0x08004463
 80043e8:	08004463 	.word	0x08004463
 80043ec:	08004463 	.word	0x08004463
 80043f0:	08004433 	.word	0x08004433
 80043f4:	08004463 	.word	0x08004463
 80043f8:	08004463 	.word	0x08004463
 80043fc:	08004463 	.word	0x08004463
 8004400:	0800443b 	.word	0x0800443b
 8004404:	08004463 	.word	0x08004463
 8004408:	08004463 	.word	0x08004463
 800440c:	08004463 	.word	0x08004463
 8004410:	08004443 	.word	0x08004443
 8004414:	08004463 	.word	0x08004463
 8004418:	08004463 	.word	0x08004463
 800441c:	08004463 	.word	0x08004463
 8004420:	0800444b 	.word	0x0800444b
 8004424:	2b40      	cmp	r3, #64	@ 0x40
 8004426:	d014      	beq.n	8004452 <BSP_TS_Get_GestureId+0xde>
 8004428:	e01b      	b.n	8004462 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004430:	e01a      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004438:	e016      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004440:	e012      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004448:	e00e      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2204      	movs	r2, #4
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004450:	e00a      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2205      	movs	r2, #5
 8004456:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004458:	e006      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2206      	movs	r2, #6
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004460:	e002      	b.n	8004468 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      break;
 8004466:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2000093d 	.word	0x2000093d

08004478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <HAL_MspInit+0x4c>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	4a10      	ldr	r2, [pc, #64]	@ (80044c4 <HAL_MspInit+0x4c>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004488:	6413      	str	r3, [r2, #64]	@ 0x40
 800448a:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <HAL_MspInit+0x4c>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_MspInit+0x4c>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <HAL_MspInit+0x4c>)
 800449c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a2:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <HAL_MspInit+0x4c>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	210f      	movs	r1, #15
 80044b2:	f06f 0001 	mvn.w	r0, #1
 80044b6:	f001 f865 	bl	8005584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	@ 0x38
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80044d8:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_InitTick+0xe0>)
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_InitTick+0xe0>)
 80044de:	f043 0310 	orr.w	r3, r3, #16
 80044e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80044e4:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_InitTick+0xe0>)
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044f0:	f107 0210 	add.w	r2, r7, #16
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 ffea 	bl	80084d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800450a:	f003 ffbb 	bl	8008484 <HAL_RCC_GetPCLK1Freq>
 800450e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004510:	e004      	b.n	800451c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004512:	f003 ffb7 	bl	8008484 <HAL_RCC_GetPCLK1Freq>
 8004516:	4603      	mov	r3, r0
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800451c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451e:	4a23      	ldr	r2, [pc, #140]	@ (80045ac <HAL_InitTick+0xe4>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	0c9b      	lsrs	r3, r3, #18
 8004526:	3b01      	subs	r3, #1
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_InitTick+0xe8>)
 800452c:	4a21      	ldr	r2, [pc, #132]	@ (80045b4 <HAL_InitTick+0xec>)
 800452e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004530:	4b1f      	ldr	r3, [pc, #124]	@ (80045b0 <HAL_InitTick+0xe8>)
 8004532:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004536:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <HAL_InitTick+0xe8>)
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800453e:	4b1c      	ldr	r3, [pc, #112]	@ (80045b0 <HAL_InitTick+0xe8>)
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HAL_InitTick+0xe8>)
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800454a:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <HAL_InitTick+0xe8>)
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004550:	4817      	ldr	r0, [pc, #92]	@ (80045b0 <HAL_InitTick+0xe8>)
 8004552:	f005 f8ef 	bl	8009734 <HAL_TIM_Base_Init>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800455c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11b      	bne.n	800459c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004564:	4812      	ldr	r0, [pc, #72]	@ (80045b0 <HAL_InitTick+0xe8>)
 8004566:	f005 f93d 	bl	80097e4 <HAL_TIM_Base_Start_IT>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004570:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004574:	2b00      	cmp	r3, #0
 8004576:	d111      	bne.n	800459c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004578:	2036      	movs	r0, #54	@ 0x36
 800457a:	f001 f81f 	bl	80055bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d808      	bhi.n	8004596 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004584:	2200      	movs	r2, #0
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	2036      	movs	r0, #54	@ 0x36
 800458a:	f000 fffb 	bl	8005584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <HAL_InitTick+0xf0>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e002      	b.n	800459c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800459c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3738      	adds	r7, #56	@ 0x38
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	431bde83 	.word	0x431bde83
 80045b0:	20000968 	.word	0x20000968
 80045b4:	40001000 	.word	0x40001000
 80045b8:	20000040 	.word	0x20000040

080045bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <NMI_Handler+0x4>

080045c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <HardFault_Handler+0x4>

080045cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <MemManage_Handler+0x4>

080045d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <BusFault_Handler+0x4>

080045dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <UsageFault_Handler+0x4>

080045e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80045f8:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <TIM6_DAC_IRQHandler+0x20>)
 80045fa:	791b      	ldrb	r3, [r3, #4]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004602:	4804      	ldr	r0, [pc, #16]	@ (8004614 <TIM6_DAC_IRQHandler+0x20>)
 8004604:	f001 f80a 	bl	800561c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004608:	4803      	ldr	r0, [pc, #12]	@ (8004618 <TIM6_DAC_IRQHandler+0x24>)
 800460a:	f005 f963 	bl	80098d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000148 	.word	0x20000148
 8004618:	20000968 	.word	0x20000968

0800461c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <LTDC_IRQHandler+0x10>)
 8004622:	f002 ffe9 	bl	80075f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000056c 	.word	0x2000056c

08004630 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004634:	4802      	ldr	r0, [pc, #8]	@ (8004640 <DMA2D_IRQHandler+0x10>)
 8004636:	f001 fbd1 	bl	8005ddc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000015c 	.word	0x2000015c

08004644 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <SystemInit+0x20>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	4a05      	ldr	r2, [pc, #20]	@ (8004664 <SystemInit+0x20>)
 8004650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466e:	f107 0310 	add.w	r3, r7, #16
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004686:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <MX_TIM1_Init+0xa0>)
 8004688:	4a20      	ldr	r2, [pc, #128]	@ (800470c <MX_TIM1_Init+0xa4>)
 800468a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800468c:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <MX_TIM1_Init+0xa0>)
 800468e:	2200      	movs	r2, #0
 8004690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004692:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <MX_TIM1_Init+0xa0>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <MX_TIM1_Init+0xa0>)
 800469a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800469e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ac:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046b2:	4815      	ldr	r0, [pc, #84]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046b4:	f005 f83e 	bl	8009734 <HAL_TIM_Base_Init>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80046be:	f7fe f91d 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	4619      	mov	r1, r3
 80046ce:	480e      	ldr	r0, [pc, #56]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046d0:	f005 fa08 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80046da:	f7fe f90f 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4806      	ldr	r0, [pc, #24]	@ (8004708 <MX_TIM1_Init+0xa0>)
 80046f0:	f005 fc2a 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80046fa:	f7fe f8ff 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80046fe:	bf00      	nop
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200009b4 	.word	0x200009b4
 800470c:	40010000 	.word	0x40010000

08004710 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004730:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004734:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004736:	4b1c      	ldr	r3, [pc, #112]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004738:	2200      	movs	r2, #0
 800473a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800473c:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <MX_TIM2_Init+0x98>)
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004744:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474a:	4b17      	ldr	r3, [pc, #92]	@ (80047a8 <MX_TIM2_Init+0x98>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004750:	4b15      	ldr	r3, [pc, #84]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004756:	4814      	ldr	r0, [pc, #80]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004758:	f004 ffec 	bl	8009734 <HAL_TIM_Base_Init>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004762:	f7fe f8cb 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800476a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	4619      	mov	r1, r3
 8004772:	480d      	ldr	r0, [pc, #52]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004774:	f005 f9b6 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800477e:	f7fe f8bd 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4806      	ldr	r0, [pc, #24]	@ (80047a8 <MX_TIM2_Init+0x98>)
 8004790:	f005 fbda 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800479a:	f7fe f8af 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800479e:	bf00      	nop
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000a00 	.word	0x20000a00

080047ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b2:	f107 0310 	add.w	r3, r7, #16
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <MX_TIM3_Init+0x98>)
 80047ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80047d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80047dc:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e4:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ea:	4b15      	ldr	r3, [pc, #84]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047f0:	4813      	ldr	r0, [pc, #76]	@ (8004840 <MX_TIM3_Init+0x94>)
 80047f2:	f004 ff9f 	bl	8009734 <HAL_TIM_Base_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80047fc:	f7fe f87e 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004804:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	4619      	mov	r1, r3
 800480c:	480c      	ldr	r0, [pc, #48]	@ (8004840 <MX_TIM3_Init+0x94>)
 800480e:	f005 f969 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004818:	f7fe f870 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4805      	ldr	r0, [pc, #20]	@ (8004840 <MX_TIM3_Init+0x94>)
 800482a:	f005 fb8d 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004834:	f7fe f862 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004838:	bf00      	nop
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000a4c 	.word	0x20000a4c
 8004844:	40000400 	.word	0x40000400

08004848 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800484e:	f107 0310 	add.w	r3, r7, #16
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004866:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <MX_TIM5_Init+0x94>)
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <MX_TIM5_Init+0x98>)
 800486a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <MX_TIM5_Init+0x94>)
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004872:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <MX_TIM5_Init+0x94>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004878:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <MX_TIM5_Init+0x94>)
 800487a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800487e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004880:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <MX_TIM5_Init+0x94>)
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004886:	4b15      	ldr	r3, [pc, #84]	@ (80048dc <MX_TIM5_Init+0x94>)
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800488c:	4813      	ldr	r0, [pc, #76]	@ (80048dc <MX_TIM5_Init+0x94>)
 800488e:	f004 ff51 	bl	8009734 <HAL_TIM_Base_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004898:	f7fe f830 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800489c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80048a2:	f107 0310 	add.w	r3, r7, #16
 80048a6:	4619      	mov	r1, r3
 80048a8:	480c      	ldr	r0, [pc, #48]	@ (80048dc <MX_TIM5_Init+0x94>)
 80048aa:	f005 f91b 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80048b4:	f7fe f822 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b8:	2300      	movs	r3, #0
 80048ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4805      	ldr	r0, [pc, #20]	@ (80048dc <MX_TIM5_Init+0x94>)
 80048c6:	f005 fb3f 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80048d0:	f7fe f814 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80048d4:	bf00      	nop
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000a98 	.word	0x20000a98
 80048e0:	40000c00 	.word	0x40000c00

080048e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ea:	f107 0310 	add.w	r3, r7, #16
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f8:	1d3b      	adds	r3, r7, #4
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004902:	4b20      	ldr	r3, [pc, #128]	@ (8004984 <MX_TIM8_Init+0xa0>)
 8004904:	4a20      	ldr	r2, [pc, #128]	@ (8004988 <MX_TIM8_Init+0xa4>)
 8004906:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004908:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <MX_TIM8_Init+0xa0>)
 800490a:	2200      	movs	r2, #0
 800490c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <MX_TIM8_Init+0xa0>)
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <MX_TIM8_Init+0xa0>)
 8004916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800491a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491c:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <MX_TIM8_Init+0xa0>)
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004922:	4b18      	ldr	r3, [pc, #96]	@ (8004984 <MX_TIM8_Init+0xa0>)
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004928:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <MX_TIM8_Init+0xa0>)
 800492a:	2200      	movs	r2, #0
 800492c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800492e:	4815      	ldr	r0, [pc, #84]	@ (8004984 <MX_TIM8_Init+0xa0>)
 8004930:	f004 ff00 	bl	8009734 <HAL_TIM_Base_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800493a:	f7fd ffdf 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800493e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004944:	f107 0310 	add.w	r3, r7, #16
 8004948:	4619      	mov	r1, r3
 800494a:	480e      	ldr	r0, [pc, #56]	@ (8004984 <MX_TIM8_Init+0xa0>)
 800494c:	f005 f8ca 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004956:	f7fd ffd1 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4806      	ldr	r0, [pc, #24]	@ (8004984 <MX_TIM8_Init+0xa0>)
 800496c:	f005 faec 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004976:	f7fd ffc1 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800497a:	bf00      	nop
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000ae4 	.word	0x20000ae4
 8004988:	40010400 	.word	0x40010400

0800498c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	@ 0x38
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004a98 <HAL_TIM_Base_MspInit+0x10c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10c      	bne.n	80049c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ae:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	4a3a      	ldr	r2, [pc, #232]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ba:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80049c6:	e062      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d0:	d10c      	bne.n	80049ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049d2:	4b32      	ldr	r3, [pc, #200]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	4a31      	ldr	r2, [pc, #196]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049de:	4b2f      	ldr	r3, [pc, #188]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
}
 80049ea:	e050      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x114>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10c      	bne.n	8004a10 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	4a28      	ldr	r2, [pc, #160]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	69bb      	ldr	r3, [r7, #24]
}
 8004a0e:	e03e      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a23      	ldr	r2, [pc, #140]	@ (8004aa4 <HAL_TIM_Base_MspInit+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10c      	bne.n	8004a34 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a1a:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a26:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
}
 8004a32:	e02c      	b.n	8004a8e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa8 <HAL_TIM_Base_MspInit+0x11c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d127      	bne.n	8004a8e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a3e:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_TIM_Base_MspInit+0x110>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a72:	2302      	movs	r3, #2
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a86:	4619      	mov	r1, r3
 8004a88:	4808      	ldr	r0, [pc, #32]	@ (8004aac <HAL_TIM_Base_MspInit+0x120>)
 8004a8a:	f001 fbe5 	bl	8006258 <HAL_GPIO_Init>
}
 8004a8e:	bf00      	nop
 8004a90:	3738      	adds	r7, #56	@ 0x38
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40022000 	.word	0x40022000

08004ab0 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ab6:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <MX_UART7_Init+0x5c>)
 8004ab8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004aba:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ac0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004ace:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae0:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004af2:	4805      	ldr	r0, [pc, #20]	@ (8004b08 <MX_UART7_Init+0x58>)
 8004af4:	f005 fad4 	bl	800a0a0 <HAL_UART_Init>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004afe:	f7fd fefd 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000b30 	.word	0x20000b30
 8004b0c:	40007800 	.word	0x40007800

08004b10 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b14:	4b14      	ldr	r3, [pc, #80]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b16:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <MX_USART1_UART_Init+0x5c>)
 8004b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b1a:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b22:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b36:	220c      	movs	r2, #12
 8004b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b40:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b46:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b52:	4805      	ldr	r0, [pc, #20]	@ (8004b68 <MX_USART1_UART_Init+0x58>)
 8004b54:	f005 faa4 	bl	800a0a0 <HAL_UART_Init>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004b5e:	f7fd fecd 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000bb8 	.word	0x20000bb8
 8004b6c:	40011000 	.word	0x40011000

08004b70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b74:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b76:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <MX_USART6_UART_Init+0x5c>)
 8004b78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004b80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b96:	220c      	movs	r2, #12
 8004b98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004bb2:	4805      	ldr	r0, [pc, #20]	@ (8004bc8 <MX_USART6_UART_Init+0x58>)
 8004bb4:	f005 fa74 	bl	800a0a0 <HAL_UART_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004bbe:	f7fd fe9d 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000c40 	.word	0x20000c40
 8004bcc:	40011400 	.word	0x40011400

08004bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0b0      	sub	sp, #192	@ 0xc0
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004be8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004bec:	2284      	movs	r2, #132	@ 0x84
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f008 fad3 	bl	800d19c <memset>
  if(uartHandle->Instance==UART7)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a75      	ldr	r2, [pc, #468]	@ (8004dd0 <HAL_UART_MspInit+0x200>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d13d      	bne.n	8004c7c <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fc91 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004c1c:	f7fd fe6e 	bl	80028fc <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004c20:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c2c:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c38:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	4a65      	ldr	r2, [pc, #404]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c44:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004c50:	23c0      	movs	r3, #192	@ 0xc0
 8004c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c56:	2302      	movs	r3, #2
 8004c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c62:	2303      	movs	r3, #3
 8004c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c6e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c72:	4619      	mov	r1, r3
 8004c74:	4858      	ldr	r0, [pc, #352]	@ (8004dd8 <HAL_UART_MspInit+0x208>)
 8004c76:	f001 faef 	bl	8006258 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004c7a:	e0a4      	b.n	8004dc6 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a56      	ldr	r2, [pc, #344]	@ (8004ddc <HAL_UART_MspInit+0x20c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d15d      	bne.n	8004d42 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c86:	2340      	movs	r3, #64	@ 0x40
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 fc50 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004c9e:	f7fd fe2d 	bl	80028fc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cae:	4b49      	ldr	r3, [pc, #292]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	4b46      	ldr	r3, [pc, #280]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	4a45      	ldr	r2, [pc, #276]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cc6:	4b43      	ldr	r3, [pc, #268]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd2:	4b40      	ldr	r3, [pc, #256]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cde:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d02:	2307      	movs	r3, #7
 8004d04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004d08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4834      	ldr	r0, [pc, #208]	@ (8004de0 <HAL_UART_MspInit+0x210>)
 8004d10:	f001 faa2 	bl	8006258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d2e:	2307      	movs	r3, #7
 8004d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004d34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004d38:	4619      	mov	r1, r3
 8004d3a:	482a      	ldr	r0, [pc, #168]	@ (8004de4 <HAL_UART_MspInit+0x214>)
 8004d3c:	f001 fa8c 	bl	8006258 <HAL_GPIO_Init>
}
 8004d40:	e041      	b.n	8004dc6 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a28      	ldr	r2, [pc, #160]	@ (8004de8 <HAL_UART_MspInit+0x218>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d13c      	bne.n	8004dc6 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fbeb 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004d68:	f7fd fdc8 	bl	80028fc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d72:	f043 0320 	orr.w	r3, r3, #32
 8004d76:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d78:	4b16      	ldr	r3, [pc, #88]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d84:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d8a:	f043 0304 	orr.w	r3, r3, #4
 8004d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d90:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <HAL_UART_MspInit+0x204>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004d9c:	23c0      	movs	r3, #192	@ 0xc0
 8004d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da2:	2302      	movs	r3, #2
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dae:	2303      	movs	r3, #3
 8004db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004db4:	2308      	movs	r3, #8
 8004db6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	480a      	ldr	r0, [pc, #40]	@ (8004dec <HAL_UART_MspInit+0x21c>)
 8004dc2:	f001 fa49 	bl	8006258 <HAL_GPIO_Init>
}
 8004dc6:	bf00      	nop
 8004dc8:	37c0      	adds	r7, #192	@ 0xc0
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40007800 	.word	0x40007800
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40021400 	.word	0x40021400
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	40020400 	.word	0x40020400
 8004de4:	40020000 	.word	0x40020000
 8004de8:	40011400 	.word	0x40011400
 8004dec:	40020800 	.word	0x40020800

08004df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8004df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004df4:	480d      	ldr	r0, [pc, #52]	@ (8004e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004df6:	490e      	ldr	r1, [pc, #56]	@ (8004e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dfc:	e002      	b.n	8004e04 <LoopCopyDataInit>

08004dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e02:	3304      	adds	r3, #4

08004e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e08:	d3f9      	bcc.n	8004dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e10:	e001      	b.n	8004e16 <LoopFillZerobss>

08004e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e14:	3204      	adds	r2, #4

08004e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e18:	d3fb      	bcc.n	8004e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e1a:	f7ff fc13 	bl	8004644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e1e:	f008 fa1b 	bl	800d258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e22:	f7fd fc77 	bl	8002714 <main>
  bx  lr    
 8004e26:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8004e28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e30:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004e34:	0804f030 	.word	0x0804f030
  ldr r2, =_sbss
 8004e38:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004e3c:	20004b58 	.word	0x20004b58

08004e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e40:	e7fe      	b.n	8004e40 <ADC_IRQHandler>

08004e42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e46:	2003      	movs	r0, #3
 8004e48:	f000 fb91 	bl	800556e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e4c:	200f      	movs	r0, #15
 8004e4e:	f7ff fb3b 	bl	80044c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e52:	f7ff fb11 	bl	8004478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <HAL_IncTick+0x20>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_IncTick+0x24>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_IncTick+0x24>)
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000044 	.word	0x20000044
 8004e80:	20000cc8 	.word	0x20000cc8

08004e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return uwTick;
 8004e88:	4b03      	ldr	r3, [pc, #12]	@ (8004e98 <HAL_GetTick+0x14>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000cc8 	.word	0x20000cc8

08004e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ea4:	f7ff ffee 	bl	8004e84 <HAL_GetTick>
 8004ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb4:	d005      	beq.n	8004ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_Delay+0x44>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ec2:	bf00      	nop
 8004ec4:	f7ff ffde 	bl	8004e84 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d8f7      	bhi.n	8004ec4 <HAL_Delay+0x28>
  {
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000044 	.word	0x20000044

08004ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e031      	b.n	8004f5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fb fea6 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f26:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <HAL_ADC_Init+0x84>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	f043 0202 	orr.w	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f974 	bl	8005220 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f4e:	e001      	b.n	8004f54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	ffffeefd 	.word	0xffffeefd

08004f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e13a      	b.n	80051fe <HAL_ADC_ConfigChannel+0x292>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b09      	cmp	r3, #9
 8004f96:	d93a      	bls.n	800500e <HAL_ADC_ConfigChannel+0xa2>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa0:	d035      	beq.n	800500e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68d9      	ldr	r1, [r3, #12]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3b1e      	subs	r3, #30
 8004fb8:	2207      	movs	r2, #7
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a8f      	ldr	r2, [pc, #572]	@ (800520c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68d9      	ldr	r1, [r3, #12]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	061a      	lsls	r2, r3, #24
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fe6:	e039      	b.n	800505c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68d9      	ldr	r1, [r3, #12]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4403      	add	r3, r0
 8005000:	3b1e      	subs	r3, #30
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800500c:	e026      	b.n	800505c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6919      	ldr	r1, [r3, #16]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2207      	movs	r2, #7
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6919      	ldr	r1, [r3, #16]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	4618      	mov	r0, r3
 8005048:	4603      	mov	r3, r0
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4403      	add	r3, r0
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	409a      	lsls	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d824      	bhi.n	80050ae <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	3b05      	subs	r3, #5
 8005076:	221f      	movs	r2, #31
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43da      	mvns	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	400a      	ands	r2, r1
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	4618      	mov	r0, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	3b05      	subs	r3, #5
 80050a0:	fa00 f203 	lsl.w	r2, r0, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80050ac:	e04c      	b.n	8005148 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d824      	bhi.n	8005100 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	3b23      	subs	r3, #35	@ 0x23
 80050c8:	221f      	movs	r2, #31
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43da      	mvns	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	400a      	ands	r2, r1
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4618      	mov	r0, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	3b23      	subs	r3, #35	@ 0x23
 80050f2:	fa00 f203 	lsl.w	r2, r0, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80050fe:	e023      	b.n	8005148 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	3b41      	subs	r3, #65	@ 0x41
 8005112:	221f      	movs	r2, #31
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43da      	mvns	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	400a      	ands	r2, r1
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	4618      	mov	r0, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	3b41      	subs	r3, #65	@ 0x41
 800513c:	fa00 f203 	lsl.w	r2, r0, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a30      	ldr	r2, [pc, #192]	@ (8005210 <HAL_ADC_ConfigChannel+0x2a4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10a      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x1fc>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800515a:	d105      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800515c:	4b2d      	ldr	r3, [pc, #180]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 8005162:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005166:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a28      	ldr	r2, [pc, #160]	@ (8005210 <HAL_ADC_ConfigChannel+0x2a4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10f      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x226>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b12      	cmp	r3, #18
 8005178:	d10b      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800517a:	4b26      	ldr	r3, [pc, #152]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a25      	ldr	r2, [pc, #148]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 8005180:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005184:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005186:	4b23      	ldr	r3, [pc, #140]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4a22      	ldr	r2, [pc, #136]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 800518c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005190:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_ADC_ConfigChannel+0x2a4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d12b      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x288>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_ADC_ConfigChannel+0x2a0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <HAL_ADC_ConfigChannel+0x242>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b11      	cmp	r3, #17
 80051ac:	d122      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80051ae:	4b19      	ldr	r3, [pc, #100]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 80051b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80051b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <HAL_ADC_ConfigChannel+0x2a8>)
 80051c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a10      	ldr	r2, [pc, #64]	@ (800520c <HAL_ADC_ConfigChannel+0x2a0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d111      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80051d0:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <HAL_ADC_ConfigChannel+0x2ac>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a11      	ldr	r2, [pc, #68]	@ (800521c <HAL_ADC_ConfigChannel+0x2b0>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0c9a      	lsrs	r2, r3, #18
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80051e6:	e002      	b.n	80051ee <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f9      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	10000012 	.word	0x10000012
 8005210:	40012000 	.word	0x40012000
 8005214:	40012300 	.word	0x40012300
 8005218:	2000003c 	.word	0x2000003c
 800521c:	431bde83 	.word	0x431bde83

08005220 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005228:	4b78      	ldr	r3, [pc, #480]	@ (800540c <ADC_Init+0x1ec>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a77      	ldr	r2, [pc, #476]	@ (800540c <ADC_Init+0x1ec>)
 800522e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005232:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005234:	4b75      	ldr	r3, [pc, #468]	@ (800540c <ADC_Init+0x1ec>)
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4973      	ldr	r1, [pc, #460]	@ (800540c <ADC_Init+0x1ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	4a58      	ldr	r2, [pc, #352]	@ (8005410 <ADC_Init+0x1f0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e00f      	b.n	800531a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005318:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0202 	bic.w	r2, r2, #2
 8005328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	005a      	lsls	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005356:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	3b01      	subs	r3, #1
 8005374:	035a      	lsls	r2, r3, #13
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	e007      	b.n	8005390 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800538e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800539e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	051a      	lsls	r2, r3, #20
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80053c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6899      	ldr	r1, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053d2:	025a      	lsls	r2, r3, #9
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	029a      	lsls	r2, r3, #10
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40012300 	.word	0x40012300
 8005410:	0f000001 	.word	0x0f000001

08005414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <__NVIC_SetPriorityGrouping+0x40>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005430:	4013      	ands	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <__NVIC_SetPriorityGrouping+0x44>)
 800543e:	4313      	orrs	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005442:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <__NVIC_SetPriorityGrouping+0x40>)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	60d3      	str	r3, [r2, #12]
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00
 8005458:	05fa0000 	.word	0x05fa0000

0800545c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005460:	4b04      	ldr	r3, [pc, #16]	@ (8005474 <__NVIC_GetPriorityGrouping+0x18>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	f003 0307 	and.w	r3, r3, #7
}
 800546a:	4618      	mov	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	2b00      	cmp	r3, #0
 8005488:	db0b      	blt.n	80054a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	f003 021f 	and.w	r2, r3, #31
 8005490:	4907      	ldr	r1, [pc, #28]	@ (80054b0 <__NVIC_EnableIRQ+0x38>)
 8005492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2001      	movs	r0, #1
 800549a:	fa00 f202 	lsl.w	r2, r0, r2
 800549e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	e000e100 	.word	0xe000e100

080054b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	db0a      	blt.n	80054de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	490c      	ldr	r1, [pc, #48]	@ (8005500 <__NVIC_SetPriority+0x4c>)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	440b      	add	r3, r1
 80054d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054dc:	e00a      	b.n	80054f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	4908      	ldr	r1, [pc, #32]	@ (8005504 <__NVIC_SetPriority+0x50>)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	3b04      	subs	r3, #4
 80054ec:	0112      	lsls	r2, r2, #4
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	440b      	add	r3, r1
 80054f2:	761a      	strb	r2, [r3, #24]
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	e000e100 	.word	0xe000e100
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	@ 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f1c3 0307 	rsb	r3, r3, #7
 8005522:	2b04      	cmp	r3, #4
 8005524:	bf28      	it	cs
 8005526:	2304      	movcs	r3, #4
 8005528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3304      	adds	r3, #4
 800552e:	2b06      	cmp	r3, #6
 8005530:	d902      	bls.n	8005538 <NVIC_EncodePriority+0x30>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3b03      	subs	r3, #3
 8005536:	e000      	b.n	800553a <NVIC_EncodePriority+0x32>
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800553c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43da      	mvns	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	401a      	ands	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	43d9      	mvns	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005560:	4313      	orrs	r3, r2
         );
}
 8005562:	4618      	mov	r0, r3
 8005564:	3724      	adds	r7, #36	@ 0x24
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff ff4c 	bl	8005414 <__NVIC_SetPriorityGrouping>
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005596:	f7ff ff61 	bl	800545c <__NVIC_GetPriorityGrouping>
 800559a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f7ff ffb1 	bl	8005508 <NVIC_EncodePriority>
 80055a6:	4602      	mov	r2, r0
 80055a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ff80 	bl	80054b4 <__NVIC_SetPriority>
}
 80055b4:	bf00      	nop
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ff54 	bl	8005478 <__NVIC_EnableIRQ>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e014      	b.n	8005614 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fbc2 	bl	8000d84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01d      	beq.n	800567a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2204      	movs	r2, #4
 800564c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005662:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005672:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f827 	bl	80056c8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01d      	beq.n	80056c0 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2204      	movs	r2, #4
 8005692:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f043 0202 	orr.w	r2, r3, #2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80056b8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f867 	bl	800578e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	@ 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_DAC_ConfigChannel+0x1c>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e042      	b.n	8005782 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	795b      	ldrb	r3, [r3, #5]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_DAC_ConfigChannel+0x2c>
 8005704:	2302      	movs	r3, #2
 8005706:	e03c      	b.n	8005782 <HAL_DAC_ConfigChannel+0xa6>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2202      	movs	r2, #2
 8005712:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	22c0      	movs	r2, #192	@ 0xc0
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43da      	mvns	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	400a      	ands	r2, r1
 8005772:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005780:	7ffb      	ldrb	r3, [r7, #31]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3724      	adds	r7, #36	@ 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057b0:	f7ff fb68 	bl	8004e84 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e099      	b.n	80058f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e0:	e00f      	b.n	8005802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057e2:	f7ff fb4f 	bl	8004e84 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d908      	bls.n	8005802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2203      	movs	r2, #3
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e078      	b.n	80058f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e8      	bne.n	80057e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4b38      	ldr	r3, [pc, #224]	@ (80058fc <HAL_DMA_Init+0x158>)
 800581c:	4013      	ands	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800582e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800583a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	2b04      	cmp	r3, #4
 800585a:	d107      	bne.n	800586c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	4313      	orrs	r3, r2
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0307 	bic.w	r3, r3, #7
 8005882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	2b04      	cmp	r3, #4
 8005894:	d117      	bne.n	80058c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8bd 	bl	8005a28 <DMA_CheckFifoParam>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2240      	movs	r2, #64	@ 0x40
 80058b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80058c2:	2301      	movs	r3, #1
 80058c4:	e016      	b.n	80058f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f874 	bl	80059bc <DMA_CalcBaseAndBitshift>
 80058d4:	4603      	mov	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	223f      	movs	r2, #63	@ 0x3f
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	f010803f 	.word	0xf010803f

08005900 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e050      	b.n	80059b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d101      	bne.n	8005922 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
 8005920:	e048      	b.n	80059b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2221      	movs	r2, #33	@ 0x21
 8005960:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f82a 	bl	80059bc <DMA_CalcBaseAndBitshift>
 8005968:	4603      	mov	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	223f      	movs	r2, #63	@ 0x3f
 8005972:	409a      	lsls	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b10      	subs	r3, #16
 80059cc:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <DMA_CalcBaseAndBitshift+0x60>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <DMA_CalcBaseAndBitshift+0x64>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d908      	bls.n	80059fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <DMA_CalcBaseAndBitshift+0x68>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	1d1a      	adds	r2, r3, #4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80059fa:	e006      	b.n	8005a0a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b08      	ldr	r3, [pc, #32]	@ (8005a24 <DMA_CalcBaseAndBitshift+0x68>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	aaaaaaab 	.word	0xaaaaaaab
 8005a20:	0804f018 	.word	0x0804f018
 8005a24:	fffffc00 	.word	0xfffffc00

08005a28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11f      	bne.n	8005a82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d856      	bhi.n	8005af6 <DMA_CheckFifoParam+0xce>
 8005a48:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <DMA_CheckFifoParam+0x28>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a73 	.word	0x08005a73
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08005af7 	.word	0x08005af7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d046      	beq.n	8005afa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a70:	e043      	b.n	8005afa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a7a:	d140      	bne.n	8005afe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e03d      	b.n	8005afe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8a:	d121      	bne.n	8005ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d837      	bhi.n	8005b02 <DMA_CheckFifoParam+0xda>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <DMA_CheckFifoParam+0x70>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005aaf 	.word	0x08005aaf
 8005aa0:	08005aa9 	.word	0x08005aa9
 8005aa4:	08005ac1 	.word	0x08005ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e030      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d025      	beq.n	8005b06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abe:	e022      	b.n	8005b06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ac8:	d11f      	bne.n	8005b0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ace:	e01c      	b.n	8005b0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d903      	bls.n	8005ade <DMA_CheckFifoParam+0xb6>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d003      	beq.n	8005ae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005adc:	e018      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae2:	e015      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e00b      	b.n	8005b0e <DMA_CheckFifoParam+0xe6>
      break;
 8005af6:	bf00      	nop
 8005af8:	e00a      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005afa:	bf00      	nop
 8005afc:	e008      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005afe:	bf00      	nop
 8005b00:	e006      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e039      	b.n	8005ba6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb f996 	bl	8000e78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b70:	f023 0107 	bic.w	r1, r3, #7
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <HAL_DMA2D_Init+0x90>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68d1      	ldr	r1, [r2, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	ffffc000 	.word	0xffffc000

08005bb4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA2D_Start+0x1c>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e018      	b.n	8005c02 <HAL_DMA2D_Start+0x4e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa98 	bl	8006120 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d056      	beq.n	8005cd4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c26:	f7ff f92d 	bl	8004e84 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c2c:	e04b      	b.n	8005cc6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d023      	beq.n	8005c88 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	f043 0201 	orr.w	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2221      	movs	r2, #33	@ 0x21
 8005c72:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0a5      	b.n	8005dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c8e:	d01a      	beq.n	8005cc6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c90:	f7ff f8f8 	bl	8004e84 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <HAL_DMA2D_PollForTransfer+0x9c>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10f      	bne.n	8005cc6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e086      	b.n	8005dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ac      	beq.n	8005c2e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d061      	beq.n	8005dba <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf6:	f7ff f8c5 	bl	8004e84 <HAL_GetTick>
 8005cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cfc:	e056      	b.n	8005dac <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d02e      	beq.n	8005d6e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1e:	f043 0204 	orr.w	r2, r3, #4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	f043 0202 	orr.w	r2, r3, #2
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2229      	movs	r2, #41	@ 0x29
 8005d58:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e032      	b.n	8005dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d74:	d01a      	beq.n	8005dac <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7ff f885 	bl	8004e84 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <HAL_DMA2D_PollForTransfer+0x182>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10f      	bne.n	8005dac <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e013      	b.n	8005dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0a1      	beq.n	8005cfe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2212      	movs	r2, #18
 8005dc0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d026      	beq.n	8005e4c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d021      	beq.n	8005e4c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e16:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d026      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d021      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2220      	movs	r2, #32
 8005e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7c:	f043 0202 	orr.w	r2, r3, #2
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2204      	movs	r2, #4
 8005e88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d026      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d021      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ec6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	f043 0204 	orr.w	r2, r3, #4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2204      	movs	r2, #4
 8005ee0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2204      	movs	r2, #4
 8005f26:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f853 	bl	8005fd4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d024      	beq.n	8005f82 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01f      	beq.n	8005f82 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005f50:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2202      	movs	r2, #2
 8005f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01f      	beq.n	8005fcc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2210      	movs	r2, #16
 8005fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f80e 	bl	8005fe8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_DMA2D_ConfigLayer+0x20>
 8006018:	2302      	movs	r3, #2
 800601a:	e079      	b.n	8006110 <HAL_DMA2D_ConfigLayer+0x114>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	3318      	adds	r3, #24
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006046:	4b35      	ldr	r3, [pc, #212]	@ (800611c <HAL_DMA2D_ConfigLayer+0x120>)
 8006048:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b0a      	cmp	r3, #10
 8006050:	d003      	beq.n	800605a <HAL_DMA2D_ConfigLayer+0x5e>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b09      	cmp	r3, #9
 8006058:	d107      	bne.n	800606a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e005      	b.n	8006076 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	061b      	lsls	r3, r3, #24
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d120      	bne.n	80060be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	43db      	mvns	r3, r3
 8006086:	ea02 0103 	and.w	r1, r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	430a      	orrs	r2, r1
 8006092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	d003      	beq.n	80060ae <HAL_DMA2D_ConfigLayer+0xb2>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b09      	cmp	r3, #9
 80060ac:	d127      	bne.n	80060fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80060ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80060bc:	e01f      	b.n	80060fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	ea02 0103 	and.w	r1, r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b0a      	cmp	r3, #10
 80060e6:	d003      	beq.n	80060f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d106      	bne.n	80060fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80060fc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	ff03000f 	.word	0xff03000f

08006120 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006120:	b480      	push	{r7}
 8006122:	b08b      	sub	sp, #44	@ 0x2c
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	041a      	lsls	r2, r3, #16
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	431a      	orrs	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006158:	d174      	bne.n	8006244 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006168:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006170:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	431a      	orrs	r2, r3
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	4313      	orrs	r3, r2
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006190:	e053      	b.n	800623a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d106      	bne.n	80061a8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4313      	orrs	r3, r2
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a6:	e048      	b.n	800623a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d111      	bne.n	80061d4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	0cdb      	lsrs	r3, r3, #19
 80061b4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	0a9b      	lsrs	r3, r3, #10
 80061ba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	02db      	lsls	r3, r3, #11
 80061ca:	4313      	orrs	r3, r2
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d2:	e032      	b.n	800623a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d117      	bne.n	800620c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	0fdb      	lsrs	r3, r3, #31
 80061e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	0cdb      	lsrs	r3, r3, #19
 80061e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	0adb      	lsrs	r3, r3, #11
 80061ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	08db      	lsrs	r3, r3, #3
 80061f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	431a      	orrs	r2, r3
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	03db      	lsls	r3, r3, #15
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
 800620a:	e016      	b.n	800623a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	0f1b      	lsrs	r3, r3, #28
 8006210:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	0d1b      	lsrs	r3, r3, #20
 8006216:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	0b1b      	lsrs	r3, r3, #12
 800621c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	091b      	lsrs	r3, r3, #4
 8006222:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	011a      	lsls	r2, r3, #4
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	431a      	orrs	r2, r3
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	031b      	lsls	r3, r3, #12
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006242:	e003      	b.n	800624c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	60da      	str	r2, [r3, #12]
}
 800624c:	bf00      	nop
 800624e:	372c      	adds	r7, #44	@ 0x2c
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e175      	b.n	8006564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006278:	2201      	movs	r2, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4013      	ands	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	f040 8164 	bne.w	800655e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d005      	beq.n	80062ae <HAL_GPIO_Init+0x56>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d130      	bne.n	8006310 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2203      	movs	r2, #3
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062e4:	2201      	movs	r2, #1
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 0201 	and.w	r2, r3, #1
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	2b03      	cmp	r3, #3
 800631a:	d017      	beq.n	800634c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	2203      	movs	r2, #3
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d123      	bne.n	80063a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	08da      	lsrs	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3208      	adds	r2, #8
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	220f      	movs	r2, #15
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4313      	orrs	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	08da      	lsrs	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3208      	adds	r2, #8
 800639a:	69b9      	ldr	r1, [r7, #24]
 800639c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 0203 	and.w	r2, r3, #3
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80be 	beq.w	800655e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e2:	4b66      	ldr	r3, [pc, #408]	@ (800657c <HAL_GPIO_Init+0x324>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e6:	4a65      	ldr	r2, [pc, #404]	@ (800657c <HAL_GPIO_Init+0x324>)
 80063e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80063ee:	4b63      	ldr	r3, [pc, #396]	@ (800657c <HAL_GPIO_Init+0x324>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063fa:	4a61      	ldr	r2, [pc, #388]	@ (8006580 <HAL_GPIO_Init+0x328>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	3302      	adds	r3, #2
 8006402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	220f      	movs	r2, #15
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a58      	ldr	r2, [pc, #352]	@ (8006584 <HAL_GPIO_Init+0x32c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d037      	beq.n	8006496 <HAL_GPIO_Init+0x23e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a57      	ldr	r2, [pc, #348]	@ (8006588 <HAL_GPIO_Init+0x330>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_GPIO_Init+0x23a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a56      	ldr	r2, [pc, #344]	@ (800658c <HAL_GPIO_Init+0x334>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d02b      	beq.n	800648e <HAL_GPIO_Init+0x236>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a55      	ldr	r2, [pc, #340]	@ (8006590 <HAL_GPIO_Init+0x338>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d025      	beq.n	800648a <HAL_GPIO_Init+0x232>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a54      	ldr	r2, [pc, #336]	@ (8006594 <HAL_GPIO_Init+0x33c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01f      	beq.n	8006486 <HAL_GPIO_Init+0x22e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a53      	ldr	r2, [pc, #332]	@ (8006598 <HAL_GPIO_Init+0x340>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d019      	beq.n	8006482 <HAL_GPIO_Init+0x22a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a52      	ldr	r2, [pc, #328]	@ (800659c <HAL_GPIO_Init+0x344>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <HAL_GPIO_Init+0x226>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a51      	ldr	r2, [pc, #324]	@ (80065a0 <HAL_GPIO_Init+0x348>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00d      	beq.n	800647a <HAL_GPIO_Init+0x222>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a50      	ldr	r2, [pc, #320]	@ (80065a4 <HAL_GPIO_Init+0x34c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <HAL_GPIO_Init+0x21e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a4f      	ldr	r2, [pc, #316]	@ (80065a8 <HAL_GPIO_Init+0x350>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d101      	bne.n	8006472 <HAL_GPIO_Init+0x21a>
 800646e:	2309      	movs	r3, #9
 8006470:	e012      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006472:	230a      	movs	r3, #10
 8006474:	e010      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006476:	2308      	movs	r3, #8
 8006478:	e00e      	b.n	8006498 <HAL_GPIO_Init+0x240>
 800647a:	2307      	movs	r3, #7
 800647c:	e00c      	b.n	8006498 <HAL_GPIO_Init+0x240>
 800647e:	2306      	movs	r3, #6
 8006480:	e00a      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006482:	2305      	movs	r3, #5
 8006484:	e008      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006486:	2304      	movs	r3, #4
 8006488:	e006      	b.n	8006498 <HAL_GPIO_Init+0x240>
 800648a:	2303      	movs	r3, #3
 800648c:	e004      	b.n	8006498 <HAL_GPIO_Init+0x240>
 800648e:	2302      	movs	r3, #2
 8006490:	e002      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_GPIO_Init+0x240>
 8006496:	2300      	movs	r3, #0
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	f002 0203 	and.w	r2, r2, #3
 800649e:	0092      	lsls	r2, r2, #2
 80064a0:	4093      	lsls	r3, r2
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064a8:	4935      	ldr	r1, [pc, #212]	@ (8006580 <HAL_GPIO_Init+0x328>)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	3302      	adds	r3, #2
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064b6:	4b3d      	ldr	r3, [pc, #244]	@ (80065ac <HAL_GPIO_Init+0x354>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064da:	4a34      	ldr	r2, [pc, #208]	@ (80065ac <HAL_GPIO_Init+0x354>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064e0:	4b32      	ldr	r3, [pc, #200]	@ (80065ac <HAL_GPIO_Init+0x354>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <HAL_GPIO_Init+0x354>)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800650a:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <HAL_GPIO_Init+0x354>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	43db      	mvns	r3, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800652e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ac <HAL_GPIO_Init+0x354>)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006534:	4b1d      	ldr	r3, [pc, #116]	@ (80065ac <HAL_GPIO_Init+0x354>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <HAL_GPIO_Init+0x354>)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3301      	adds	r3, #1
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2b0f      	cmp	r3, #15
 8006568:	f67f ae86 	bls.w	8006278 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	3724      	adds	r7, #36	@ 0x24
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800
 8006580:	40013800 	.word	0x40013800
 8006584:	40020000 	.word	0x40020000
 8006588:	40020400 	.word	0x40020400
 800658c:	40020800 	.word	0x40020800
 8006590:	40020c00 	.word	0x40020c00
 8006594:	40021000 	.word	0x40021000
 8006598:	40021400 	.word	0x40021400
 800659c:	40021800 	.word	0x40021800
 80065a0:	40021c00 	.word	0x40021c00
 80065a4:	40022000 	.word	0x40022000
 80065a8:	40022400 	.word	0x40022400
 80065ac:	40013c00 	.word	0x40013c00

080065b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e0d9      	b.n	8006780 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065cc:	2201      	movs	r2, #1
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4013      	ands	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	f040 80c9 	bne.w	800677a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80065e8:	4a6b      	ldr	r2, [pc, #428]	@ (8006798 <HAL_GPIO_DeInit+0x1e8>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	089b      	lsrs	r3, r3, #2
 80065ee:	3302      	adds	r3, #2
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	220f      	movs	r2, #15
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a63      	ldr	r2, [pc, #396]	@ (800679c <HAL_GPIO_DeInit+0x1ec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d037      	beq.n	8006682 <HAL_GPIO_DeInit+0xd2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a62      	ldr	r2, [pc, #392]	@ (80067a0 <HAL_GPIO_DeInit+0x1f0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_GPIO_DeInit+0xce>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a61      	ldr	r2, [pc, #388]	@ (80067a4 <HAL_GPIO_DeInit+0x1f4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02b      	beq.n	800667a <HAL_GPIO_DeInit+0xca>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a60      	ldr	r2, [pc, #384]	@ (80067a8 <HAL_GPIO_DeInit+0x1f8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d025      	beq.n	8006676 <HAL_GPIO_DeInit+0xc6>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a5f      	ldr	r2, [pc, #380]	@ (80067ac <HAL_GPIO_DeInit+0x1fc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01f      	beq.n	8006672 <HAL_GPIO_DeInit+0xc2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a5e      	ldr	r2, [pc, #376]	@ (80067b0 <HAL_GPIO_DeInit+0x200>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d019      	beq.n	800666e <HAL_GPIO_DeInit+0xbe>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a5d      	ldr	r2, [pc, #372]	@ (80067b4 <HAL_GPIO_DeInit+0x204>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_GPIO_DeInit+0xba>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a5c      	ldr	r2, [pc, #368]	@ (80067b8 <HAL_GPIO_DeInit+0x208>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00d      	beq.n	8006666 <HAL_GPIO_DeInit+0xb6>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <HAL_GPIO_DeInit+0x20c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d007      	beq.n	8006662 <HAL_GPIO_DeInit+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a5a      	ldr	r2, [pc, #360]	@ (80067c0 <HAL_GPIO_DeInit+0x210>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <HAL_GPIO_DeInit+0xae>
 800665a:	2309      	movs	r3, #9
 800665c:	e012      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 800665e:	230a      	movs	r3, #10
 8006660:	e010      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 8006662:	2308      	movs	r3, #8
 8006664:	e00e      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 8006666:	2307      	movs	r3, #7
 8006668:	e00c      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 800666a:	2306      	movs	r3, #6
 800666c:	e00a      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 800666e:	2305      	movs	r3, #5
 8006670:	e008      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 8006672:	2304      	movs	r3, #4
 8006674:	e006      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 8006676:	2303      	movs	r3, #3
 8006678:	e004      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 800667a:	2302      	movs	r3, #2
 800667c:	e002      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_GPIO_DeInit+0xd4>
 8006682:	2300      	movs	r3, #0
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	f002 0203 	and.w	r2, r2, #3
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	4093      	lsls	r3, r2
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d132      	bne.n	80066fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006694:	4b4b      	ldr	r3, [pc, #300]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	43db      	mvns	r3, r3
 800669c:	4949      	ldr	r1, [pc, #292]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 800669e:	4013      	ands	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80066a2:	4b48      	ldr	r3, [pc, #288]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	4946      	ldr	r1, [pc, #280]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80066b0:	4b44      	ldr	r3, [pc, #272]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	4942      	ldr	r1, [pc, #264]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066be:	4b41      	ldr	r3, [pc, #260]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	493f      	ldr	r1, [pc, #252]	@ (80067c4 <HAL_GPIO_DeInit+0x214>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	220f      	movs	r2, #15
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80066dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006798 <HAL_GPIO_DeInit+0x1e8>)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	3302      	adds	r3, #2
 80066e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	43da      	mvns	r2, r3
 80066ec:	482a      	ldr	r0, [pc, #168]	@ (8006798 <HAL_GPIO_DeInit+0x1e8>)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	089b      	lsrs	r3, r3, #2
 80066f2:	400a      	ands	r2, r1
 80066f4:	3302      	adds	r3, #2
 80066f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	2103      	movs	r1, #3
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	43db      	mvns	r3, r3
 800670a:	401a      	ands	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	220f      	movs	r2, #15
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	08d2      	lsrs	r2, r2, #3
 8006730:	4019      	ands	r1, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3208      	adds	r2, #8
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2103      	movs	r1, #3
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	401a      	ands	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	2101      	movs	r1, #1
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	401a      	ands	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	2103      	movs	r1, #3
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	401a      	ands	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	3301      	adds	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	f67f af22 	bls.w	80065cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40013800 	.word	0x40013800
 800679c:	40020000 	.word	0x40020000
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40020c00 	.word	0x40020c00
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40021400 	.word	0x40021400
 80067b4:	40021800 	.word	0x40021800
 80067b8:	40021c00 	.word	0x40021c00
 80067bc:	40022000 	.word	0x40022000
 80067c0:	40022400 	.word	0x40022400
 80067c4:	40013c00 	.word	0x40013c00

080067c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	807b      	strh	r3, [r7, #2]
 80067d4:	4613      	mov	r3, r2
 80067d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067d8:	787b      	ldrb	r3, [r7, #1]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80067e4:	e003      	b.n	80067ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80067e6:	887b      	ldrh	r3, [r7, #2]
 80067e8:	041a      	lsls	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	619a      	str	r2, [r3, #24]
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e08b      	b.n	8006926 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fb fd0e 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2224      	movs	r2, #36	@ 0x24
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800684c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800685c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	e006      	b.n	8006884 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006882:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d108      	bne.n	800689e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	e007      	b.n	80068ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6859      	ldr	r1, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006930 <HAL_I2C_Init+0x134>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69d9      	ldr	r1, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	02008000 	.word	0x02008000

08006934 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e021      	b.n	800698a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2224      	movs	r2, #36	@ 0x24
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fb fd18 	bl	8002394 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	817b      	strh	r3, [r7, #10]
 80069a6:	460b      	mov	r3, r1
 80069a8:	813b      	strh	r3, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	f040 80f9 	bne.w	8006bae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_I2C_Mem_Write+0x34>
 80069c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d105      	bne.n	80069d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0ed      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_I2C_Mem_Write+0x4e>
 80069de:	2302      	movs	r3, #2
 80069e0:	e0e6      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069ea:	f7fe fa4b 	bl	8004e84 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2319      	movs	r3, #25
 80069f6:	2201      	movs	r2, #1
 80069f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fad1 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0d1      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2221      	movs	r2, #33	@ 0x21
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a3a      	ldr	r2, [r7, #32]
 8006a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a34:	88f8      	ldrh	r0, [r7, #6]
 8006a36:	893a      	ldrh	r2, [r7, #8]
 8006a38:	8979      	ldrh	r1, [r7, #10]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4603      	mov	r3, r0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f9e1 	bl	8006e0c <I2C_RequestMemoryWrite>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a9      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2bff      	cmp	r3, #255	@ 0xff
 8006a64:	d90e      	bls.n	8006a84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	22ff      	movs	r2, #255	@ 0xff
 8006a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	8979      	ldrh	r1, [r7, #10]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fc55 	bl	800732c <I2C_TransferConfig>
 8006a82:	e00f      	b.n	8006aa4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	8979      	ldrh	r1, [r7, #10]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fc44 	bl	800732c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fad4 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e07b      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d034      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d130      	bne.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	2200      	movs	r2, #0
 8006b02:	2180      	movs	r1, #128	@ 0x80
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fa4d 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e04d      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2bff      	cmp	r3, #255	@ 0xff
 8006b1c:	d90e      	bls.n	8006b3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	22ff      	movs	r2, #255	@ 0xff
 8006b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	8979      	ldrh	r1, [r7, #10]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fbf9 	bl	800732c <I2C_TransferConfig>
 8006b3a:	e00f      	b.n	8006b5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	8979      	ldrh	r1, [r7, #10]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fbe8 	bl	800732c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d19e      	bne.n	8006aa4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 faba 	bl	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e01a      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6859      	ldr	r1, [r3, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <HAL_I2C_Mem_Write+0x224>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	fe00e800 	.word	0xfe00e800

08006bbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	817b      	strh	r3, [r7, #10]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	813b      	strh	r3, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 80fd 	bne.w	8006dde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_I2C_Mem_Read+0x34>
 8006bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0f1      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_I2C_Mem_Read+0x4e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e0ea      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c12:	f7fe f937 	bl	8004e84 <HAL_GetTick>
 8006c16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2319      	movs	r3, #25
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f9bd 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d5      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2222      	movs	r2, #34	@ 0x22
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	@ 0x40
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c5c:	88f8      	ldrh	r0, [r7, #6]
 8006c5e:	893a      	ldrh	r2, [r7, #8]
 8006c60:	8979      	ldrh	r1, [r7, #10]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f921 	bl	8006eb4 <I2C_RequestMemoryRead>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0ad      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	@ 0xff
 8006c8c:	d90e      	bls.n	8006cac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	8979      	ldrh	r1, [r7, #10]
 8006c9c:	4b52      	ldr	r3, [pc, #328]	@ (8006de8 <HAL_I2C_Mem_Read+0x22c>)
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fb41 	bl	800732c <I2C_TransferConfig>
 8006caa:	e00f      	b.n	8006ccc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	8979      	ldrh	r1, [r7, #10]
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <HAL_I2C_Mem_Read+0x22c>)
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fb30 	bl	800732c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2104      	movs	r1, #4
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f964 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e07c      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d034      	beq.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d130      	bne.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	2200      	movs	r2, #0
 8006d32:	2180      	movs	r1, #128	@ 0x80
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f935 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e04d      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2bff      	cmp	r3, #255	@ 0xff
 8006d4c:	d90e      	bls.n	8006d6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	8979      	ldrh	r1, [r7, #10]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fae1 	bl	800732c <I2C_TransferConfig>
 8006d6a:	e00f      	b.n	8006d8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	8979      	ldrh	r1, [r7, #10]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fad0 	bl	800732c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d19a      	bne.n	8006ccc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f9a2 	bl	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e01a      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2220      	movs	r2, #32
 8006db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_I2C_Mem_Read+0x230>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e000      	b.n	8006de0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
  }
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	80002400 	.word	0x80002400
 8006dec:	fe00e800 	.word	0xfe00e800

08006df0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfe:	b2db      	uxtb	r3, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	817b      	strh	r3, [r7, #10]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	813b      	strh	r3, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <I2C_RequestMemoryWrite+0xa4>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa79 	bl	800732c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f909 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e02c      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d105      	bne.n	8006e60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e54:	893b      	ldrh	r3, [r7, #8]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e5e:	e015      	b.n	8006e8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e60:	893b      	ldrh	r3, [r7, #8]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f8ef 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e012      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f884 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	80002000 	.word	0x80002000

08006eb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	817b      	strh	r3, [r7, #10]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	813b      	strh	r3, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	8979      	ldrh	r1, [r7, #10]
 8006ed4:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <I2C_RequestMemoryRead+0xa4>)
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fa26 	bl	800732c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f8b6 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e02c      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f04:	e015      	b.n	8006f32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	0a1b      	lsrs	r3, r3, #8
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f89c 	bl	8007056 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e012      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2140      	movs	r1, #64	@ 0x40
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f831 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	80002000 	.word	0x80002000

08006f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d103      	bne.n	8006f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d007      	beq.n	8006f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	619a      	str	r2, [r3, #24]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb4:	e03b      	b.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f8d6 	bl	800716c <I2C_IsErrorOccurred>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e041      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fd0:	d02d      	beq.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fd ff57 	bl	8004e84 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d122      	bne.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	429a      	cmp	r2, r3
 8007004:	d113      	bne.n	800702e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e00f      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0b4      	beq.n	8006fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007062:	e033      	b.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f87f 	bl	800716c <I2C_IsErrorOccurred>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e031      	b.n	80070dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800707e:	d025      	beq.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007080:	f7fd ff00 	bl	8004e84 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11a      	bne.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d013      	beq.n	80070cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e007      	b.n	80070dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d1c4      	bne.n	8007064 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f0:	e02f      	b.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f838 	bl	800716c <I2C_IsErrorOccurred>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e02d      	b.n	8007162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fd febd 	bl	8004e84 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11a      	bne.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b20      	cmp	r3, #32
 8007128:	d013      	beq.n	8007152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e007      	b.n	8007162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b20      	cmp	r3, #32
 800715e:	d1c8      	bne.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d068      	beq.n	800726a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2210      	movs	r2, #16
 800719e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071a0:	e049      	b.n	8007236 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071a8:	d045      	beq.n	8007236 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fd fe6b 	bl	8004e84 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <I2C_IsErrorOccurred+0x54>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d13a      	bne.n	8007236 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e2:	d121      	bne.n	8007228 <I2C_IsErrorOccurred+0xbc>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071ea:	d01d      	beq.n	8007228 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d01a      	beq.n	8007228 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007200:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007202:	f7fd fe3f 	bl	8004e84 <HAL_GetTick>
 8007206:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007208:	e00e      	b.n	8007228 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800720a:	f7fd fe3b 	bl	8004e84 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b19      	cmp	r3, #25
 8007216:	d907      	bls.n	8007228 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	f043 0320 	orr.w	r3, r3, #32
 800721e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007226:	e006      	b.n	8007236 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d1e9      	bne.n	800720a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d003      	beq.n	800724c <I2C_IsErrorOccurred+0xe0>
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0aa      	beq.n	80071a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2220      	movs	r2, #32
 800725a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	f043 0304 	orr.w	r3, r3, #4
 8007262:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800728c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f043 0308 	orr.w	r3, r3, #8
 80072a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80072ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f043 0302 	orr.w	r3, r3, #2
 80072c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01c      	beq.n	800731a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fe3b 	bl	8006f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <I2C_IsErrorOccurred+0x1bc>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800731a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	@ 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	fe00e800 	.word	0xfe00e800

0800732c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	817b      	strh	r3, [r7, #10]
 800733a:	4613      	mov	r3, r2
 800733c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800733e:	897b      	ldrh	r3, [r7, #10]
 8007340:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007344:	7a7b      	ldrb	r3, [r7, #9]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800734c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	4313      	orrs	r3, r2
 8007356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800735a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	0d5b      	lsrs	r3, r3, #21
 8007366:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800736a:	4b08      	ldr	r3, [pc, #32]	@ (800738c <I2C_TransferConfig+0x60>)
 800736c:	430b      	orrs	r3, r1
 800736e:	43db      	mvns	r3, r3
 8007370:	ea02 0103 	and.w	r1, r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	03ff63ff 	.word	0x03ff63ff

08007390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d138      	bne.n	8007418 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e032      	b.n	800741a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2224      	movs	r2, #36	@ 0x24
 80073c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b20      	cmp	r3, #32
 800743a:	d139      	bne.n	80074b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007446:	2302      	movs	r3, #2
 8007448:	e033      	b.n	80074b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2224      	movs	r2, #36	@ 0x24
 8007456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007478:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e08f      	b.n	80075f0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fb f813 	bl	8002510 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007500:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6999      	ldr	r1, [r3, #24]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007516:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	430a      	orrs	r2, r1
 800753a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a19      	ldr	r1, [r3, #32]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	430a      	orrs	r2, r1
 8007550:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	430a      	orrs	r2, r1
 8007566:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	430a      	orrs	r2, r1
 800757c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80075a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0206 	orr.w	r2, r2, #6
 80075cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d023      	beq.n	8007662 <HAL_LTDC_IRQHandler+0x6a>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01e      	beq.n	8007662 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0204 	bic.w	r2, r2, #4
 8007632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2204      	movs	r2, #4
 800763a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007642:	f043 0201 	orr.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2204      	movs	r2, #4
 8007650:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f86f 	bl	8007740 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d023      	beq.n	80076b4 <HAL_LTDC_IRQHandler+0xbc>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01e      	beq.n	80076b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0202 	bic.w	r2, r2, #2
 8007684:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2202      	movs	r2, #2
 800768c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007694:	f043 0202 	orr.w	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2204      	movs	r2, #4
 80076a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f846 	bl	8007740 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01b      	beq.n	80076f6 <HAL_LTDC_IRQHandler+0xfe>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d016      	beq.n	80076f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2201      	movs	r2, #1
 80076de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f82f 	bl	8007754 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <HAL_LTDC_IRQHandler+0x140>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d016      	beq.n	8007738 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0208 	bic.w	r2, r2, #8
 8007718:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2208      	movs	r2, #8
 8007720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f818 	bl	8007768 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800777c:	b5b0      	push	{r4, r5, r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_LTDC_ConfigLayer+0x1a>
 8007792:	2302      	movs	r3, #2
 8007794:	e02c      	b.n	80077f0 <HAL_LTDC_ConfigLayer+0x74>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2134      	movs	r1, #52	@ 0x34
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	4413      	add	r3, r2
 80077b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4614      	mov	r4, r2
 80077ba:	461d      	mov	r5, r3
 80077bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f81f 	bl	8007814 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2201      	movs	r2, #1
 80077dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bdb0      	pop	{r4, r5, r7, pc}

080077f8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(const LTDC_HandleTypeDef *hltdc)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007806:	b2db      	uxtb	r3, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007814:	b480      	push	{r7}
 8007816:	b089      	sub	sp, #36	@ 0x24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	0c1b      	lsrs	r3, r3, #16
 800782c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007830:	4413      	add	r3, r2
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	01db      	lsls	r3, r3, #7
 8007840:	4413      	add	r3, r2
 8007842:	3384      	adds	r3, #132	@ 0x84
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	4611      	mov	r1, r2
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	01d2      	lsls	r2, r2, #7
 8007850:	440a      	add	r2, r1
 8007852:	3284      	adds	r2, #132	@ 0x84
 8007854:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007858:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800786a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800786c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	01db      	lsls	r3, r3, #7
 8007878:	440b      	add	r3, r1
 800787a:	3384      	adds	r3, #132	@ 0x84
 800787c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007882:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007892:	4413      	add	r3, r2
 8007894:	041b      	lsls	r3, r3, #16
 8007896:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	01db      	lsls	r3, r3, #7
 80078a2:	4413      	add	r3, r2
 80078a4:	3384      	adds	r3, #132	@ 0x84
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	4611      	mov	r1, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	01d2      	lsls	r2, r2, #7
 80078b2:	440a      	add	r2, r1
 80078b4:	3284      	adds	r2, #132	@ 0x84
 80078b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80078ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ca:	4413      	add	r3, r2
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4619      	mov	r1, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	01db      	lsls	r3, r3, #7
 80078d8:	440b      	add	r3, r1
 80078da:	3384      	adds	r3, #132	@ 0x84
 80078dc:	4619      	mov	r1, r3
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	01db      	lsls	r3, r3, #7
 80078ee:	4413      	add	r3, r2
 80078f0:	3384      	adds	r3, #132	@ 0x84
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	6812      	ldr	r2, [r2, #0]
 80078f8:	4611      	mov	r1, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	01d2      	lsls	r2, r2, #7
 80078fe:	440a      	add	r2, r1
 8007900:	3284      	adds	r2, #132	@ 0x84
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	01db      	lsls	r3, r3, #7
 8007912:	4413      	add	r3, r2
 8007914:	3384      	adds	r3, #132	@ 0x84
 8007916:	461a      	mov	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	061b      	lsls	r3, r3, #24
 8007938:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007940:	461a      	mov	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	431a      	orrs	r2, r3
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4619      	mov	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	01db      	lsls	r3, r3, #7
 8007954:	440b      	add	r3, r1
 8007956:	3384      	adds	r3, #132	@ 0x84
 8007958:	4619      	mov	r1, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	01db      	lsls	r3, r3, #7
 800796a:	4413      	add	r3, r2
 800796c:	3384      	adds	r3, #132	@ 0x84
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	4611      	mov	r1, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	01d2      	lsls	r2, r2, #7
 800797a:	440a      	add	r2, r1
 800797c:	3284      	adds	r2, #132	@ 0x84
 800797e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007982:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	01db      	lsls	r3, r3, #7
 800798e:	4413      	add	r3, r2
 8007990:	3384      	adds	r3, #132	@ 0x84
 8007992:	461a      	mov	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	01db      	lsls	r3, r3, #7
 80079a4:	4413      	add	r3, r2
 80079a6:	3384      	adds	r3, #132	@ 0x84
 80079a8:	69da      	ldr	r2, [r3, #28]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	01db      	lsls	r3, r3, #7
 80079b4:	440b      	add	r3, r1
 80079b6:	3384      	adds	r3, #132	@ 0x84
 80079b8:	4619      	mov	r1, r3
 80079ba:	4b4f      	ldr	r3, [pc, #316]	@ (8007af8 <LTDC_SetConfig+0x2e4>)
 80079bc:	4013      	ands	r3, r2
 80079be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	68f9      	ldr	r1, [r7, #12]
 80079ca:	6809      	ldr	r1, [r1, #0]
 80079cc:	4608      	mov	r0, r1
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	01c9      	lsls	r1, r1, #7
 80079d2:	4401      	add	r1, r0
 80079d4:	3184      	adds	r1, #132	@ 0x84
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	01db      	lsls	r3, r3, #7
 80079e4:	4413      	add	r3, r2
 80079e6:	3384      	adds	r3, #132	@ 0x84
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80079f8:	2304      	movs	r3, #4
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e01b      	b.n	8007a36 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d102      	bne.n	8007a0c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8007a06:	2303      	movs	r3, #3
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	e014      	b.n	8007a36 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d00b      	beq.n	8007a2c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d007      	beq.n	8007a2c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d003      	beq.n	8007a2c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	d102      	bne.n	8007a32 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e001      	b.n	8007a36 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	01db      	lsls	r3, r3, #7
 8007a40:	4413      	add	r3, r2
 8007a42:	3384      	adds	r3, #132	@ 0x84
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	01d2      	lsls	r2, r2, #7
 8007a50:	440a      	add	r2, r1
 8007a52:	3284      	adds	r2, #132	@ 0x84
 8007a54:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	fb02 f303 	mul.w	r3, r2, r3
 8007a64:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	1acb      	subs	r3, r1, r3
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a78:	68f9      	ldr	r1, [r7, #12]
 8007a7a:	6809      	ldr	r1, [r1, #0]
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	01c9      	lsls	r1, r1, #7
 8007a82:	4401      	add	r1, r0
 8007a84:	3184      	adds	r1, #132	@ 0x84
 8007a86:	4313      	orrs	r3, r2
 8007a88:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	4413      	add	r3, r2
 8007a96:	3384      	adds	r3, #132	@ 0x84
 8007a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	01db      	lsls	r3, r3, #7
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3384      	adds	r3, #132	@ 0x84
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4b14      	ldr	r3, [pc, #80]	@ (8007afc <LTDC_SetConfig+0x2e8>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	01db      	lsls	r3, r3, #7
 8007aba:	4413      	add	r3, r2
 8007abc:	3384      	adds	r3, #132	@ 0x84
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	01db      	lsls	r3, r3, #7
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3384      	adds	r3, #132	@ 0x84
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	4611      	mov	r1, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	01d2      	lsls	r2, r2, #7
 8007ae0:	440a      	add	r2, r1
 8007ae2:	3284      	adds	r2, #132	@ 0x84
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	6013      	str	r3, [r2, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3724      	adds	r7, #36	@ 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	fffff8f8 	.word	0xfffff8f8
 8007afc:	fffff800 	.word	0xfffff800

08007b00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b04:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a04      	ldr	r2, [pc, #16]	@ (8007b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b0e:	6013      	str	r3, [r2, #0]
}
 8007b10:	bf00      	nop
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40007000 	.word	0x40007000

08007b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b2a:	4b23      	ldr	r3, [pc, #140]	@ (8007bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	4a22      	ldr	r2, [pc, #136]	@ (8007bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b36:	4b20      	ldr	r3, [pc, #128]	@ (8007bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b42:	4b1e      	ldr	r3, [pc, #120]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1d      	ldr	r2, [pc, #116]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b4e:	f7fd f999 	bl	8004e84 <HAL_GetTick>
 8007b52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b54:	e009      	b.n	8007b6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b56:	f7fd f995 	bl	8004e84 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b64:	d901      	bls.n	8007b6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e022      	b.n	8007bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b6a:	4b14      	ldr	r3, [pc, #80]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b76:	d1ee      	bne.n	8007b56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b78:	4b10      	ldr	r3, [pc, #64]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b84:	f7fd f97e 	bl	8004e84 <HAL_GetTick>
 8007b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b8a:	e009      	b.n	8007ba0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b8c:	f7fd f97a 	bl	8004e84 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b9a:	d901      	bls.n	8007ba0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e007      	b.n	8007bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bac:	d1ee      	bne.n	8007b8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	40007000 	.word	0x40007000

08007bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e291      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8087 	beq.w	8007cf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007be4:	4b96      	ldr	r3, [pc, #600]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 030c 	and.w	r3, r3, #12
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d00c      	beq.n	8007c0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bf0:	4b93      	ldr	r3, [pc, #588]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d112      	bne.n	8007c22 <HAL_RCC_OscConfig+0x62>
 8007bfc:	4b90      	ldr	r3, [pc, #576]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c08:	d10b      	bne.n	8007c22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d06c      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x130>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d168      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e26b      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c2a:	d106      	bne.n	8007c3a <HAL_RCC_OscConfig+0x7a>
 8007c2c:	4b84      	ldr	r3, [pc, #528]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a83      	ldr	r2, [pc, #524]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e02e      	b.n	8007c98 <HAL_RCC_OscConfig+0xd8>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10c      	bne.n	8007c5c <HAL_RCC_OscConfig+0x9c>
 8007c42:	4b7f      	ldr	r3, [pc, #508]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a7e      	ldr	r2, [pc, #504]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a7b      	ldr	r2, [pc, #492]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e01d      	b.n	8007c98 <HAL_RCC_OscConfig+0xd8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c64:	d10c      	bne.n	8007c80 <HAL_RCC_OscConfig+0xc0>
 8007c66:	4b76      	ldr	r3, [pc, #472]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a75      	ldr	r2, [pc, #468]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b73      	ldr	r3, [pc, #460]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a72      	ldr	r2, [pc, #456]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e00b      	b.n	8007c98 <HAL_RCC_OscConfig+0xd8>
 8007c80:	4b6f      	ldr	r3, [pc, #444]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a6e      	ldr	r2, [pc, #440]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a6b      	ldr	r2, [pc, #428]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fd f8f0 	bl	8004e84 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca8:	f7fd f8ec 	bl	8004e84 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	@ 0x64
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e21f      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cba:	4b61      	ldr	r3, [pc, #388]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0xe8>
 8007cc6:	e014      	b.n	8007cf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7fd f8dc 	bl	8004e84 <HAL_GetTick>
 8007ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cd0:	f7fd f8d8 	bl	8004e84 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b64      	cmp	r3, #100	@ 0x64
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e20b      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ce2:	4b57      	ldr	r3, [pc, #348]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x110>
 8007cee:	e000      	b.n	8007cf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d069      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cfe:	4b50      	ldr	r3, [pc, #320]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 030c 	and.w	r3, r3, #12
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d11c      	bne.n	8007d50 <HAL_RCC_OscConfig+0x190>
 8007d16:	4b4a      	ldr	r3, [pc, #296]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d116      	bne.n	8007d50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d22:	4b47      	ldr	r3, [pc, #284]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_RCC_OscConfig+0x17a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d001      	beq.n	8007d3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e1df      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3a:	4b41      	ldr	r3, [pc, #260]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	493d      	ldr	r1, [pc, #244]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d4e:	e040      	b.n	8007dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d023      	beq.n	8007da0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d58:	4b39      	ldr	r3, [pc, #228]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a38      	ldr	r2, [pc, #224]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fd f88e 	bl	8004e84 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d6c:	f7fd f88a 	bl	8004e84 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e1bd      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7e:	4b30      	ldr	r3, [pc, #192]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4929      	ldr	r1, [pc, #164]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	600b      	str	r3, [r1, #0]
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007da0:	4b27      	ldr	r3, [pc, #156]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a26      	ldr	r2, [pc, #152]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dac:	f7fd f86a 	bl	8004e84 <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db4:	f7fd f866 	bl	8004e84 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e199      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d038      	beq.n	8007e50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d019      	beq.n	8007e1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007de6:	4b16      	ldr	r3, [pc, #88]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dea:	4a15      	ldr	r2, [pc, #84]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df2:	f7fd f847 	bl	8004e84 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfa:	f7fd f843 	bl	8004e84 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e176      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <HAL_RCC_OscConfig+0x23a>
 8007e18:	e01a      	b.n	8007e50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e1a:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1e:	4a08      	ldr	r2, [pc, #32]	@ (8007e40 <HAL_RCC_OscConfig+0x280>)
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e26:	f7fd f82d 	bl	8004e84 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e2c:	e00a      	b.n	8007e44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e2e:	f7fd f829 	bl	8004e84 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d903      	bls.n	8007e44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e15c      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
 8007e40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e44:	4b91      	ldr	r3, [pc, #580]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1ee      	bne.n	8007e2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80a4 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10d      	bne.n	8007e86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e6a:	4b88      	ldr	r3, [pc, #544]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6e:	4a87      	ldr	r2, [pc, #540]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e76:	4b85      	ldr	r3, [pc, #532]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e7e:	60bb      	str	r3, [r7, #8]
 8007e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e86:	4b82      	ldr	r3, [pc, #520]	@ (8008090 <HAL_RCC_OscConfig+0x4d0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d118      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e92:	4b7f      	ldr	r3, [pc, #508]	@ (8008090 <HAL_RCC_OscConfig+0x4d0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7e      	ldr	r2, [pc, #504]	@ (8008090 <HAL_RCC_OscConfig+0x4d0>)
 8007e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e9e:	f7fc fff1 	bl	8004e84 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ea6:	f7fc ffed 	bl	8004e84 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b64      	cmp	r3, #100	@ 0x64
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e120      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eb8:	4b75      	ldr	r3, [pc, #468]	@ (8008090 <HAL_RCC_OscConfig+0x4d0>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d106      	bne.n	8007eda <HAL_RCC_OscConfig+0x31a>
 8007ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ed8:	e02d      	b.n	8007f36 <HAL_RCC_OscConfig+0x376>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCC_OscConfig+0x33c>
 8007ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee6:	4a69      	ldr	r2, [pc, #420]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eee:	4b67      	ldr	r3, [pc, #412]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef2:	4a66      	ldr	r2, [pc, #408]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007ef4:	f023 0304 	bic.w	r3, r3, #4
 8007ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007efa:	e01c      	b.n	8007f36 <HAL_RCC_OscConfig+0x376>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b05      	cmp	r3, #5
 8007f02:	d10c      	bne.n	8007f1e <HAL_RCC_OscConfig+0x35e>
 8007f04:	4b61      	ldr	r3, [pc, #388]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f08:	4a60      	ldr	r2, [pc, #384]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f0a:	f043 0304 	orr.w	r3, r3, #4
 8007f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f10:	4b5e      	ldr	r3, [pc, #376]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f14:	4a5d      	ldr	r2, [pc, #372]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1c:	e00b      	b.n	8007f36 <HAL_RCC_OscConfig+0x376>
 8007f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a5a      	ldr	r2, [pc, #360]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2a:	4b58      	ldr	r3, [pc, #352]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	4a57      	ldr	r2, [pc, #348]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f30:	f023 0304 	bic.w	r3, r3, #4
 8007f34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d015      	beq.n	8007f6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3e:	f7fc ffa1 	bl	8004e84 <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f44:	e00a      	b.n	8007f5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f46:	f7fc ff9d 	bl	8004e84 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e0ce      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0ee      	beq.n	8007f46 <HAL_RCC_OscConfig+0x386>
 8007f68:	e014      	b.n	8007f94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f6a:	f7fc ff8b 	bl	8004e84 <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fc ff87 	bl	8004e84 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e0b8      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f88:	4b40      	ldr	r3, [pc, #256]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1ee      	bne.n	8007f72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d105      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80a4 	beq.w	80080f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fb0:	4b36      	ldr	r3, [pc, #216]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 030c 	and.w	r3, r3, #12
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d06b      	beq.n	8008094 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d149      	bne.n	8008058 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc4:	4b31      	ldr	r3, [pc, #196]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a30      	ldr	r2, [pc, #192]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd0:	f7fc ff58 	bl	8004e84 <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd6:	e008      	b.n	8007fea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd8:	f7fc ff54 	bl	8004e84 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e087      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fea:	4b28      	ldr	r3, [pc, #160]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f0      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69da      	ldr	r2, [r3, #28]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	019b      	lsls	r3, r3, #6
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	3b01      	subs	r3, #1
 8008010:	041b      	lsls	r3, r3, #16
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	061b      	lsls	r3, r3, #24
 800801a:	4313      	orrs	r3, r2
 800801c:	4a1b      	ldr	r2, [pc, #108]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 800801e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008022:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008024:	4b19      	ldr	r3, [pc, #100]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a18      	ldr	r2, [pc, #96]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 800802a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800802e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008030:	f7fc ff28 	bl	8004e84 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008038:	f7fc ff24 	bl	8004e84 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e057      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800804a:	4b10      	ldr	r3, [pc, #64]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f0      	beq.n	8008038 <HAL_RCC_OscConfig+0x478>
 8008056:	e04f      	b.n	80080f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008058:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a0b      	ldr	r2, [pc, #44]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 800805e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fc ff0e 	bl	8004e84 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806c:	f7fc ff0a 	bl	8004e84 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e03d      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	4b03      	ldr	r3, [pc, #12]	@ (800808c <HAL_RCC_OscConfig+0x4cc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f0      	bne.n	800806c <HAL_RCC_OscConfig+0x4ac>
 800808a:	e035      	b.n	80080f8 <HAL_RCC_OscConfig+0x538>
 800808c:	40023800 	.word	0x40023800
 8008090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008094:	4b1b      	ldr	r3, [pc, #108]	@ (8008104 <HAL_RCC_OscConfig+0x544>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d028      	beq.n	80080f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d121      	bne.n	80080f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d11a      	bne.n	80080f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080c4:	4013      	ands	r3, r2
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d111      	bne.n	80080f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	3b01      	subs	r3, #1
 80080de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d107      	bne.n	80080f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d001      	beq.n	80080f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800

08008108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0d0      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008120:	4b6a      	ldr	r3, [pc, #424]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d910      	bls.n	8008150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812e:	4b67      	ldr	r3, [pc, #412]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 020f 	bic.w	r2, r3, #15
 8008136:	4965      	ldr	r1, [pc, #404]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800813e:	4b63      	ldr	r3, [pc, #396]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d001      	beq.n	8008150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0b8      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d020      	beq.n	800819e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008168:	4b59      	ldr	r3, [pc, #356]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4a58      	ldr	r2, [pc, #352]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800816e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008180:	4b53      	ldr	r3, [pc, #332]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	4a52      	ldr	r2, [pc, #328]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800818a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800818c:	4b50      	ldr	r3, [pc, #320]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	494d      	ldr	r1, [pc, #308]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800819a:	4313      	orrs	r3, r2
 800819c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d040      	beq.n	800822c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d107      	bne.n	80081c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081b2:	4b47      	ldr	r3, [pc, #284]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d115      	bne.n	80081ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e07f      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d107      	bne.n	80081da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ca:	4b41      	ldr	r3, [pc, #260]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e073      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081da:	4b3d      	ldr	r3, [pc, #244]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e06b      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081ea:	4b39      	ldr	r3, [pc, #228]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f023 0203 	bic.w	r2, r3, #3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	4936      	ldr	r1, [pc, #216]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081fc:	f7fc fe42 	bl	8004e84 <HAL_GetTick>
 8008200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008202:	e00a      	b.n	800821a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008204:	f7fc fe3e 	bl	8004e84 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008212:	4293      	cmp	r3, r2
 8008214:	d901      	bls.n	800821a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e053      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800821a:	4b2d      	ldr	r3, [pc, #180]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 020c 	and.w	r2, r3, #12
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	429a      	cmp	r2, r3
 800822a:	d1eb      	bne.n	8008204 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800822c:	4b27      	ldr	r3, [pc, #156]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d210      	bcs.n	800825c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823a:	4b24      	ldr	r3, [pc, #144]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f023 020f 	bic.w	r2, r3, #15
 8008242:	4922      	ldr	r1, [pc, #136]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	4313      	orrs	r3, r2
 8008248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800824a:	4b20      	ldr	r3, [pc, #128]	@ (80082cc <HAL_RCC_ClockConfig+0x1c4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d001      	beq.n	800825c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e032      	b.n	80082c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008268:	4b19      	ldr	r3, [pc, #100]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	4916      	ldr	r1, [pc, #88]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008276:	4313      	orrs	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008286:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	490e      	ldr	r1, [pc, #56]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 8008296:	4313      	orrs	r3, r2
 8008298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800829a:	f000 f821 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 800829e:	4602      	mov	r2, r0
 80082a0:	4b0b      	ldr	r3, [pc, #44]	@ (80082d0 <HAL_RCC_ClockConfig+0x1c8>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	490a      	ldr	r1, [pc, #40]	@ (80082d4 <HAL_RCC_ClockConfig+0x1cc>)
 80082ac:	5ccb      	ldrb	r3, [r1, r3]
 80082ae:	fa22 f303 	lsr.w	r3, r2, r3
 80082b2:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <HAL_RCC_ClockConfig+0x1d0>)
 80082b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082b6:	4b09      	ldr	r3, [pc, #36]	@ (80082dc <HAL_RCC_ClockConfig+0x1d4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fc f904 	bl	80044c8 <HAL_InitTick>

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40023c00 	.word	0x40023c00
 80082d0:	40023800 	.word	0x40023800
 80082d4:	0804f000 	.word	0x0804f000
 80082d8:	2000003c 	.word	0x2000003c
 80082dc:	20000040 	.word	0x20000040

080082e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e4:	b090      	sub	sp, #64	@ 0x40
 80082e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f0:	2300      	movs	r3, #0
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082f8:	4b59      	ldr	r3, [pc, #356]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 030c 	and.w	r3, r3, #12
 8008300:	2b08      	cmp	r3, #8
 8008302:	d00d      	beq.n	8008320 <HAL_RCC_GetSysClockFreq+0x40>
 8008304:	2b08      	cmp	r3, #8
 8008306:	f200 80a1 	bhi.w	800844c <HAL_RCC_GetSysClockFreq+0x16c>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_RCC_GetSysClockFreq+0x34>
 800830e:	2b04      	cmp	r3, #4
 8008310:	d003      	beq.n	800831a <HAL_RCC_GetSysClockFreq+0x3a>
 8008312:	e09b      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008314:	4b53      	ldr	r3, [pc, #332]	@ (8008464 <HAL_RCC_GetSysClockFreq+0x184>)
 8008316:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008318:	e09b      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800831a:	4b53      	ldr	r3, [pc, #332]	@ (8008468 <HAL_RCC_GetSysClockFreq+0x188>)
 800831c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800831e:	e098      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008320:	4b4f      	ldr	r3, [pc, #316]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800832a:	4b4d      	ldr	r3, [pc, #308]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d028      	beq.n	8008388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008336:	4b4a      	ldr	r3, [pc, #296]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	099b      	lsrs	r3, r3, #6
 800833c:	2200      	movs	r2, #0
 800833e:	623b      	str	r3, [r7, #32]
 8008340:	627a      	str	r2, [r7, #36]	@ 0x24
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008348:	2100      	movs	r1, #0
 800834a:	4b47      	ldr	r3, [pc, #284]	@ (8008468 <HAL_RCC_GetSysClockFreq+0x188>)
 800834c:	fb03 f201 	mul.w	r2, r3, r1
 8008350:	2300      	movs	r3, #0
 8008352:	fb00 f303 	mul.w	r3, r0, r3
 8008356:	4413      	add	r3, r2
 8008358:	4a43      	ldr	r2, [pc, #268]	@ (8008468 <HAL_RCC_GetSysClockFreq+0x188>)
 800835a:	fba0 1202 	umull	r1, r2, r0, r2
 800835e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008360:	460a      	mov	r2, r1
 8008362:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008366:	4413      	add	r3, r2
 8008368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	2200      	movs	r2, #0
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	61fa      	str	r2, [r7, #28]
 8008372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800837a:	f7f8 fa4f 	bl	800081c <__aeabi_uldivmod>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4613      	mov	r3, r2
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008386:	e053      	b.n	8008430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008388:	4b35      	ldr	r3, [pc, #212]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	099b      	lsrs	r3, r3, #6
 800838e:	2200      	movs	r2, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	617a      	str	r2, [r7, #20]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800839a:	f04f 0b00 	mov.w	fp, #0
 800839e:	4652      	mov	r2, sl
 80083a0:	465b      	mov	r3, fp
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f04f 0100 	mov.w	r1, #0
 80083aa:	0159      	lsls	r1, r3, #5
 80083ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083b0:	0150      	lsls	r0, r2, #5
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	ebb2 080a 	subs.w	r8, r2, sl
 80083ba:	eb63 090b 	sbc.w	r9, r3, fp
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80083ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80083ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80083d2:	ebb2 0408 	subs.w	r4, r2, r8
 80083d6:	eb63 0509 	sbc.w	r5, r3, r9
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	00eb      	lsls	r3, r5, #3
 80083e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083e8:	00e2      	lsls	r2, r4, #3
 80083ea:	4614      	mov	r4, r2
 80083ec:	461d      	mov	r5, r3
 80083ee:	eb14 030a 	adds.w	r3, r4, sl
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	eb45 030b 	adc.w	r3, r5, fp
 80083f8:	607b      	str	r3, [r7, #4]
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008406:	4629      	mov	r1, r5
 8008408:	028b      	lsls	r3, r1, #10
 800840a:	4621      	mov	r1, r4
 800840c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008410:	4621      	mov	r1, r4
 8008412:	028a      	lsls	r2, r1, #10
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841a:	2200      	movs	r2, #0
 800841c:	60bb      	str	r3, [r7, #8]
 800841e:	60fa      	str	r2, [r7, #12]
 8008420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008424:	f7f8 f9fa 	bl	800081c <__aeabi_uldivmod>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4613      	mov	r3, r2
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008430:	4b0b      	ldr	r3, [pc, #44]	@ (8008460 <HAL_RCC_GetSysClockFreq+0x180>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	3301      	adds	r3, #1
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800844a:	e002      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800844c:	4b05      	ldr	r3, [pc, #20]	@ (8008464 <HAL_RCC_GetSysClockFreq+0x184>)
 800844e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008454:	4618      	mov	r0, r3
 8008456:	3740      	adds	r7, #64	@ 0x40
 8008458:	46bd      	mov	sp, r7
 800845a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800845e:	bf00      	nop
 8008460:	40023800 	.word	0x40023800
 8008464:	00f42400 	.word	0x00f42400
 8008468:	017d7840 	.word	0x017d7840

0800846c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008470:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <HAL_RCC_GetHCLKFreq+0x14>)
 8008472:	681b      	ldr	r3, [r3, #0]
}
 8008474:	4618      	mov	r0, r3
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	2000003c 	.word	0x2000003c

08008484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008488:	f7ff fff0 	bl	800846c <HAL_RCC_GetHCLKFreq>
 800848c:	4602      	mov	r2, r0
 800848e:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	0a9b      	lsrs	r3, r3, #10
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	4903      	ldr	r1, [pc, #12]	@ (80084a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800849a:	5ccb      	ldrb	r3, [r1, r3]
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40023800 	.word	0x40023800
 80084a8:	0804f010 	.word	0x0804f010

080084ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80084b0:	f7ff ffdc 	bl	800846c <HAL_RCC_GetHCLKFreq>
 80084b4:	4602      	mov	r2, r0
 80084b6:	4b05      	ldr	r3, [pc, #20]	@ (80084cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	0b5b      	lsrs	r3, r3, #13
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	4903      	ldr	r1, [pc, #12]	@ (80084d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084c2:	5ccb      	ldrb	r3, [r1, r3]
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40023800 	.word	0x40023800
 80084d0:	0804f010 	.word	0x0804f010

080084d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220f      	movs	r2, #15
 80084e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084e4:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <HAL_RCC_GetClockConfig+0x5c>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0203 	and.w	r2, r3, #3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008530 <HAL_RCC_GetClockConfig+0x5c>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <HAL_RCC_GetClockConfig+0x5c>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008508:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <HAL_RCC_GetClockConfig+0x5c>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008516:	4b07      	ldr	r3, [pc, #28]	@ (8008534 <HAL_RCC_GetClockConfig+0x60>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	601a      	str	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	40023800 	.word	0x40023800
 8008534:	40023c00 	.word	0x40023c00

08008538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d012      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008560:	4b69      	ldr	r3, [pc, #420]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	4a68      	ldr	r2, [pc, #416]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008566:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800856a:	6093      	str	r3, [r2, #8]
 800856c:	4b66      	ldr	r3, [pc, #408]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008574:	4964      	ldr	r1, [pc, #400]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008582:	2301      	movs	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d017      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008592:	4b5d      	ldr	r3, [pc, #372]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008598:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	4959      	ldr	r1, [pc, #356]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085b0:	d101      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80085b2:	2301      	movs	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80085be:	2301      	movs	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d017      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085dc:	494a      	ldr	r1, [pc, #296]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085ec:	d101      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80085ee:	2301      	movs	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 808b 	beq.w	8008732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800861c:	4b3a      	ldr	r3, [pc, #232]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008620:	4a39      	ldr	r2, [pc, #228]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008626:	6413      	str	r3, [r2, #64]	@ 0x40
 8008628:	4b37      	ldr	r3, [pc, #220]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008634:	4b35      	ldr	r3, [pc, #212]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a34      	ldr	r2, [pc, #208]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800863a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800863e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008640:	f7fc fc20 	bl	8004e84 <HAL_GetTick>
 8008644:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008646:	e008      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008648:	f7fc fc1c 	bl	8004e84 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b64      	cmp	r3, #100	@ 0x64
 8008654:	d901      	bls.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e357      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800865a:	4b2c      	ldr	r3, [pc, #176]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f0      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008666:	4b28      	ldr	r3, [pc, #160]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d035      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	429a      	cmp	r2, r3
 8008682:	d02e      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008684:	4b20      	ldr	r3, [pc, #128]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800868e:	4b1e      	ldr	r3, [pc, #120]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008692:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008698:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800869a:	4b1b      	ldr	r3, [pc, #108]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869e:	4a1a      	ldr	r2, [pc, #104]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086a6:	4a18      	ldr	r2, [pc, #96]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086ac:	4b16      	ldr	r3, [pc, #88]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d114      	bne.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b8:	f7fc fbe4 	bl	8004e84 <HAL_GetTick>
 80086bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086be:	e00a      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c0:	f7fc fbe0 	bl	8004e84 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e319      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0ee      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ee:	d111      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80086fc:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086fe:	400b      	ands	r3, r1
 8008700:	4901      	ldr	r1, [pc, #4]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008702:	4313      	orrs	r3, r2
 8008704:	608b      	str	r3, [r1, #8]
 8008706:	e00b      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008708:	40023800 	.word	0x40023800
 800870c:	40007000 	.word	0x40007000
 8008710:	0ffffcff 	.word	0x0ffffcff
 8008714:	4baa      	ldr	r3, [pc, #680]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	4aa9      	ldr	r2, [pc, #676]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800871e:	6093      	str	r3, [r2, #8]
 8008720:	4ba7      	ldr	r3, [pc, #668]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008722:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800872c:	49a4      	ldr	r1, [pc, #656]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872e:	4313      	orrs	r3, r2
 8008730:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800873e:	4ba0      	ldr	r3, [pc, #640]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008744:	4a9e      	ldr	r2, [pc, #632]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800874a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800874e:	4b9c      	ldr	r3, [pc, #624]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008750:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008758:	4999      	ldr	r1, [pc, #612]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800876c:	4b94      	ldr	r3, [pc, #592]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008772:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877a:	4991      	ldr	r1, [pc, #580]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877c:	4313      	orrs	r3, r2
 800877e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800878e:	4b8c      	ldr	r3, [pc, #560]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800879c:	4988      	ldr	r1, [pc, #544]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00a      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087b0:	4b83      	ldr	r3, [pc, #524]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087be:	4980      	ldr	r1, [pc, #512]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087d2:	4b7b      	ldr	r3, [pc, #492]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e0:	4977      	ldr	r1, [pc, #476]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00a      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087f4:	4b72      	ldr	r3, [pc, #456]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087fa:	f023 0203 	bic.w	r2, r3, #3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008802:	496f      	ldr	r1, [pc, #444]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008816:	4b6a      	ldr	r3, [pc, #424]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881c:	f023 020c 	bic.w	r2, r3, #12
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008824:	4966      	ldr	r1, [pc, #408]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008838:	4b61      	ldr	r3, [pc, #388]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008846:	495e      	ldr	r1, [pc, #376]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008848:	4313      	orrs	r3, r2
 800884a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800885a:	4b59      	ldr	r3, [pc, #356]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008860:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008868:	4955      	ldr	r1, [pc, #340]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00a      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800887c:	4b50      	ldr	r3, [pc, #320]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800887e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008882:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	494d      	ldr	r1, [pc, #308]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800888c:	4313      	orrs	r3, r2
 800888e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800889e:	4b48      	ldr	r3, [pc, #288]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ac:	4944      	ldr	r1, [pc, #272]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80088c0:	4b3f      	ldr	r3, [pc, #252]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ce:	493c      	ldr	r1, [pc, #240]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088e2:	4b37      	ldr	r3, [pc, #220]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f0:	4933      	ldr	r1, [pc, #204]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008904:	4b2e      	ldr	r3, [pc, #184]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008912:	492b      	ldr	r1, [pc, #172]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008914:	4313      	orrs	r3, r2
 8008916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008926:	4b26      	ldr	r3, [pc, #152]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800892c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008934:	4922      	ldr	r1, [pc, #136]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008944:	d101      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008946:	2301      	movs	r3, #1
 8008948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008966:	4b16      	ldr	r3, [pc, #88]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008974:	4912      	ldr	r1, [pc, #72]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008988:	4b0d      	ldr	r3, [pc, #52]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008998:	4909      	ldr	r1, [pc, #36]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d006      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80d9 	beq.w	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089b4:	4b02      	ldr	r3, [pc, #8]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a01      	ldr	r2, [pc, #4]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089be:	e001      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80089c0:	40023800 	.word	0x40023800
 80089c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c6:	f7fc fa5d 	bl	8004e84 <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089cc:	e008      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089ce:	f7fc fa59 	bl	8004e84 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b64      	cmp	r3, #100	@ 0x64
 80089da:	d901      	bls.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e194      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f0      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d021      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d11d      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a00:	4b64      	ldr	r3, [pc, #400]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a06:	0c1b      	lsrs	r3, r3, #16
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a0e:	4b61      	ldr	r3, [pc, #388]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a14:	0e1b      	lsrs	r3, r3, #24
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	019a      	lsls	r2, r3, #6
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	431a      	orrs	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	061b      	lsls	r3, r3, #24
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	071b      	lsls	r3, r3, #28
 8008a34:	4957      	ldr	r1, [pc, #348]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d004      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a50:	d00a      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d02e      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a66:	d129      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a68:	4b4a      	ldr	r3, [pc, #296]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a6e:	0c1b      	lsrs	r3, r3, #16
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a76:	4b47      	ldr	r3, [pc, #284]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a7c:	0f1b      	lsrs	r3, r3, #28
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	019a      	lsls	r2, r3, #6
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	041b      	lsls	r3, r3, #16
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	061b      	lsls	r3, r3, #24
 8008a96:	431a      	orrs	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	071b      	lsls	r3, r3, #28
 8008a9c:	493d      	ldr	r1, [pc, #244]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aaa:	f023 021f 	bic.w	r2, r3, #31
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	4937      	ldr	r1, [pc, #220]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01d      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ac8:	4b32      	ldr	r3, [pc, #200]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ace:	0e1b      	lsrs	r3, r3, #24
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008adc:	0f1b      	lsrs	r3, r3, #28
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	019a      	lsls	r2, r3, #6
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	041b      	lsls	r3, r3, #16
 8008af0:	431a      	orrs	r2, r3
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	061b      	lsls	r3, r3, #24
 8008af6:	431a      	orrs	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	071b      	lsls	r3, r3, #28
 8008afc:	4925      	ldr	r1, [pc, #148]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d011      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	019a      	lsls	r2, r3, #6
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	041b      	lsls	r3, r3, #16
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	061b      	lsls	r3, r3, #24
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	071b      	lsls	r3, r3, #28
 8008b2c:	4919      	ldr	r1, [pc, #100]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b34:	4b17      	ldr	r3, [pc, #92]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a16      	ldr	r2, [pc, #88]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b40:	f7fc f9a0 	bl	8004e84 <HAL_GetTick>
 8008b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b46:	e008      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b48:	f7fc f99c 	bl	8004e84 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b64      	cmp	r3, #100	@ 0x64
 8008b54:	d901      	bls.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e0d7      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f0      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	f040 80cd 	bne.w	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b6e:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a08      	ldr	r2, [pc, #32]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b7a:	f7fc f983 	bl	8004e84 <HAL_GetTick>
 8008b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b80:	e00a      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b82:	f7fc f97f 	bl	8004e84 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	@ 0x64
 8008b8e:	d903      	bls.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e0ba      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008b94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b98:	4b5e      	ldr	r3, [pc, #376]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ba4:	d0ed      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d02e      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d12a      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bce:	4b51      	ldr	r3, [pc, #324]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd4:	0c1b      	lsrs	r3, r3, #16
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	0f1b      	lsrs	r3, r3, #28
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	019a      	lsls	r2, r3, #6
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	041b      	lsls	r3, r3, #16
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	061b      	lsls	r3, r3, #24
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	071b      	lsls	r3, r3, #28
 8008c02:	4944      	ldr	r1, [pc, #272]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c0a:	4b42      	ldr	r3, [pc, #264]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	493d      	ldr	r1, [pc, #244]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d022      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c38:	d11d      	bne.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c3a:	4b36      	ldr	r3, [pc, #216]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c40:	0e1b      	lsrs	r3, r3, #24
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c48:	4b32      	ldr	r3, [pc, #200]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4e:	0f1b      	lsrs	r3, r3, #28
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	019a      	lsls	r2, r3, #6
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	041b      	lsls	r3, r3, #16
 8008c62:	431a      	orrs	r2, r3
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	061b      	lsls	r3, r3, #24
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	071b      	lsls	r3, r3, #28
 8008c6e:	4929      	ldr	r1, [pc, #164]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d028      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c82:	4b24      	ldr	r3, [pc, #144]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c88:	0e1b      	lsrs	r3, r3, #24
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	019a      	lsls	r2, r3, #6
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	061b      	lsls	r3, r3, #24
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	071b      	lsls	r3, r3, #28
 8008cb6:	4917      	ldr	r1, [pc, #92]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008cbe:	4b15      	ldr	r3, [pc, #84]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	4911      	ldr	r1, [pc, #68]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce0:	f7fc f8d0 	bl	8004e84 <HAL_GetTick>
 8008ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ce8:	f7fc f8cc 	bl	8004e84 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b64      	cmp	r3, #100	@ 0x64
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e007      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008cfa:	4b06      	ldr	r3, [pc, #24]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d06:	d1ef      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40023800 	.word	0x40023800

08008d18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e071      	b.n	8008e0e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7f5b      	ldrb	r3, [r3, #29]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f9 fe88 	bl	8002a50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d053      	beq.n	8008dfc <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	22ca      	movs	r2, #202	@ 0xca
 8008d5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2253      	movs	r2, #83	@ 0x53
 8008d62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fac7 	bl	80092f8 <RTC_EnterInitMode>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d12a      	bne.n	8008dca <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6899      	ldr	r1, [r3, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b26      	ldr	r3, [pc, #152]	@ (8008e18 <HAL_RTC_Init+0x100>)
 8008d80:	400b      	ands	r3, r1
 8008d82:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6899      	ldr	r1, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68d2      	ldr	r2, [r2, #12]
 8008daa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6919      	ldr	r1, [r3, #16]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	041a      	lsls	r2, r3, #16
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fad0 	bl	8009366 <RTC_ExitInitMode>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d110      	bne.n	8008df2 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0208 	bic.w	r2, r2, #8
 8008dde:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699a      	ldr	r2, [r3, #24]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	22ff      	movs	r2, #255	@ 0xff
 8008df8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008dfa:	e001      	b.n	8008e00 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	ff8fffbf 	.word	0xff8fffbf

08008e1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	7f1b      	ldrb	r3, [r3, #28]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_RTC_SetTime+0x1c>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e085      	b.n	8008f44 <HAL_RTC_SetTime+0x128>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2202      	movs	r2, #2
 8008e42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d126      	bne.n	8008e98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 faa4 	bl	80093b0 <RTC_ByteToBcd2>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fa9d 	bl	80093b0 <RTC_ByteToBcd2>
 8008e76:	4603      	mov	r3, r0
 8008e78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	789b      	ldrb	r3, [r3, #2]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fa95 	bl	80093b0 <RTC_ByteToBcd2>
 8008e86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	78db      	ldrb	r3, [r3, #3]
 8008e90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	e018      	b.n	8008eca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008eb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	78db      	ldrb	r3, [r3, #3]
 8008ec4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ca      	movs	r2, #202	@ 0xca
 8008ed0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2253      	movs	r2, #83	@ 0x53
 8008ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 fa0c 	bl	80092f8 <RTC_EnterInitMode>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008ee4:	7cfb      	ldrb	r3, [r7, #19]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d11e      	bne.n	8008f28 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	6979      	ldr	r1, [r7, #20]
 8008ef0:	4b16      	ldr	r3, [pc, #88]	@ (8008f4c <HAL_RTC_SetTime+0x130>)
 8008ef2:	400b      	ands	r3, r1
 8008ef4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6899      	ldr	r1, [r3, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fa21 	bl	8009366 <RTC_ExitInitMode>
 8008f24:	4603      	mov	r3, r0
 8008f26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008f28:	7cfb      	ldrb	r3, [r7, #19]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	22ff      	movs	r2, #255	@ 0xff
 8008f3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	771a      	strb	r2, [r3, #28]

  return status;
 8008f42:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd90      	pop	{r4, r7, pc}
 8008f4c:	007f7f7f 	.word	0x007f7f7f

08008f50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7f1b      	ldrb	r3, [r3, #28]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_RTC_SetDate+0x1c>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e06f      	b.n	800904c <HAL_RTC_SetDate+0xfc>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2202      	movs	r2, #2
 8008f76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10e      	bne.n	8008f9c <HAL_RTC_SetDate+0x4c>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d008      	beq.n	8008f9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	f023 0310 	bic.w	r3, r3, #16
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	330a      	adds	r3, #10
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11c      	bne.n	8008fdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	78db      	ldrb	r3, [r3, #3]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fa02 	bl	80093b0 <RTC_ByteToBcd2>
 8008fac:	4603      	mov	r3, r0
 8008fae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 f9fb 	bl	80093b0 <RTC_ByteToBcd2>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f9f3 	bl	80093b0 <RTC_ByteToBcd2>
 8008fca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fcc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	e00e      	b.n	8008ffa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	78db      	ldrb	r3, [r3, #3]
 8008fe0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008fe8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008fee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	22ca      	movs	r2, #202	@ 0xca
 8009000:	625a      	str	r2, [r3, #36]	@ 0x24
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2253      	movs	r2, #83	@ 0x53
 8009008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f974 	bl	80092f8 <RTC_EnterInitMode>
 8009010:	4603      	mov	r3, r0
 8009012:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009014:	7cfb      	ldrb	r3, [r7, #19]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	6979      	ldr	r1, [r7, #20]
 8009020:	4b0c      	ldr	r3, [pc, #48]	@ (8009054 <HAL_RTC_SetDate+0x104>)
 8009022:	400b      	ands	r3, r1
 8009024:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 f99d 	bl	8009366 <RTC_ExitInitMode>
 800902c:	4603      	mov	r3, r0
 800902e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009030:	7cfb      	ldrb	r3, [r7, #19]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	22ff      	movs	r2, #255	@ 0xff
 8009042:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	771a      	strb	r2, [r3, #28]

  return status;
 800904a:	7cfb      	ldrb	r3, [r7, #19]
}
 800904c:	4618      	mov	r0, r3
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	bd90      	pop	{r4, r7, pc}
 8009054:	00ffff3f 	.word	0x00ffff3f

08009058 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009058:	b590      	push	{r4, r7, lr}
 800905a:	b089      	sub	sp, #36	@ 0x24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	7f1b      	ldrb	r3, [r3, #28]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <HAL_RTC_SetAlarm+0x24>
 8009078:	2302      	movs	r3, #2
 800907a:	e113      	b.n	80092a4 <HAL_RTC_SetAlarm+0x24c>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2202      	movs	r2, #2
 8009086:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d137      	bne.n	80090fe <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2200      	movs	r2, #0
 80090a0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f982 	bl	80093b0 <RTC_ByteToBcd2>
 80090ac:	4603      	mov	r3, r0
 80090ae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f97b 	bl	80093b0 <RTC_ByteToBcd2>
 80090ba:	4603      	mov	r3, r0
 80090bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090be:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	789b      	ldrb	r3, [r3, #2]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f973 	bl	80093b0 <RTC_ByteToBcd2>
 80090ca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	78db      	ldrb	r3, [r3, #3]
 80090d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090d6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 f965 	bl	80093b0 <RTC_ByteToBcd2>
 80090e6:	4603      	mov	r3, r0
 80090e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80090ea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80090f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090f8:	4313      	orrs	r3, r2
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	e023      	b.n	8009146 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2200      	movs	r2, #0
 8009110:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	785b      	ldrb	r3, [r3, #1]
 800911c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800911e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009124:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	78db      	ldrb	r3, [r3, #3]
 800912a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800912c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009134:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8009136:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800913c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009142:	4313      	orrs	r3, r2
 8009144:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800914e:	4313      	orrs	r3, r2
 8009150:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	22ca      	movs	r2, #202	@ 0xca
 8009158:	625a      	str	r2, [r3, #36]	@ 0x24
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2253      	movs	r2, #83	@ 0x53
 8009160:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800916a:	d148      	bne.n	80091fe <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800917a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800918a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800919c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800919e:	f7fb fe71 	bl	8004e84 <HAL_GetTick>
 80091a2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091a4:	e013      	b.n	80091ce <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091a6:	f7fb fe6d 	bl	8004e84 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091b4:	d90b      	bls.n	80091ce <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	22ff      	movs	r2, #255	@ 0xff
 80091bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2203      	movs	r2, #3
 80091c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e06a      	b.n	80092a4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0e4      	beq.n	80091a6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091fa:	609a      	str	r2, [r3, #8]
 80091fc:	e047      	b.n	800928e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800920c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800921c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800922e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009230:	f7fb fe28 	bl	8004e84 <HAL_GetTick>
 8009234:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009236:	e013      	b.n	8009260 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009238:	f7fb fe24 	bl	8004e84 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009246:	d90b      	bls.n	8009260 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	22ff      	movs	r2, #255	@ 0xff
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2203      	movs	r2, #3
 8009254:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e021      	b.n	80092a4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0e4      	beq.n	8009238 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800928c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	22ff      	movs	r2, #255	@ 0xff
 8009294:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3724      	adds	r7, #36	@ 0x24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd90      	pop	{r4, r7, pc}

080092ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a0d      	ldr	r2, [pc, #52]	@ (80092f4 <HAL_RTC_WaitForSynchro+0x48>)
 80092be:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092c0:	f7fb fde0 	bl	8004e84 <HAL_GetTick>
 80092c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092c6:	e009      	b.n	80092dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092c8:	f7fb fddc 	bl	8004e84 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092d6:	d901      	bls.n	80092dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e007      	b.n	80092ec <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0ee      	beq.n	80092c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	0001ff5f 	.word	0x0001ff5f

080092f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d122      	bne.n	800935c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009324:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009326:	f7fb fdad 	bl	8004e84 <HAL_GetTick>
 800932a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800932c:	e00c      	b.n	8009348 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800932e:	f7fb fda9 	bl	8004e84 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800933c:	d904      	bls.n	8009348 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2204      	movs	r2, #4
 8009342:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <RTC_EnterInitMode+0x64>
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d1e8      	bne.n	800932e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009380:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff8b 	bl	80092ac <HAL_RTC_WaitForSynchro>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2204      	movs	r2, #4
 80093a0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80093be:	e005      	b.n	80093cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3301      	adds	r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	3b0a      	subs	r3, #10
 80093ca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d8f6      	bhi.n	80093c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	4313      	orrs	r3, r2
 80093de:	b2db      	uxtb	r3, r3
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	7f1b      	ldrb	r3, [r3, #28]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009404:	2302      	movs	r3, #2
 8009406:	e050      	b.n	80094aa <HAL_RTCEx_SetTimeStamp+0xbe>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2202      	movs	r2, #2
 8009412:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0206 	bic.w	r2, r2, #6
 8009422:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	430a      	orrs	r2, r1
 8009432:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	4b1f      	ldr	r3, [pc, #124]	@ (80094b8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800943c:	4013      	ands	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	22ca      	movs	r2, #202	@ 0xca
 800944e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2253      	movs	r2, #83	@ 0x53
 8009456:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009470:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	b2da      	uxtb	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009482:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009492:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	22ff      	movs	r2, #255	@ 0xff
 800949a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	fffff7f7 	.word	0xfffff7f7

080094bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e025      	b.n	800951c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d106      	bne.n	80094ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f7 fdcd 	bl	8001084 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f001 fa4b 	bl	800a998 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	f001 fa9f 	bl	800aa50 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009536:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d101      	bne.n	8009542 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800953e:	2302      	movs	r3, #2
 8009540:	e021      	b.n	8009586 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d002      	beq.n	800954e <HAL_SDRAM_SendCommand+0x2a>
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b05      	cmp	r3, #5
 800954c:	d118      	bne.n	8009580 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fae0 	bl	800ab24 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d104      	bne.n	8009576 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2205      	movs	r2, #5
 8009570:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009574:	e006      	b.n	8009584 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800957e:	e001      	b.n	8009584 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e000      	b.n	8009586 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d101      	bne.n	80095a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e016      	b.n	80095d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d10f      	bne.n	80095d4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 fad2 	bl	800ab6c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e000      	b.n	80095d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e09d      	b.n	800972c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d108      	bne.n	800960a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009600:	d009      	beq.n	8009616 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	61da      	str	r2, [r3, #28]
 8009608:	e005      	b.n	8009616 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7f9 fa79 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800964c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009656:	d902      	bls.n	800965e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e002      	b.n	8009664 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800965e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009662:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800966c:	d007      	beq.n	800967e <HAL_SPI_Init+0xa0>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009676:	d002      	beq.n	800967e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	431a      	orrs	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c0:	ea42 0103 	orr.w	r1, r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	0c1b      	lsrs	r3, r3, #16
 80096da:	f003 0204 	and.w	r2, r3, #4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e2:	f003 0310 	and.w	r3, r3, #16
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80096fa:	ea42 0103 	orr.w	r1, r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69da      	ldr	r2, [r3, #28]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800971a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e049      	b.n	80097da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7fb f916 	bl	800498c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f000 faa8 	bl	8009cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d001      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e054      	b.n	80098a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0201 	orr.w	r2, r2, #1
 8009812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a26      	ldr	r2, [pc, #152]	@ (80098b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d022      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009826:	d01d      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a22      	ldr	r2, [pc, #136]	@ (80098b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d018      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a21      	ldr	r2, [pc, #132]	@ (80098bc <HAL_TIM_Base_Start_IT+0xd8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1f      	ldr	r2, [pc, #124]	@ (80098c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00e      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1e      	ldr	r2, [pc, #120]	@ (80098c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d009      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1c      	ldr	r2, [pc, #112]	@ (80098c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d004      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x80>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a1b      	ldr	r2, [pc, #108]	@ (80098cc <HAL_TIM_Base_Start_IT+0xe8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d115      	bne.n	8009890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	4b19      	ldr	r3, [pc, #100]	@ (80098d0 <HAL_TIM_Base_Start_IT+0xec>)
 800986c:	4013      	ands	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b06      	cmp	r3, #6
 8009874:	d015      	beq.n	80098a2 <HAL_TIM_Base_Start_IT+0xbe>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800987c:	d011      	beq.n	80098a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988e:	e008      	b.n	80098a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e000      	b.n	80098a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40010400 	.word	0x40010400
 80098c8:	40014000 	.word	0x40014000
 80098cc:	40001800 	.word	0x40001800
 80098d0:	00010007 	.word	0x00010007

080098d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d020      	beq.n	8009938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01b      	beq.n	8009938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f06f 0202 	mvn.w	r2, #2
 8009908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9b4 	bl	8009c8c <HAL_TIM_IC_CaptureCallback>
 8009924:	e005      	b.n	8009932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9a6 	bl	8009c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f9b7 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d020      	beq.n	8009984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01b      	beq.n	8009984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0204 	mvn.w	r2, #4
 8009954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f98e 	bl	8009c8c <HAL_TIM_IC_CaptureCallback>
 8009970:	e005      	b.n	800997e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f980 	bl	8009c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f991 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d020      	beq.n	80099d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f003 0308 	and.w	r3, r3, #8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01b      	beq.n	80099d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f06f 0208 	mvn.w	r2, #8
 80099a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2204      	movs	r2, #4
 80099a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f968 	bl	8009c8c <HAL_TIM_IC_CaptureCallback>
 80099bc:	e005      	b.n	80099ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f95a 	bl	8009c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f96b 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d020      	beq.n	8009a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01b      	beq.n	8009a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f06f 0210 	mvn.w	r2, #16
 80099ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2208      	movs	r2, #8
 80099f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f942 	bl	8009c8c <HAL_TIM_IC_CaptureCallback>
 8009a08:	e005      	b.n	8009a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f934 	bl	8009c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f945 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00c      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f06f 0201 	mvn.w	r2, #1
 8009a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7f8 ff4c 	bl	80028d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d104      	bne.n	8009a54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fb05 	bl	800a078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00c      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fafd 	bl	800a08c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8ff 	bl	8009cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f06f 0220 	mvn.w	r2, #32
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fac5 	bl	800a064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIM_ConfigClockSource+0x1c>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e0b4      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x186>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	4b56      	ldr	r3, [pc, #344]	@ (8009c74 <HAL_TIM_ConfigClockSource+0x190>)
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b38:	d03e      	beq.n	8009bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b3e:	f200 8087 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b46:	f000 8086 	beq.w	8009c56 <HAL_TIM_ConfigClockSource+0x172>
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b4e:	d87f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b50:	2b70      	cmp	r3, #112	@ 0x70
 8009b52:	d01a      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0xa6>
 8009b54:	2b70      	cmp	r3, #112	@ 0x70
 8009b56:	d87b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b58:	2b60      	cmp	r3, #96	@ 0x60
 8009b5a:	d050      	beq.n	8009bfe <HAL_TIM_ConfigClockSource+0x11a>
 8009b5c:	2b60      	cmp	r3, #96	@ 0x60
 8009b5e:	d877      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b60:	2b50      	cmp	r3, #80	@ 0x50
 8009b62:	d03c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0xfa>
 8009b64:	2b50      	cmp	r3, #80	@ 0x50
 8009b66:	d873      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b68:	2b40      	cmp	r3, #64	@ 0x40
 8009b6a:	d058      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0x13a>
 8009b6c:	2b40      	cmp	r3, #64	@ 0x40
 8009b6e:	d86f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b70:	2b30      	cmp	r3, #48	@ 0x30
 8009b72:	d064      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b74:	2b30      	cmp	r3, #48	@ 0x30
 8009b76:	d86b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d060      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d867      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05c      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b84:	2b10      	cmp	r3, #16
 8009b86:	d05a      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b88:	e062      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b9a:	f000 f9b5 	bl	8009f08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	609a      	str	r2, [r3, #8]
      break;
 8009bb6:	e04f      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bc8:	f000 f99e 	bl	8009f08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bda:	609a      	str	r2, [r3, #8]
      break;
 8009bdc:	e03c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bea:	461a      	mov	r2, r3
 8009bec:	f000 f912 	bl	8009e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2150      	movs	r1, #80	@ 0x50
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f96b 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009bfc:	e02c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f000 f931 	bl	8009e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2160      	movs	r1, #96	@ 0x60
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f95b 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009c1c:	e01c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f000 f8f2 	bl	8009e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2140      	movs	r1, #64	@ 0x40
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f94b 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009c3c:	e00c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f000 f942 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009c4e:	e003      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      break;
 8009c54:	e000      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	fffeff88 	.word	0xfffeff88

08009c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a43      	ldr	r2, [pc, #268]	@ (8009de8 <TIM_Base_SetConfig+0x120>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d013      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce6:	d00f      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a40      	ldr	r2, [pc, #256]	@ (8009dec <TIM_Base_SetConfig+0x124>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8009df0 <TIM_Base_SetConfig+0x128>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d007      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8009df4 <TIM_Base_SetConfig+0x12c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a3d      	ldr	r2, [pc, #244]	@ (8009df8 <TIM_Base_SetConfig+0x130>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d108      	bne.n	8009d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a32      	ldr	r2, [pc, #200]	@ (8009de8 <TIM_Base_SetConfig+0x120>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d02b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d28:	d027      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8009dec <TIM_Base_SetConfig+0x124>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d023      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a2e      	ldr	r2, [pc, #184]	@ (8009df0 <TIM_Base_SetConfig+0x128>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d01f      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8009df4 <TIM_Base_SetConfig+0x12c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a2c      	ldr	r2, [pc, #176]	@ (8009df8 <TIM_Base_SetConfig+0x130>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d017      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009dfc <TIM_Base_SetConfig+0x134>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d013      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a2a      	ldr	r2, [pc, #168]	@ (8009e00 <TIM_Base_SetConfig+0x138>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00f      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a29      	ldr	r2, [pc, #164]	@ (8009e04 <TIM_Base_SetConfig+0x13c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a28      	ldr	r2, [pc, #160]	@ (8009e08 <TIM_Base_SetConfig+0x140>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d007      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a27      	ldr	r2, [pc, #156]	@ (8009e0c <TIM_Base_SetConfig+0x144>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d003      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a26      	ldr	r2, [pc, #152]	@ (8009e10 <TIM_Base_SetConfig+0x148>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d108      	bne.n	8009d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	689a      	ldr	r2, [r3, #8]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a0e      	ldr	r2, [pc, #56]	@ (8009de8 <TIM_Base_SetConfig+0x120>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d003      	beq.n	8009dba <TIM_Base_SetConfig+0xf2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a10      	ldr	r2, [pc, #64]	@ (8009df8 <TIM_Base_SetConfig+0x130>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d103      	bne.n	8009dc2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f043 0204 	orr.w	r2, r3, #4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40000400 	.word	0x40000400
 8009df0:	40000800 	.word	0x40000800
 8009df4:	40000c00 	.word	0x40000c00
 8009df8:	40010400 	.word	0x40010400
 8009dfc:	40014000 	.word	0x40014000
 8009e00:	40014400 	.word	0x40014400
 8009e04:	40014800 	.word	0x40014800
 8009e08:	40001800 	.word	0x40001800
 8009e0c:	40001c00 	.word	0x40001c00
 8009e10:	40002000 	.word	0x40002000

08009e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	f023 0201 	bic.w	r2, r3, #1
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f023 030a 	bic.w	r3, r3, #10
 8009e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	621a      	str	r2, [r3, #32]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b087      	sub	sp, #28
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	f023 0210 	bic.w	r2, r3, #16
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	031b      	lsls	r3, r3, #12
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009eae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	621a      	str	r2, [r3, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f043 0307 	orr.w	r3, r3, #7
 8009ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	609a      	str	r2, [r3, #8]
}
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	021a      	lsls	r2, r3, #8
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	609a      	str	r2, [r3, #8]
}
 8009f3c:	bf00      	nop
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e06d      	b.n	800a03c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a30      	ldr	r2, [pc, #192]	@ (800a048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d004      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800a04c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d108      	bne.n	8009fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a20      	ldr	r2, [pc, #128]	@ (800a048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d022      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd2:	d01d      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d018      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1c      	ldr	r2, [pc, #112]	@ (800a054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d013      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a1a      	ldr	r2, [pc, #104]	@ (800a058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d00e      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a15      	ldr	r2, [pc, #84]	@ (800a04c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d009      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a16      	ldr	r2, [pc, #88]	@ (800a05c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d004      	beq.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a15      	ldr	r2, [pc, #84]	@ (800a060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10c      	bne.n	800a02a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	40010000 	.word	0x40010000
 800a04c:	40010400 	.word	0x40010400
 800a050:	40000400 	.word	0x40000400
 800a054:	40000800 	.word	0x40000800
 800a058:	40000c00 	.word	0x40000c00
 800a05c:	40014000 	.word	0x40014000
 800a060:	40001800 	.word	0x40001800

0800a064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e040      	b.n	800a134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fa fd84 	bl	8004bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2224      	movs	r2, #36	@ 0x24
 800a0cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0201 	bic.w	r2, r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa8c 	bl	800a604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f825 	bl	800a13c <UART_SetConfig>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e01b      	b.n	800a134 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a10a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a11a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb0b 	bl	800a748 <UART_CheckIdleState>
 800a132:	4603      	mov	r3, r0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	431a      	orrs	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4ba6      	ldr	r3, [pc, #664]	@ (800a400 <UART_SetConfig+0x2c4>)
 800a168:	4013      	ands	r3, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	6979      	ldr	r1, [r7, #20]
 800a170:	430b      	orrs	r3, r1
 800a172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	4313      	orrs	r3, r2
 800a198:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a94      	ldr	r2, [pc, #592]	@ (800a404 <UART_SetConfig+0x2c8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d120      	bne.n	800a1fa <UART_SetConfig+0xbe>
 800a1b8:	4b93      	ldr	r3, [pc, #588]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d816      	bhi.n	800a1f4 <UART_SetConfig+0xb8>
 800a1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1cc <UART_SetConfig+0x90>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a1dd 	.word	0x0800a1dd
 800a1d0:	0800a1e9 	.word	0x0800a1e9
 800a1d4:	0800a1e3 	.word	0x0800a1e3
 800a1d8:	0800a1ef 	.word	0x0800a1ef
 800a1dc:	2301      	movs	r3, #1
 800a1de:	77fb      	strb	r3, [r7, #31]
 800a1e0:	e150      	b.n	800a484 <UART_SetConfig+0x348>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	e14d      	b.n	800a484 <UART_SetConfig+0x348>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e14a      	b.n	800a484 <UART_SetConfig+0x348>
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e147      	b.n	800a484 <UART_SetConfig+0x348>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e144      	b.n	800a484 <UART_SetConfig+0x348>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a83      	ldr	r2, [pc, #524]	@ (800a40c <UART_SetConfig+0x2d0>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d132      	bne.n	800a26a <UART_SetConfig+0x12e>
 800a204:	4b80      	ldr	r3, [pc, #512]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20a:	f003 030c 	and.w	r3, r3, #12
 800a20e:	2b0c      	cmp	r3, #12
 800a210:	d828      	bhi.n	800a264 <UART_SetConfig+0x128>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <UART_SetConfig+0xdc>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a24d 	.word	0x0800a24d
 800a21c:	0800a265 	.word	0x0800a265
 800a220:	0800a265 	.word	0x0800a265
 800a224:	0800a265 	.word	0x0800a265
 800a228:	0800a259 	.word	0x0800a259
 800a22c:	0800a265 	.word	0x0800a265
 800a230:	0800a265 	.word	0x0800a265
 800a234:	0800a265 	.word	0x0800a265
 800a238:	0800a253 	.word	0x0800a253
 800a23c:	0800a265 	.word	0x0800a265
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a265 	.word	0x0800a265
 800a248:	0800a25f 	.word	0x0800a25f
 800a24c:	2300      	movs	r3, #0
 800a24e:	77fb      	strb	r3, [r7, #31]
 800a250:	e118      	b.n	800a484 <UART_SetConfig+0x348>
 800a252:	2302      	movs	r3, #2
 800a254:	77fb      	strb	r3, [r7, #31]
 800a256:	e115      	b.n	800a484 <UART_SetConfig+0x348>
 800a258:	2304      	movs	r3, #4
 800a25a:	77fb      	strb	r3, [r7, #31]
 800a25c:	e112      	b.n	800a484 <UART_SetConfig+0x348>
 800a25e:	2308      	movs	r3, #8
 800a260:	77fb      	strb	r3, [r7, #31]
 800a262:	e10f      	b.n	800a484 <UART_SetConfig+0x348>
 800a264:	2310      	movs	r3, #16
 800a266:	77fb      	strb	r3, [r7, #31]
 800a268:	e10c      	b.n	800a484 <UART_SetConfig+0x348>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a68      	ldr	r2, [pc, #416]	@ (800a410 <UART_SetConfig+0x2d4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d120      	bne.n	800a2b6 <UART_SetConfig+0x17a>
 800a274:	4b64      	ldr	r3, [pc, #400]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a27a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a27e:	2b30      	cmp	r3, #48	@ 0x30
 800a280:	d013      	beq.n	800a2aa <UART_SetConfig+0x16e>
 800a282:	2b30      	cmp	r3, #48	@ 0x30
 800a284:	d814      	bhi.n	800a2b0 <UART_SetConfig+0x174>
 800a286:	2b20      	cmp	r3, #32
 800a288:	d009      	beq.n	800a29e <UART_SetConfig+0x162>
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d810      	bhi.n	800a2b0 <UART_SetConfig+0x174>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <UART_SetConfig+0x15c>
 800a292:	2b10      	cmp	r3, #16
 800a294:	d006      	beq.n	800a2a4 <UART_SetConfig+0x168>
 800a296:	e00b      	b.n	800a2b0 <UART_SetConfig+0x174>
 800a298:	2300      	movs	r3, #0
 800a29a:	77fb      	strb	r3, [r7, #31]
 800a29c:	e0f2      	b.n	800a484 <UART_SetConfig+0x348>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	77fb      	strb	r3, [r7, #31]
 800a2a2:	e0ef      	b.n	800a484 <UART_SetConfig+0x348>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	77fb      	strb	r3, [r7, #31]
 800a2a8:	e0ec      	b.n	800a484 <UART_SetConfig+0x348>
 800a2aa:	2308      	movs	r3, #8
 800a2ac:	77fb      	strb	r3, [r7, #31]
 800a2ae:	e0e9      	b.n	800a484 <UART_SetConfig+0x348>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	77fb      	strb	r3, [r7, #31]
 800a2b4:	e0e6      	b.n	800a484 <UART_SetConfig+0x348>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a56      	ldr	r2, [pc, #344]	@ (800a414 <UART_SetConfig+0x2d8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d120      	bne.n	800a302 <UART_SetConfig+0x1c6>
 800a2c0:	4b51      	ldr	r3, [pc, #324]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2cc:	d013      	beq.n	800a2f6 <UART_SetConfig+0x1ba>
 800a2ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2d0:	d814      	bhi.n	800a2fc <UART_SetConfig+0x1c0>
 800a2d2:	2b80      	cmp	r3, #128	@ 0x80
 800a2d4:	d009      	beq.n	800a2ea <UART_SetConfig+0x1ae>
 800a2d6:	2b80      	cmp	r3, #128	@ 0x80
 800a2d8:	d810      	bhi.n	800a2fc <UART_SetConfig+0x1c0>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <UART_SetConfig+0x1a8>
 800a2de:	2b40      	cmp	r3, #64	@ 0x40
 800a2e0:	d006      	beq.n	800a2f0 <UART_SetConfig+0x1b4>
 800a2e2:	e00b      	b.n	800a2fc <UART_SetConfig+0x1c0>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e0cc      	b.n	800a484 <UART_SetConfig+0x348>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e0c9      	b.n	800a484 <UART_SetConfig+0x348>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e0c6      	b.n	800a484 <UART_SetConfig+0x348>
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	77fb      	strb	r3, [r7, #31]
 800a2fa:	e0c3      	b.n	800a484 <UART_SetConfig+0x348>
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e0c0      	b.n	800a484 <UART_SetConfig+0x348>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a44      	ldr	r2, [pc, #272]	@ (800a418 <UART_SetConfig+0x2dc>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d125      	bne.n	800a358 <UART_SetConfig+0x21c>
 800a30c:	4b3e      	ldr	r3, [pc, #248]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a31a:	d017      	beq.n	800a34c <UART_SetConfig+0x210>
 800a31c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a320:	d817      	bhi.n	800a352 <UART_SetConfig+0x216>
 800a322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a326:	d00b      	beq.n	800a340 <UART_SetConfig+0x204>
 800a328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a32c:	d811      	bhi.n	800a352 <UART_SetConfig+0x216>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <UART_SetConfig+0x1fe>
 800a332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a336:	d006      	beq.n	800a346 <UART_SetConfig+0x20a>
 800a338:	e00b      	b.n	800a352 <UART_SetConfig+0x216>
 800a33a:	2300      	movs	r3, #0
 800a33c:	77fb      	strb	r3, [r7, #31]
 800a33e:	e0a1      	b.n	800a484 <UART_SetConfig+0x348>
 800a340:	2302      	movs	r3, #2
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e09e      	b.n	800a484 <UART_SetConfig+0x348>
 800a346:	2304      	movs	r3, #4
 800a348:	77fb      	strb	r3, [r7, #31]
 800a34a:	e09b      	b.n	800a484 <UART_SetConfig+0x348>
 800a34c:	2308      	movs	r3, #8
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e098      	b.n	800a484 <UART_SetConfig+0x348>
 800a352:	2310      	movs	r3, #16
 800a354:	77fb      	strb	r3, [r7, #31]
 800a356:	e095      	b.n	800a484 <UART_SetConfig+0x348>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a2f      	ldr	r2, [pc, #188]	@ (800a41c <UART_SetConfig+0x2e0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d125      	bne.n	800a3ae <UART_SetConfig+0x272>
 800a362:	4b29      	ldr	r3, [pc, #164]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a36c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a370:	d017      	beq.n	800a3a2 <UART_SetConfig+0x266>
 800a372:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a376:	d817      	bhi.n	800a3a8 <UART_SetConfig+0x26c>
 800a378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a37c:	d00b      	beq.n	800a396 <UART_SetConfig+0x25a>
 800a37e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a382:	d811      	bhi.n	800a3a8 <UART_SetConfig+0x26c>
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <UART_SetConfig+0x254>
 800a388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a38c:	d006      	beq.n	800a39c <UART_SetConfig+0x260>
 800a38e:	e00b      	b.n	800a3a8 <UART_SetConfig+0x26c>
 800a390:	2301      	movs	r3, #1
 800a392:	77fb      	strb	r3, [r7, #31]
 800a394:	e076      	b.n	800a484 <UART_SetConfig+0x348>
 800a396:	2302      	movs	r3, #2
 800a398:	77fb      	strb	r3, [r7, #31]
 800a39a:	e073      	b.n	800a484 <UART_SetConfig+0x348>
 800a39c:	2304      	movs	r3, #4
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e070      	b.n	800a484 <UART_SetConfig+0x348>
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e06d      	b.n	800a484 <UART_SetConfig+0x348>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e06a      	b.n	800a484 <UART_SetConfig+0x348>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1b      	ldr	r2, [pc, #108]	@ (800a420 <UART_SetConfig+0x2e4>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d138      	bne.n	800a42a <UART_SetConfig+0x2ee>
 800a3b8:	4b13      	ldr	r3, [pc, #76]	@ (800a408 <UART_SetConfig+0x2cc>)
 800a3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a3c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3c6:	d017      	beq.n	800a3f8 <UART_SetConfig+0x2bc>
 800a3c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3cc:	d82a      	bhi.n	800a424 <UART_SetConfig+0x2e8>
 800a3ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3d2:	d00b      	beq.n	800a3ec <UART_SetConfig+0x2b0>
 800a3d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3d8:	d824      	bhi.n	800a424 <UART_SetConfig+0x2e8>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <UART_SetConfig+0x2aa>
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e2:	d006      	beq.n	800a3f2 <UART_SetConfig+0x2b6>
 800a3e4:	e01e      	b.n	800a424 <UART_SetConfig+0x2e8>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	77fb      	strb	r3, [r7, #31]
 800a3ea:	e04b      	b.n	800a484 <UART_SetConfig+0x348>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e048      	b.n	800a484 <UART_SetConfig+0x348>
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	77fb      	strb	r3, [r7, #31]
 800a3f6:	e045      	b.n	800a484 <UART_SetConfig+0x348>
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	77fb      	strb	r3, [r7, #31]
 800a3fc:	e042      	b.n	800a484 <UART_SetConfig+0x348>
 800a3fe:	bf00      	nop
 800a400:	efff69f3 	.word	0xefff69f3
 800a404:	40011000 	.word	0x40011000
 800a408:	40023800 	.word	0x40023800
 800a40c:	40004400 	.word	0x40004400
 800a410:	40004800 	.word	0x40004800
 800a414:	40004c00 	.word	0x40004c00
 800a418:	40005000 	.word	0x40005000
 800a41c:	40011400 	.word	0x40011400
 800a420:	40007800 	.word	0x40007800
 800a424:	2310      	movs	r3, #16
 800a426:	77fb      	strb	r3, [r7, #31]
 800a428:	e02c      	b.n	800a484 <UART_SetConfig+0x348>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a72      	ldr	r2, [pc, #456]	@ (800a5f8 <UART_SetConfig+0x4bc>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d125      	bne.n	800a480 <UART_SetConfig+0x344>
 800a434:	4b71      	ldr	r3, [pc, #452]	@ (800a5fc <UART_SetConfig+0x4c0>)
 800a436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a43a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a43e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a442:	d017      	beq.n	800a474 <UART_SetConfig+0x338>
 800a444:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a448:	d817      	bhi.n	800a47a <UART_SetConfig+0x33e>
 800a44a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a44e:	d00b      	beq.n	800a468 <UART_SetConfig+0x32c>
 800a450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a454:	d811      	bhi.n	800a47a <UART_SetConfig+0x33e>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <UART_SetConfig+0x326>
 800a45a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a45e:	d006      	beq.n	800a46e <UART_SetConfig+0x332>
 800a460:	e00b      	b.n	800a47a <UART_SetConfig+0x33e>
 800a462:	2300      	movs	r3, #0
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e00d      	b.n	800a484 <UART_SetConfig+0x348>
 800a468:	2302      	movs	r3, #2
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e00a      	b.n	800a484 <UART_SetConfig+0x348>
 800a46e:	2304      	movs	r3, #4
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e007      	b.n	800a484 <UART_SetConfig+0x348>
 800a474:	2308      	movs	r3, #8
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e004      	b.n	800a484 <UART_SetConfig+0x348>
 800a47a:	2310      	movs	r3, #16
 800a47c:	77fb      	strb	r3, [r7, #31]
 800a47e:	e001      	b.n	800a484 <UART_SetConfig+0x348>
 800a480:	2310      	movs	r3, #16
 800a482:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a48c:	d15b      	bne.n	800a546 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	2b08      	cmp	r3, #8
 800a492:	d828      	bhi.n	800a4e6 <UART_SetConfig+0x3aa>
 800a494:	a201      	add	r2, pc, #4	@ (adr r2, 800a49c <UART_SetConfig+0x360>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	0800a4e7 	.word	0x0800a4e7
 800a4ac:	0800a4d7 	.word	0x0800a4d7
 800a4b0:	0800a4e7 	.word	0x0800a4e7
 800a4b4:	0800a4e7 	.word	0x0800a4e7
 800a4b8:	0800a4e7 	.word	0x0800a4e7
 800a4bc:	0800a4df 	.word	0x0800a4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c0:	f7fd ffe0 	bl	8008484 <HAL_RCC_GetPCLK1Freq>
 800a4c4:	61b8      	str	r0, [r7, #24]
        break;
 800a4c6:	e013      	b.n	800a4f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4c8:	f7fd fff0 	bl	80084ac <HAL_RCC_GetPCLK2Freq>
 800a4cc:	61b8      	str	r0, [r7, #24]
        break;
 800a4ce:	e00f      	b.n	800a4f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d0:	4b4b      	ldr	r3, [pc, #300]	@ (800a600 <UART_SetConfig+0x4c4>)
 800a4d2:	61bb      	str	r3, [r7, #24]
        break;
 800a4d4:	e00c      	b.n	800a4f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d6:	f7fd ff03 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 800a4da:	61b8      	str	r0, [r7, #24]
        break;
 800a4dc:	e008      	b.n	800a4f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4e2:	61bb      	str	r3, [r7, #24]
        break;
 800a4e4:	e004      	b.n	800a4f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	77bb      	strb	r3, [r7, #30]
        break;
 800a4ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d074      	beq.n	800a5e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	005a      	lsls	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	441a      	add	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b0f      	cmp	r3, #15
 800a510:	d916      	bls.n	800a540 <UART_SetConfig+0x404>
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a518:	d212      	bcs.n	800a540 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	f023 030f 	bic.w	r3, r3, #15
 800a522:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	085b      	lsrs	r3, r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	b29a      	uxth	r2, r3
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	4313      	orrs	r3, r2
 800a534:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	89fa      	ldrh	r2, [r7, #14]
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	e04f      	b.n	800a5e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	77bb      	strb	r3, [r7, #30]
 800a544:	e04c      	b.n	800a5e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a546:	7ffb      	ldrb	r3, [r7, #31]
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d828      	bhi.n	800a59e <UART_SetConfig+0x462>
 800a54c:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <UART_SetConfig+0x418>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	0800a59f 	.word	0x0800a59f
 800a564:	0800a58f 	.word	0x0800a58f
 800a568:	0800a59f 	.word	0x0800a59f
 800a56c:	0800a59f 	.word	0x0800a59f
 800a570:	0800a59f 	.word	0x0800a59f
 800a574:	0800a597 	.word	0x0800a597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a578:	f7fd ff84 	bl	8008484 <HAL_RCC_GetPCLK1Freq>
 800a57c:	61b8      	str	r0, [r7, #24]
        break;
 800a57e:	e013      	b.n	800a5a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a580:	f7fd ff94 	bl	80084ac <HAL_RCC_GetPCLK2Freq>
 800a584:	61b8      	str	r0, [r7, #24]
        break;
 800a586:	e00f      	b.n	800a5a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a588:	4b1d      	ldr	r3, [pc, #116]	@ (800a600 <UART_SetConfig+0x4c4>)
 800a58a:	61bb      	str	r3, [r7, #24]
        break;
 800a58c:	e00c      	b.n	800a5a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a58e:	f7fd fea7 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 800a592:	61b8      	str	r0, [r7, #24]
        break;
 800a594:	e008      	b.n	800a5a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a59a:	61bb      	str	r3, [r7, #24]
        break;
 800a59c:	e004      	b.n	800a5a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	77bb      	strb	r3, [r7, #30]
        break;
 800a5a6:	bf00      	nop
    }

    if (pclk != 0U)
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d018      	beq.n	800a5e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	085a      	lsrs	r2, r3, #1
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	441a      	add	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b0f      	cmp	r3, #15
 800a5c6:	d909      	bls.n	800a5dc <UART_SetConfig+0x4a0>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ce:	d205      	bcs.n	800a5dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60da      	str	r2, [r3, #12]
 800a5da:	e001      	b.n	800a5e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a5ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3720      	adds	r7, #32
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40007c00 	.word	0x40007c00
 800a5fc:	40023800 	.word	0x40023800
 800a600:	00f42400 	.word	0x00f42400

0800a604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	f003 0310 	and.w	r3, r3, #16
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00a      	beq.n	800a6b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01a      	beq.n	800a71a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a702:	d10a      	bne.n	800a71a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	605a      	str	r2, [r3, #4]
  }
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08c      	sub	sp, #48	@ 0x30
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a758:	f7fa fb94 	bl	8004e84 <HAL_GetTick>
 800a75c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d12e      	bne.n	800a7ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a76c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	2200      	movs	r2, #0
 800a776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f83b 	bl	800a7f6 <UART_WaitOnFlagUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d021      	beq.n	800a7ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	60fb      	str	r3, [r7, #12]
   return(result);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a79a:	623b      	str	r3, [r7, #32]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	69b9      	ldr	r1, [r7, #24]
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e011      	b.n	800a7ee <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3728      	adds	r7, #40	@ 0x28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	603b      	str	r3, [r7, #0]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a806:	e04f      	b.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a80e:	d04b      	beq.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a810:	f7fa fb38 	bl	8004e84 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d302      	bcc.n	800a826 <UART_WaitOnFlagUntilTimeout+0x30>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e04e      	b.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d037      	beq.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b80      	cmp	r3, #128	@ 0x80
 800a83c:	d034      	beq.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b40      	cmp	r3, #64	@ 0x40
 800a842:	d031      	beq.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d110      	bne.n	800a874 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2208      	movs	r2, #8
 800a858:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f838 	bl	800a8d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2208      	movs	r2, #8
 800a864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e029      	b.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a87e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a882:	d111      	bne.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a88c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 f81e 	bl	800a8d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2220      	movs	r2, #32
 800a898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e00f      	b.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69da      	ldr	r2, [r3, #28]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	bf0c      	ite	eq
 800a8b8:	2301      	moveq	r3, #1
 800a8ba:	2300      	movne	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d0a0      	beq.n	800a808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b095      	sub	sp, #84	@ 0x54
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e6      	bne.n	800a8d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	61fb      	str	r3, [r7, #28]
   return(result);
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	f023 0301 	bic.w	r3, r3, #1
 800a920:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a92a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a92c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a942:	2b01      	cmp	r3, #1
 800a944:	d118      	bne.n	800a978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	60bb      	str	r3, [r7, #8]
   return(result);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f023 0310 	bic.w	r3, r3, #16
 800a95a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6979      	ldr	r1, [r7, #20]
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	613b      	str	r3, [r7, #16]
   return(result);
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a98c:	bf00      	nop
 800a98e:	3754      	adds	r7, #84	@ 0x54
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d121      	bne.n	800a9ee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	4b27      	ldr	r3, [pc, #156]	@ (800aa4c <FMC_SDRAM_Init+0xb4>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	6851      	ldr	r1, [r2, #4]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	6892      	ldr	r2, [r2, #8]
 800a9ba:	4311      	orrs	r1, r2
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	68d2      	ldr	r2, [r2, #12]
 800a9c0:	4311      	orrs	r1, r2
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	6912      	ldr	r2, [r2, #16]
 800a9c6:	4311      	orrs	r1, r2
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	6952      	ldr	r2, [r2, #20]
 800a9cc:	4311      	orrs	r1, r2
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	6992      	ldr	r2, [r2, #24]
 800a9d2:	4311      	orrs	r1, r2
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	69d2      	ldr	r2, [r2, #28]
 800a9d8:	4311      	orrs	r1, r2
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	6a12      	ldr	r2, [r2, #32]
 800a9de:	4311      	orrs	r1, r2
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a9e4:	430a      	orrs	r2, r1
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	e026      	b.n	800aa3c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	69d9      	ldr	r1, [r3, #28]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	4319      	orrs	r1, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	430b      	orrs	r3, r1
 800aa06:	431a      	orrs	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <FMC_SDRAM_Init+0xb4>)
 800aa12:	4013      	ands	r3, r2
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	6851      	ldr	r1, [r2, #4]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	6892      	ldr	r2, [r2, #8]
 800aa1c:	4311      	orrs	r1, r2
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	68d2      	ldr	r2, [r2, #12]
 800aa22:	4311      	orrs	r1, r2
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	6912      	ldr	r2, [r2, #16]
 800aa28:	4311      	orrs	r1, r2
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	6952      	ldr	r2, [r2, #20]
 800aa2e:	4311      	orrs	r1, r2
 800aa30:	683a      	ldr	r2, [r7, #0]
 800aa32:	6992      	ldr	r2, [r2, #24]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	431a      	orrs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	ffff8000 	.word	0xffff8000

0800aa50 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d128      	bne.n	800aab4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1e59      	subs	r1, r3, #1
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	4319      	orrs	r1, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	4319      	orrs	r1, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	031b      	lsls	r3, r3, #12
 800aa8c:	4319      	orrs	r1, r3
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	041b      	lsls	r3, r3, #16
 800aa96:	4319      	orrs	r1, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	051b      	lsls	r3, r3, #20
 800aaa0:	4319      	orrs	r1, r3
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	061b      	lsls	r3, r3, #24
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	431a      	orrs	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	609a      	str	r2, [r3, #8]
 800aab2:	e02d      	b.n	800ab10 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	4b19      	ldr	r3, [pc, #100]	@ (800ab20 <FMC_SDRAM_Timing_Init+0xd0>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68d2      	ldr	r2, [r2, #12]
 800aac0:	3a01      	subs	r2, #1
 800aac2:	0311      	lsls	r1, r2, #12
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	6952      	ldr	r2, [r2, #20]
 800aac8:	3a01      	subs	r2, #1
 800aaca:	0512      	lsls	r2, r2, #20
 800aacc:	430a      	orrs	r2, r1
 800aace:	431a      	orrs	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	1e59      	subs	r1, r3, #1
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	4319      	orrs	r1, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	021b      	lsls	r3, r3, #8
 800aaf4:	4319      	orrs	r1, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	041b      	lsls	r3, r3, #16
 800aafe:	4319      	orrs	r1, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	061b      	lsls	r3, r3, #24
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	ff0f0fff 	.word	0xff0f0fff

0800ab24 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <FMC_SDRAM_SendCommand+0x44>)
 800ab36:	4013      	ands	r3, r2
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	6811      	ldr	r1, [r2, #0]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	6852      	ldr	r2, [r2, #4]
 800ab40:	4311      	orrs	r1, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	6892      	ldr	r2, [r2, #8]
 800ab46:	3a01      	subs	r2, #1
 800ab48:	0152      	lsls	r2, r2, #5
 800ab4a:	4311      	orrs	r1, r2
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	68d2      	ldr	r2, [r2, #12]
 800ab50:	0252      	lsls	r2, r2, #9
 800ab52:	430a      	orrs	r2, r1
 800ab54:	431a      	orrs	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	ffc00000 	.word	0xffc00000

0800ab6c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695a      	ldr	r2, [r3, #20]
 800ab7a:	4b07      	ldr	r3, [pc, #28]	@ (800ab98 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	0052      	lsls	r2, r2, #1
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	ffffc001 	.word	0xffffc001

0800ab9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800abaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abae:	2b84      	cmp	r3, #132	@ 0x84
 800abb0:	d005      	beq.n	800abbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800abb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	3303      	adds	r3, #3
 800abbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd2:	f3ef 8305 	mrs	r3, IPSR
 800abd6:	607b      	str	r3, [r7, #4]
  return(result);
 800abd8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800abda:	2b00      	cmp	r3, #0
 800abdc:	bf14      	ite	ne
 800abde:	2301      	movne	r3, #1
 800abe0:	2300      	moveq	r3, #0
 800abe2:	b2db      	uxtb	r3, r3
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800abf4:	f001 f968 	bl	800bec8 <vTaskStartScheduler>
  
  return osOK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800abfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac00:	b089      	sub	sp, #36	@ 0x24
 800ac02:	af04      	add	r7, sp, #16
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d020      	beq.n	800ac52 <osThreadCreate+0x54>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d01c      	beq.n	800ac52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685c      	ldr	r4, [r3, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691e      	ldr	r6, [r3, #16]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff ffb6 	bl	800ab9c <makeFreeRtosPriority>
 800ac30:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac3a:	9202      	str	r2, [sp, #8]
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	9100      	str	r1, [sp, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	4632      	mov	r2, r6
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 ff4e 	bl	800bae8 <xTaskCreateStatic>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	e01c      	b.n	800ac8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685c      	ldr	r4, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac5e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff ff98 	bl	800ab9c <makeFreeRtosPriority>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f107 030c 	add.w	r3, r7, #12
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	9200      	str	r2, [sp, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 ff99 	bl	800bbb4 <xTaskCreate>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d001      	beq.n	800ac8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e000      	b.n	800ac8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <osDelay+0x16>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	e000      	b.n	800acae <osDelay+0x18>
 800acac:	2301      	movs	r3, #1
 800acae:	4618      	mov	r0, r3
 800acb0:	f001 f8d2 	bl	800be58 <vTaskDelay>
  
  return osOK;
 800acb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800acbe:	b590      	push	{r4, r7, lr}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af02      	add	r7, sp, #8
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d011      	beq.n	800acf4 <osMessageCreate+0x36>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00d      	beq.n	800acf4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6859      	ldr	r1, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	2400      	movs	r4, #0
 800acea:	9400      	str	r4, [sp, #0]
 800acec:	f000 f9e4 	bl	800b0b8 <xQueueGenericCreateStatic>
 800acf0:	4603      	mov	r3, r0
 800acf2:	e008      	b.n	800ad06 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	4619      	mov	r1, r3
 800ad00:	f000 fa61 	bl	800b1c6 <xQueueGenericCreate>
 800ad04:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
	...

0800ad10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <osMessagePut+0x1e>
    ticks = 1;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ad2e:	f7ff ff4d 	bl	800abcc <inHandlerMode>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d018      	beq.n	800ad6a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ad38:	f107 0210 	add.w	r2, r7, #16
 800ad3c:	f107 0108 	add.w	r1, r7, #8
 800ad40:	2300      	movs	r3, #0
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 fbac 	bl	800b4a0 <xQueueGenericSendFromISR>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d001      	beq.n	800ad52 <osMessagePut+0x42>
      return osErrorOS;
 800ad4e:	23ff      	movs	r3, #255	@ 0xff
 800ad50:	e018      	b.n	800ad84 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d014      	beq.n	800ad82 <osMessagePut+0x72>
 800ad58:	4b0c      	ldr	r3, [pc, #48]	@ (800ad8c <osMessagePut+0x7c>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	e00b      	b.n	800ad82 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ad6a:	f107 0108 	add.w	r1, r7, #8
 800ad6e:	2300      	movs	r3, #0
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fa8a 	bl	800b28c <xQueueGenericSend>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d001      	beq.n	800ad82 <osMessagePut+0x72>
      return osErrorOS;
 800ad7e:	23ff      	movs	r3, #255	@ 0xff
 800ad80:	e000      	b.n	800ad84 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	e000ed04 	.word	0xe000ed04

0800ad90 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ad90:	b590      	push	{r4, r7, lr}
 800ad92:	b08b      	sub	sp, #44	@ 0x2c
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800adaa:	2380      	movs	r3, #128	@ 0x80
 800adac:	617b      	str	r3, [r7, #20]
    return event;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	461c      	mov	r4, r3
 800adb2:	f107 0314 	add.w	r3, r7, #20
 800adb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adbe:	e054      	b.n	800ae6a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adce:	d103      	bne.n	800add8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800add0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800add4:	627b      	str	r3, [r7, #36]	@ 0x24
 800add6:	e009      	b.n	800adec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d006      	beq.n	800adec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <osMessageGet+0x5c>
      ticks = 1;
 800ade8:	2301      	movs	r3, #1
 800adea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800adec:	f7ff feee 	bl	800abcc <inHandlerMode>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01c      	beq.n	800ae30 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800adf6:	f107 0220 	add.w	r2, r7, #32
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	68b8      	ldr	r0, [r7, #8]
 800ae04:	f000 fcd8 	bl	800b7b8 <xQueueReceiveFromISR>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d102      	bne.n	800ae14 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ae0e:	2310      	movs	r3, #16
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e001      	b.n	800ae18 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01d      	beq.n	800ae5a <osMessageGet+0xca>
 800ae1e:	4b15      	ldr	r3, [pc, #84]	@ (800ae74 <osMessageGet+0xe4>)
 800ae20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	e014      	b.n	800ae5a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	3304      	adds	r3, #4
 800ae36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f000 fbd4 	bl	800b5e8 <xQueueReceive>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d102      	bne.n	800ae4c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ae46:	2310      	movs	r3, #16
 800ae48:	617b      	str	r3, [r7, #20]
 800ae4a:	e006      	b.n	800ae5a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <osMessageGet+0xc6>
 800ae52:	2300      	movs	r3, #0
 800ae54:	e000      	b.n	800ae58 <osMessageGet+0xc8>
 800ae56:	2340      	movs	r3, #64	@ 0x40
 800ae58:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	461c      	mov	r4, r3
 800ae5e:	f107 0314 	add.w	r3, r7, #20
 800ae62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	372c      	adds	r7, #44	@ 0x2c
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd90      	pop	{r4, r7, pc}
 800ae72:	bf00      	nop
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f103 0208 	add.w	r2, r3, #8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f103 0208 	add.w	r2, r3, #8
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f103 0208 	add.w	r2, r3, #8
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aed2:	b480      	push	{r7}
 800aed4:	b085      	sub	sp, #20
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af30:	d103      	bne.n	800af3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	e00c      	b.n	800af54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3308      	adds	r3, #8
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	e002      	b.n	800af48 <vListInsert+0x2e>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	429a      	cmp	r2, r3
 800af52:	d2f6      	bcs.n	800af42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	6892      	ldr	r2, [r2, #8]
 800afa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6852      	ldr	r2, [r2, #4]
 800afac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d103      	bne.n	800afc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	1e5a      	subs	r2, r3, #1
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff8:	b672      	cpsid	i
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	b662      	cpsie	i
 800b008:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	e7fd      	b.n	800b00c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b010:	f001 fdac 	bl	800cb6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01c:	68f9      	ldr	r1, [r7, #12]
 800b01e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b020:	fb01 f303 	mul.w	r3, r1, r3
 800b024:	441a      	add	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b040:	3b01      	subs	r3, #1
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b046:	fb01 f303 	mul.w	r3, r1, r3
 800b04a:	441a      	add	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	22ff      	movs	r2, #255	@ 0xff
 800b054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	22ff      	movs	r2, #255	@ 0xff
 800b05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d114      	bne.n	800b090 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d01a      	beq.n	800b0a4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3310      	adds	r3, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f001 f98e 	bl	800c394 <xTaskRemoveFromEventList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d012      	beq.n	800b0a4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b07e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b4 <xQueueGenericReset+0xd4>)
 800b080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	e009      	b.n	800b0a4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3310      	adds	r3, #16
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff feef 	bl	800ae78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3324      	adds	r3, #36	@ 0x24
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff feea 	bl	800ae78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0a4:	f001 fd98 	bl	800cbd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0a8:	2301      	movs	r3, #1
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed04 	.word	0xe000ed04

0800b0b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08e      	sub	sp, #56	@ 0x38
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10d      	bne.n	800b0e8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d0:	b672      	cpsid	i
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	b662      	cpsie	i
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	e7fd      	b.n	800b0e4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10d      	bne.n	800b10a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f2:	b672      	cpsid	i
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	b662      	cpsie	i
 800b102:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop
 800b108:	e7fd      	b.n	800b106 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <xQueueGenericCreateStatic+0x5e>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <xQueueGenericCreateStatic+0x62>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <xQueueGenericCreateStatic+0x64>
 800b11a:	2300      	movs	r3, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10d      	bne.n	800b13c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	b672      	cpsid	i
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	b662      	cpsie	i
 800b134:	623b      	str	r3, [r7, #32]
}
 800b136:	bf00      	nop
 800b138:	bf00      	nop
 800b13a:	e7fd      	b.n	800b138 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <xQueueGenericCreateStatic+0x90>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <xQueueGenericCreateStatic+0x94>
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <xQueueGenericCreateStatic+0x96>
 800b14c:	2300      	movs	r3, #0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	b672      	cpsid	i
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	b662      	cpsie	i
 800b166:	61fb      	str	r3, [r7, #28]
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	e7fd      	b.n	800b16a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b16e:	2348      	movs	r3, #72	@ 0x48
 800b170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b48      	cmp	r3, #72	@ 0x48
 800b176:	d00d      	beq.n	800b194 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17c:	b672      	cpsid	i
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	b662      	cpsie	i
 800b18c:	61bb      	str	r3, [r7, #24]
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	e7fd      	b.n	800b190 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b194:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00d      	beq.n	800b1bc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 f848 	bl	800b24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3730      	adds	r7, #48	@ 0x30
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b08a      	sub	sp, #40	@ 0x28
 800b1ca:	af02      	add	r7, sp, #8
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10d      	bne.n	800b1f6 <xQueueGenericCreate+0x30>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1de:	b672      	cpsid	i
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	b662      	cpsie	i
 800b1ee:	613b      	str	r3, [r7, #16]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	e004      	b.n	800b20c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	fb02 f303 	mul.w	r3, r2, r3
 800b20a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	3348      	adds	r3, #72	@ 0x48
 800b210:	4618      	mov	r0, r3
 800b212:	f001 fdd9 	bl	800cdc8 <pvPortMalloc>
 800b216:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d011      	beq.n	800b242 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	3348      	adds	r3, #72	@ 0x48
 800b226:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b230:	79fa      	ldrb	r2, [r7, #7]
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4613      	mov	r3, r2
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	68b9      	ldr	r1, [r7, #8]
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f000 f805 	bl	800b24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b242:	69bb      	ldr	r3, [r7, #24]
	}
 800b244:	4618      	mov	r0, r3
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
 800b258:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d103      	bne.n	800b268 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	e002      	b.n	800b26e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b27a:	2101      	movs	r1, #1
 800b27c:	69b8      	ldr	r0, [r7, #24]
 800b27e:	f7ff feaf 	bl	800afe0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08e      	sub	sp, #56	@ 0x38
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b29a:	2300      	movs	r3, #0
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10d      	bne.n	800b2c4 <xQueueGenericSend+0x38>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ac:	b672      	cpsid	i
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	b662      	cpsie	i
 800b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <xQueueGenericSend+0x46>
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <xQueueGenericSend+0x4a>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <xQueueGenericSend+0x4c>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10d      	bne.n	800b2f8 <xQueueGenericSend+0x6c>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e0:	b672      	cpsid	i
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	b662      	cpsie	i
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d103      	bne.n	800b306 <xQueueGenericSend+0x7a>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <xQueueGenericSend+0x7e>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <xQueueGenericSend+0x80>
 800b30a:	2300      	movs	r3, #0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10d      	bne.n	800b32c <xQueueGenericSend+0xa0>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b314:	b672      	cpsid	i
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	b662      	cpsie	i
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b32c:	f001 fa00 	bl	800c730 <xTaskGetSchedulerState>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d102      	bne.n	800b33c <xQueueGenericSend+0xb0>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <xQueueGenericSend+0xb4>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <xQueueGenericSend+0xb6>
 800b340:	2300      	movs	r3, #0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10d      	bne.n	800b362 <xQueueGenericSend+0xd6>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34a:	b672      	cpsid	i
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	b662      	cpsie	i
 800b35a:	61fb      	str	r3, [r7, #28]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b362:	f001 fc03 	bl	800cb6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36e:	429a      	cmp	r2, r3
 800b370:	d302      	bcc.n	800b378 <xQueueGenericSend+0xec>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b02      	cmp	r3, #2
 800b376:	d129      	bne.n	800b3cc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b37e:	f000 faa3 	bl	800b8c8 <prvCopyDataToQueue>
 800b382:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d010      	beq.n	800b3ae <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	3324      	adds	r3, #36	@ 0x24
 800b390:	4618      	mov	r0, r3
 800b392:	f000 ffff 	bl	800c394 <xTaskRemoveFromEventList>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d013      	beq.n	800b3c4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b39c:	4b3f      	ldr	r3, [pc, #252]	@ (800b49c <xQueueGenericSend+0x210>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	e00a      	b.n	800b3c4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d007      	beq.n	800b3c4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3b4:	4b39      	ldr	r3, [pc, #228]	@ (800b49c <xQueueGenericSend+0x210>)
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3c4:	f001 fc08 	bl	800cbd8 <vPortExitCritical>
				return pdPASS;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e063      	b.n	800b494 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d103      	bne.n	800b3da <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3d2:	f001 fc01 	bl	800cbd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e05c      	b.n	800b494 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3e0:	f107 0314 	add.w	r3, r7, #20
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f001 f83b 	bl	800c460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ee:	f001 fbf3 	bl	800cbd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3f2:	f000 fdd7 	bl	800bfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3f6:	f001 fbb9 	bl	800cb6c <vPortEnterCritical>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b400:	b25b      	sxtb	r3, r3
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b406:	d103      	bne.n	800b410 <xQueueGenericSend+0x184>
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b416:	b25b      	sxtb	r3, r3
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b41c:	d103      	bne.n	800b426 <xQueueGenericSend+0x19a>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	2200      	movs	r2, #0
 800b422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b426:	f001 fbd7 	bl	800cbd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b42a:	1d3a      	adds	r2, r7, #4
 800b42c:	f107 0314 	add.w	r3, r7, #20
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f001 f82a 	bl	800c48c <xTaskCheckForTimeOut>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d124      	bne.n	800b488 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b43e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b440:	f000 fb3a 	bl	800bab8 <prvIsQueueFull>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d018      	beq.n	800b47c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44c:	3310      	adds	r3, #16
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f000 ff76 	bl	800c344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b45a:	f000 fac5 	bl	800b9e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b45e:	f000 fdaf 	bl	800bfc0 <xTaskResumeAll>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	f47f af7c 	bne.w	800b362 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b46a:	4b0c      	ldr	r3, [pc, #48]	@ (800b49c <xQueueGenericSend+0x210>)
 800b46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	e772      	b.n	800b362 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b47c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b47e:	f000 fab3 	bl	800b9e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b482:	f000 fd9d 	bl	800bfc0 <xTaskResumeAll>
 800b486:	e76c      	b.n	800b362 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b48a:	f000 faad 	bl	800b9e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b48e:	f000 fd97 	bl	800bfc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b494:	4618      	mov	r0, r3
 800b496:	3738      	adds	r7, #56	@ 0x38
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08e      	sub	sp, #56	@ 0x38
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10d      	bne.n	800b4d4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4bc:	b672      	cpsid	i
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	b662      	cpsie	i
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	e7fd      	b.n	800b4d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d103      	bne.n	800b4e2 <xQueueGenericSendFromISR+0x42>
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <xQueueGenericSendFromISR+0x46>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <xQueueGenericSendFromISR+0x48>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10d      	bne.n	800b508 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	b672      	cpsid	i
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	b662      	cpsie	i
 800b500:	623b      	str	r3, [r7, #32]
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	e7fd      	b.n	800b504 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d103      	bne.n	800b516 <xQueueGenericSendFromISR+0x76>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	2b01      	cmp	r3, #1
 800b514:	d101      	bne.n	800b51a <xQueueGenericSendFromISR+0x7a>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <xQueueGenericSendFromISR+0x7c>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10d      	bne.n	800b53c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	b672      	cpsid	i
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	b662      	cpsie	i
 800b534:	61fb      	str	r3, [r7, #28]
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b53c:	f001 fbfe 	bl	800cd3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b540:	f3ef 8211 	mrs	r2, BASEPRI
 800b544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	61ba      	str	r2, [r7, #24]
 800b55a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b55c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b55e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d302      	bcc.n	800b572 <xQueueGenericSendFromISR+0xd2>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d12c      	bne.n	800b5cc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b582:	f000 f9a1 	bl	800b8c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b586:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b58e:	d112      	bne.n	800b5b6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d016      	beq.n	800b5c6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	3324      	adds	r3, #36	@ 0x24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fef9 	bl	800c394 <xTaskRemoveFromEventList>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00e      	beq.n	800b5c6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00b      	beq.n	800b5c6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e007      	b.n	800b5c6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	b25a      	sxtb	r2, r3
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b5ca:	e001      	b.n	800b5d0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3738      	adds	r7, #56	@ 0x38
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08c      	sub	sp, #48	@ 0x30
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10d      	bne.n	800b61e <xQueueReceive+0x36>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b606:	b672      	cpsid	i
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	b662      	cpsie	i
 800b616:	623b      	str	r3, [r7, #32]
}
 800b618:	bf00      	nop
 800b61a:	bf00      	nop
 800b61c:	e7fd      	b.n	800b61a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d103      	bne.n	800b62c <xQueueReceive+0x44>
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <xQueueReceive+0x48>
 800b62c:	2301      	movs	r3, #1
 800b62e:	e000      	b.n	800b632 <xQueueReceive+0x4a>
 800b630:	2300      	movs	r3, #0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10d      	bne.n	800b652 <xQueueReceive+0x6a>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	b672      	cpsid	i
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	b662      	cpsie	i
 800b64a:	61fb      	str	r3, [r7, #28]
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	e7fd      	b.n	800b64e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b652:	f001 f86d 	bl	800c730 <xTaskGetSchedulerState>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <xQueueReceive+0x7a>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <xQueueReceive+0x7e>
 800b662:	2301      	movs	r3, #1
 800b664:	e000      	b.n	800b668 <xQueueReceive+0x80>
 800b666:	2300      	movs	r3, #0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10d      	bne.n	800b688 <xQueueReceive+0xa0>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	b672      	cpsid	i
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	b662      	cpsie	i
 800b680:	61bb      	str	r3, [r7, #24]
}
 800b682:	bf00      	nop
 800b684:	bf00      	nop
 800b686:	e7fd      	b.n	800b684 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b688:	f001 fa70 	bl	800cb6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01f      	beq.n	800b6d8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b69c:	f000 f97e 	bl	800b99c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	1e5a      	subs	r2, r3, #1
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00f      	beq.n	800b6d0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	3310      	adds	r3, #16
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 fe6d 	bl	800c394 <xTaskRemoveFromEventList>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d007      	beq.n	800b6d0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6c0:	4b3c      	ldr	r3, [pc, #240]	@ (800b7b4 <xQueueReceive+0x1cc>)
 800b6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6d0:	f001 fa82 	bl	800cbd8 <vPortExitCritical>
				return pdPASS;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e069      	b.n	800b7ac <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6de:	f001 fa7b 	bl	800cbd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e062      	b.n	800b7ac <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6ec:	f107 0310 	add.w	r3, r7, #16
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 feb5 	bl	800c460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6fa:	f001 fa6d 	bl	800cbd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6fe:	f000 fc51 	bl	800bfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b702:	f001 fa33 	bl	800cb6c <vPortEnterCritical>
 800b706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b712:	d103      	bne.n	800b71c <xQueueReceive+0x134>
 800b714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b722:	b25b      	sxtb	r3, r3
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b728:	d103      	bne.n	800b732 <xQueueReceive+0x14a>
 800b72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b732:	f001 fa51 	bl	800cbd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b736:	1d3a      	adds	r2, r7, #4
 800b738:	f107 0310 	add.w	r3, r7, #16
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fea4 	bl	800c48c <xTaskCheckForTimeOut>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d123      	bne.n	800b792 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b74a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b74c:	f000 f99e 	bl	800ba8c <prvIsQueueEmpty>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d017      	beq.n	800b786 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b758:	3324      	adds	r3, #36	@ 0x24
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fdf0 	bl	800c344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b766:	f000 f93f 	bl	800b9e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b76a:	f000 fc29 	bl	800bfc0 <xTaskResumeAll>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d189      	bne.n	800b688 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b774:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b4 <xQueueReceive+0x1cc>)
 800b776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	e780      	b.n	800b688 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b788:	f000 f92e 	bl	800b9e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b78c:	f000 fc18 	bl	800bfc0 <xTaskResumeAll>
 800b790:	e77a      	b.n	800b688 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b794:	f000 f928 	bl	800b9e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b798:	f000 fc12 	bl	800bfc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b79c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b79e:	f000 f975 	bl	800ba8c <prvIsQueueEmpty>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f43f af6f 	beq.w	800b688 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3730      	adds	r7, #48	@ 0x30
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	e000ed04 	.word	0xe000ed04

0800b7b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08e      	sub	sp, #56	@ 0x38
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10d      	bne.n	800b7ea <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d2:	b672      	cpsid	i
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	b662      	cpsie	i
 800b7e2:	623b      	str	r3, [r7, #32]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d103      	bne.n	800b7f8 <xQueueReceiveFromISR+0x40>
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <xQueueReceiveFromISR+0x44>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <xQueueReceiveFromISR+0x46>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10d      	bne.n	800b81e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	b672      	cpsid	i
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	b662      	cpsie	i
 800b816:	61fb      	str	r3, [r7, #28]
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	e7fd      	b.n	800b81a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b81e:	f001 fa8d 	bl	800cd3c <vPortValidateInterruptPriority>
	__asm volatile
 800b822:	f3ef 8211 	mrs	r2, BASEPRI
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	b672      	cpsid	i
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	b662      	cpsie	i
 800b83a:	61ba      	str	r2, [r7, #24]
 800b83c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b83e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b840:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b846:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d02f      	beq.n	800b8ae <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b85c:	f000 f89e 	bl	800b99c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b862:	1e5a      	subs	r2, r3, #1
 800b864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b866:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b868:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b86c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b870:	d112      	bne.n	800b898 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d016      	beq.n	800b8a8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	3310      	adds	r3, #16
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 fd88 	bl	800c394 <xTaskRemoveFromEventList>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00e      	beq.n	800b8a8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	e007      	b.n	800b8a8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b89c:	3301      	adds	r3, #1
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	b25a      	sxtb	r2, r3
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ac:	e001      	b.n	800b8b2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f383 8811 	msr	BASEPRI, r3
}
 800b8bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3738      	adds	r7, #56	@ 0x38
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10d      	bne.n	800b902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d14d      	bne.n	800b98a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 ff3a 	bl	800c76c <xTaskPriorityDisinherit>
 800b8f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	609a      	str	r2, [r3, #8]
 800b900:	e043      	b.n	800b98a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d119      	bne.n	800b93c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6858      	ldr	r0, [r3, #4]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b910:	461a      	mov	r2, r3
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	f001 fcc6 	bl	800d2a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b920:	441a      	add	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d32b      	bcc.n	800b98a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	605a      	str	r2, [r3, #4]
 800b93a:	e026      	b.n	800b98a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	68d8      	ldr	r0, [r3, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b944:	461a      	mov	r2, r3
 800b946:	68b9      	ldr	r1, [r7, #8]
 800b948:	f001 fcac 	bl	800d2a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b954:	425b      	negs	r3, r3
 800b956:	441a      	add	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	68da      	ldr	r2, [r3, #12]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d207      	bcs.n	800b978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b970:	425b      	negs	r3, r3
 800b972:	441a      	add	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d105      	bne.n	800b98a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	3b01      	subs	r3, #1
 800b988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b992:	697b      	ldr	r3, [r7, #20]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d018      	beq.n	800b9e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b6:	441a      	add	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68da      	ldr	r2, [r3, #12]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d303      	bcc.n	800b9d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68d9      	ldr	r1, [r3, #12]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6838      	ldr	r0, [r7, #0]
 800b9dc:	f001 fc62 	bl	800d2a4 <memcpy>
	}
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9f0:	f001 f8bc 	bl	800cb6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9fc:	e011      	b.n	800ba22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d012      	beq.n	800ba2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3324      	adds	r3, #36	@ 0x24
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 fcc2 	bl	800c394 <xTaskRemoveFromEventList>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba16:	f000 fda1 	bl	800c55c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dce9      	bgt.n	800b9fe <prvUnlockQueue+0x16>
 800ba2a:	e000      	b.n	800ba2e <prvUnlockQueue+0x46>
					break;
 800ba2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	22ff      	movs	r2, #255	@ 0xff
 800ba32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ba36:	f001 f8cf 	bl	800cbd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba3a:	f001 f897 	bl	800cb6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba46:	e011      	b.n	800ba6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d012      	beq.n	800ba76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3310      	adds	r3, #16
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 fc9d 	bl	800c394 <xTaskRemoveFromEventList>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba60:	f000 fd7c 	bl	800c55c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	dce9      	bgt.n	800ba48 <prvUnlockQueue+0x60>
 800ba74:	e000      	b.n	800ba78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	22ff      	movs	r2, #255	@ 0xff
 800ba7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ba80:	f001 f8aa 	bl	800cbd8 <vPortExitCritical>
}
 800ba84:	bf00      	nop
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba94:	f001 f86a 	bl	800cb6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d102      	bne.n	800baa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e001      	b.n	800baaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baaa:	f001 f895 	bl	800cbd8 <vPortExitCritical>

	return xReturn;
 800baae:	68fb      	ldr	r3, [r7, #12]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bac0:	f001 f854 	bl	800cb6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d102      	bne.n	800bad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e001      	b.n	800bada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bada:	f001 f87d 	bl	800cbd8 <vPortExitCritical>

	return xReturn;
 800bade:	68fb      	ldr	r3, [r7, #12]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08e      	sub	sp, #56	@ 0x38
 800baec:	af04      	add	r7, sp, #16
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800baf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10d      	bne.n	800bb18 <xTaskCreateStatic+0x30>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb00:	b672      	cpsid	i
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	b662      	cpsie	i
 800bb10:	623b      	str	r3, [r7, #32]
}
 800bb12:	bf00      	nop
 800bb14:	bf00      	nop
 800bb16:	e7fd      	b.n	800bb14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10d      	bne.n	800bb3a <xTaskCreateStatic+0x52>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	b672      	cpsid	i
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	b662      	cpsie	i
 800bb32:	61fb      	str	r3, [r7, #28]
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	e7fd      	b.n	800bb36 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb3a:	23a0      	movs	r3, #160	@ 0xa0
 800bb3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2ba0      	cmp	r3, #160	@ 0xa0
 800bb42:	d00d      	beq.n	800bb60 <xTaskCreateStatic+0x78>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	b672      	cpsid	i
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	b662      	cpsie	i
 800bb58:	61bb      	str	r3, [r7, #24]
}
 800bb5a:	bf00      	nop
 800bb5c:	bf00      	nop
 800bb5e:	e7fd      	b.n	800bb5c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01e      	beq.n	800bba6 <xTaskCreateStatic+0xbe>
 800bb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d01b      	beq.n	800bba6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb80:	2300      	movs	r3, #0
 800bb82:	9303      	str	r3, [sp, #12]
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	9302      	str	r3, [sp, #8]
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 f851 	bl	800bc40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bba0:	f000 f8f0 	bl	800bd84 <prvAddNewTaskToReadyList>
 800bba4:	e001      	b.n	800bbaa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbaa:	697b      	ldr	r3, [r7, #20]
	}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3728      	adds	r7, #40	@ 0x28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08c      	sub	sp, #48	@ 0x30
 800bbb8:	af04      	add	r7, sp, #16
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	603b      	str	r3, [r7, #0]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbc4:	88fb      	ldrh	r3, [r7, #6]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f001 f8fd 	bl	800cdc8 <pvPortMalloc>
 800bbce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00e      	beq.n	800bbf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbd6:	20a0      	movs	r0, #160	@ 0xa0
 800bbd8:	f001 f8f6 	bl	800cdc8 <pvPortMalloc>
 800bbdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbea:	e005      	b.n	800bbf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbec:	6978      	ldr	r0, [r7, #20]
 800bbee:	f001 f9b9 	bl	800cf64 <vPortFree>
 800bbf2:	e001      	b.n	800bbf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d017      	beq.n	800bc2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9303      	str	r3, [sp, #12]
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	9302      	str	r3, [sp, #8]
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 f80f 	bl	800bc40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc22:	69f8      	ldr	r0, [r7, #28]
 800bc24:	f000 f8ae 	bl	800bd84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	61bb      	str	r3, [r7, #24]
 800bc2c:	e002      	b.n	800bc34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc34:	69bb      	ldr	r3, [r7, #24]
	}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc52:	6879      	ldr	r1, [r7, #4]
 800bc54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bc58:	440b      	add	r3, r1
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	f023 0307 	bic.w	r3, r3, #7
 800bc66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	f003 0307 	and.w	r3, r3, #7
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00d      	beq.n	800bc8e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc76:	b672      	cpsid	i
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	b662      	cpsie	i
 800bc86:	617b      	str	r3, [r7, #20]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01f      	beq.n	800bcd4 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc94:	2300      	movs	r3, #0
 800bc96:	61fb      	str	r3, [r7, #28]
 800bc98:	e012      	b.n	800bcc0 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	4413      	add	r3, r2
 800bca0:	7819      	ldrb	r1, [r3, #0]
 800bca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	4413      	add	r3, r2
 800bca8:	3334      	adds	r3, #52	@ 0x34
 800bcaa:	460a      	mov	r2, r1
 800bcac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d006      	beq.n	800bcc8 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	61fb      	str	r3, [r7, #28]
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b0f      	cmp	r3, #15
 800bcc4:	d9e9      	bls.n	800bc9a <prvInitialiseNewTask+0x5a>
 800bcc6:	e000      	b.n	800bcca <prvInitialiseNewTask+0x8a>
			{
				break;
 800bcc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bcd2:	e003      	b.n	800bcdc <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcde:	2b06      	cmp	r3, #6
 800bce0:	d901      	bls.n	800bce6 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bce2:	2306      	movs	r3, #6
 800bce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcf0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff f8db 	bl	800aeb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	3318      	adds	r3, #24
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff f8d6 	bl	800aeb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd14:	f1c3 0207 	rsb	r2, r3, #7
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	334c      	adds	r3, #76	@ 0x4c
 800bd36:	224c      	movs	r2, #76	@ 0x4c
 800bd38:	2100      	movs	r1, #0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fa2e 	bl	800d19c <memset>
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	4a0d      	ldr	r2, [pc, #52]	@ (800bd78 <prvInitialiseNewTask+0x138>)
 800bd44:	651a      	str	r2, [r3, #80]	@ 0x50
 800bd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd48:	4a0c      	ldr	r2, [pc, #48]	@ (800bd7c <prvInitialiseNewTask+0x13c>)
 800bd4a:	655a      	str	r2, [r3, #84]	@ 0x54
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	4a0c      	ldr	r2, [pc, #48]	@ (800bd80 <prvInitialiseNewTask+0x140>)
 800bd50:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	69b8      	ldr	r0, [r7, #24]
 800bd58:	f000 fdfa 	bl	800c950 <pxPortInitialiseStack>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd6e:	bf00      	nop
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20004a18 	.word	0x20004a18
 800bd7c:	20004a80 	.word	0x20004a80
 800bd80:	20004ae8 	.word	0x20004ae8

0800bd84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd8c:	f000 feee 	bl	800cb6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd90:	4b2a      	ldr	r3, [pc, #168]	@ (800be3c <prvAddNewTaskToReadyList+0xb8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	4a29      	ldr	r2, [pc, #164]	@ (800be3c <prvAddNewTaskToReadyList+0xb8>)
 800bd98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd9a:	4b29      	ldr	r3, [pc, #164]	@ (800be40 <prvAddNewTaskToReadyList+0xbc>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d109      	bne.n	800bdb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bda2:	4a27      	ldr	r2, [pc, #156]	@ (800be40 <prvAddNewTaskToReadyList+0xbc>)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bda8:	4b24      	ldr	r3, [pc, #144]	@ (800be3c <prvAddNewTaskToReadyList+0xb8>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d110      	bne.n	800bdd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bdb0:	f000 fbf8 	bl	800c5a4 <prvInitialiseTaskLists>
 800bdb4:	e00d      	b.n	800bdd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdb6:	4b23      	ldr	r3, [pc, #140]	@ (800be44 <prvAddNewTaskToReadyList+0xc0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d109      	bne.n	800bdd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdbe:	4b20      	ldr	r3, [pc, #128]	@ (800be40 <prvAddNewTaskToReadyList+0xbc>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d802      	bhi.n	800bdd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bdcc:	4a1c      	ldr	r2, [pc, #112]	@ (800be40 <prvAddNewTaskToReadyList+0xbc>)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	@ (800be48 <prvAddNewTaskToReadyList+0xc4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	4a1b      	ldr	r2, [pc, #108]	@ (800be48 <prvAddNewTaskToReadyList+0xc4>)
 800bdda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	2201      	movs	r2, #1
 800bde2:	409a      	lsls	r2, r3
 800bde4:	4b19      	ldr	r3, [pc, #100]	@ (800be4c <prvAddNewTaskToReadyList+0xc8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	4a18      	ldr	r2, [pc, #96]	@ (800be4c <prvAddNewTaskToReadyList+0xc8>)
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4a15      	ldr	r2, [pc, #84]	@ (800be50 <prvAddNewTaskToReadyList+0xcc>)
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3304      	adds	r3, #4
 800be02:	4619      	mov	r1, r3
 800be04:	4610      	mov	r0, r2
 800be06:	f7ff f864 	bl	800aed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be0a:	f000 fee5 	bl	800cbd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be0e:	4b0d      	ldr	r3, [pc, #52]	@ (800be44 <prvAddNewTaskToReadyList+0xc0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00e      	beq.n	800be34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be16:	4b0a      	ldr	r3, [pc, #40]	@ (800be40 <prvAddNewTaskToReadyList+0xbc>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be20:	429a      	cmp	r2, r3
 800be22:	d207      	bcs.n	800be34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be24:	4b0b      	ldr	r3, [pc, #44]	@ (800be54 <prvAddNewTaskToReadyList+0xd0>)
 800be26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	20000dcc 	.word	0x20000dcc
 800be40:	20000ccc 	.word	0x20000ccc
 800be44:	20000dd8 	.word	0x20000dd8
 800be48:	20000de8 	.word	0x20000de8
 800be4c:	20000dd4 	.word	0x20000dd4
 800be50:	20000cd0 	.word	0x20000cd0
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d01a      	beq.n	800bea0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be6a:	4b15      	ldr	r3, [pc, #84]	@ (800bec0 <vTaskDelay+0x68>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00d      	beq.n	800be8e <vTaskDelay+0x36>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be76:	b672      	cpsid	i
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	b662      	cpsie	i
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	e7fd      	b.n	800be8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800be8e:	f000 f889 	bl	800bfa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be92:	2100      	movs	r1, #0
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fcf5 	bl	800c884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be9a:	f000 f891 	bl	800bfc0 <xTaskResumeAll>
 800be9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d107      	bne.n	800beb6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800bea6:	4b07      	ldr	r3, [pc, #28]	@ (800bec4 <vTaskDelay+0x6c>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000df4 	.word	0x20000df4
 800bec4:	e000ed04 	.word	0xe000ed04

0800bec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08a      	sub	sp, #40	@ 0x28
 800becc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bed6:	463a      	mov	r2, r7
 800bed8:	1d39      	adds	r1, r7, #4
 800beda:	f107 0308 	add.w	r3, r7, #8
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f5 f8da 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	9202      	str	r2, [sp, #8]
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	2300      	movs	r3, #0
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	2300      	movs	r3, #0
 800bef4:	460a      	mov	r2, r1
 800bef6:	4923      	ldr	r1, [pc, #140]	@ (800bf84 <vTaskStartScheduler+0xbc>)
 800bef8:	4823      	ldr	r0, [pc, #140]	@ (800bf88 <vTaskStartScheduler+0xc0>)
 800befa:	f7ff fdf5 	bl	800bae8 <xTaskCreateStatic>
 800befe:	4603      	mov	r3, r0
 800bf00:	4a22      	ldr	r2, [pc, #136]	@ (800bf8c <vTaskStartScheduler+0xc4>)
 800bf02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf04:	4b21      	ldr	r3, [pc, #132]	@ (800bf8c <vTaskStartScheduler+0xc4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	e001      	b.n	800bf16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d11d      	bne.n	800bf58 <vTaskStartScheduler+0x90>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf20:	b672      	cpsid	i
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	b662      	cpsie	i
 800bf30:	613b      	str	r3, [r7, #16]
}
 800bf32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf34:	4b16      	ldr	r3, [pc, #88]	@ (800bf90 <vTaskStartScheduler+0xc8>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	334c      	adds	r3, #76	@ 0x4c
 800bf3a:	4a16      	ldr	r2, [pc, #88]	@ (800bf94 <vTaskStartScheduler+0xcc>)
 800bf3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf3e:	4b16      	ldr	r3, [pc, #88]	@ (800bf98 <vTaskStartScheduler+0xd0>)
 800bf40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf46:	4b15      	ldr	r3, [pc, #84]	@ (800bf9c <vTaskStartScheduler+0xd4>)
 800bf48:	2201      	movs	r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf4c:	4b14      	ldr	r3, [pc, #80]	@ (800bfa0 <vTaskStartScheduler+0xd8>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf52:	f000 fd8d 	bl	800ca70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf56:	e011      	b.n	800bf7c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf5e:	d10d      	bne.n	800bf7c <vTaskStartScheduler+0xb4>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf64:	b672      	cpsid	i
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	b662      	cpsie	i
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	bf00      	nop
 800bf7a:	e7fd      	b.n	800bf78 <vTaskStartScheduler+0xb0>
}
 800bf7c:	bf00      	nop
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	0800d484 	.word	0x0800d484
 800bf88:	0800c575 	.word	0x0800c575
 800bf8c:	20000df0 	.word	0x20000df0
 800bf90:	20000ccc 	.word	0x20000ccc
 800bf94:	2000004c 	.word	0x2000004c
 800bf98:	20000dec 	.word	0x20000dec
 800bf9c:	20000dd8 	.word	0x20000dd8
 800bfa0:	20000dd0 	.word	0x20000dd0

0800bfa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bfa8:	4b04      	ldr	r3, [pc, #16]	@ (800bfbc <vTaskSuspendAll+0x18>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	4a03      	ldr	r2, [pc, #12]	@ (800bfbc <vTaskSuspendAll+0x18>)
 800bfb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bfb2:	bf00      	nop
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20000df4 	.word	0x20000df4

0800bfc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfce:	4b43      	ldr	r3, [pc, #268]	@ (800c0dc <xTaskResumeAll+0x11c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10d      	bne.n	800bff2 <xTaskResumeAll+0x32>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	b672      	cpsid	i
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	b662      	cpsie	i
 800bfea:	603b      	str	r3, [r7, #0]
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	e7fd      	b.n	800bfee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bff2:	f000 fdbb 	bl	800cb6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bff6:	4b39      	ldr	r3, [pc, #228]	@ (800c0dc <xTaskResumeAll+0x11c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	4a37      	ldr	r2, [pc, #220]	@ (800c0dc <xTaskResumeAll+0x11c>)
 800bffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c000:	4b36      	ldr	r3, [pc, #216]	@ (800c0dc <xTaskResumeAll+0x11c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d161      	bne.n	800c0cc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c008:	4b35      	ldr	r3, [pc, #212]	@ (800c0e0 <xTaskResumeAll+0x120>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d05d      	beq.n	800c0cc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c010:	e02e      	b.n	800c070 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c012:	4b34      	ldr	r3, [pc, #208]	@ (800c0e4 <xTaskResumeAll+0x124>)
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3318      	adds	r3, #24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe ffb4 	bl	800af8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe ffaf 	bl	800af8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c032:	2201      	movs	r2, #1
 800c034:	409a      	lsls	r2, r3
 800c036:	4b2c      	ldr	r3, [pc, #176]	@ (800c0e8 <xTaskResumeAll+0x128>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	4a2a      	ldr	r2, [pc, #168]	@ (800c0e8 <xTaskResumeAll+0x128>)
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4a27      	ldr	r2, [pc, #156]	@ (800c0ec <xTaskResumeAll+0x12c>)
 800c04e:	441a      	add	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3304      	adds	r3, #4
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7fe ff3b 	bl	800aed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c060:	4b23      	ldr	r3, [pc, #140]	@ (800c0f0 <xTaskResumeAll+0x130>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	429a      	cmp	r2, r3
 800c068:	d302      	bcc.n	800c070 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c06a:	4b22      	ldr	r3, [pc, #136]	@ (800c0f4 <xTaskResumeAll+0x134>)
 800c06c:	2201      	movs	r2, #1
 800c06e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c070:	4b1c      	ldr	r3, [pc, #112]	@ (800c0e4 <xTaskResumeAll+0x124>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1cc      	bne.n	800c012 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c07e:	f000 fb37 	bl	800c6f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c082:	4b1d      	ldr	r3, [pc, #116]	@ (800c0f8 <xTaskResumeAll+0x138>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d010      	beq.n	800c0b0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c08e:	f000 f837 	bl	800c100 <xTaskIncrementTick>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c098:	4b16      	ldr	r3, [pc, #88]	@ (800c0f4 <xTaskResumeAll+0x134>)
 800c09a:	2201      	movs	r2, #1
 800c09c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1f1      	bne.n	800c08e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c0aa:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <xTaskResumeAll+0x138>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0b0:	4b10      	ldr	r3, [pc, #64]	@ (800c0f4 <xTaskResumeAll+0x134>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d009      	beq.n	800c0cc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c0fc <xTaskResumeAll+0x13c>)
 800c0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0cc:	f000 fd84 	bl	800cbd8 <vPortExitCritical>

	return xAlreadyYielded;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000df4 	.word	0x20000df4
 800c0e0:	20000dcc 	.word	0x20000dcc
 800c0e4:	20000d8c 	.word	0x20000d8c
 800c0e8:	20000dd4 	.word	0x20000dd4
 800c0ec:	20000cd0 	.word	0x20000cd0
 800c0f0:	20000ccc 	.word	0x20000ccc
 800c0f4:	20000de0 	.word	0x20000de0
 800c0f8:	20000ddc 	.word	0x20000ddc
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c10a:	4b50      	ldr	r3, [pc, #320]	@ (800c24c <xTaskIncrementTick+0x14c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f040 808b 	bne.w	800c22a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c114:	4b4e      	ldr	r3, [pc, #312]	@ (800c250 <xTaskIncrementTick+0x150>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	3301      	adds	r3, #1
 800c11a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c11c:	4a4c      	ldr	r2, [pc, #304]	@ (800c250 <xTaskIncrementTick+0x150>)
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d123      	bne.n	800c170 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c128:	4b4a      	ldr	r3, [pc, #296]	@ (800c254 <xTaskIncrementTick+0x154>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00d      	beq.n	800c14e <xTaskIncrementTick+0x4e>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c136:	b672      	cpsid	i
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	b662      	cpsie	i
 800c146:	603b      	str	r3, [r7, #0]
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	e7fd      	b.n	800c14a <xTaskIncrementTick+0x4a>
 800c14e:	4b41      	ldr	r3, [pc, #260]	@ (800c254 <xTaskIncrementTick+0x154>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	4b40      	ldr	r3, [pc, #256]	@ (800c258 <xTaskIncrementTick+0x158>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a3e      	ldr	r2, [pc, #248]	@ (800c254 <xTaskIncrementTick+0x154>)
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	4a3e      	ldr	r2, [pc, #248]	@ (800c258 <xTaskIncrementTick+0x158>)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	4b3e      	ldr	r3, [pc, #248]	@ (800c25c <xTaskIncrementTick+0x15c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	4a3c      	ldr	r2, [pc, #240]	@ (800c25c <xTaskIncrementTick+0x15c>)
 800c16a:	6013      	str	r3, [r2, #0]
 800c16c:	f000 fac0 	bl	800c6f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c170:	4b3b      	ldr	r3, [pc, #236]	@ (800c260 <xTaskIncrementTick+0x160>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	429a      	cmp	r2, r3
 800c178:	d348      	bcc.n	800c20c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c17a:	4b36      	ldr	r3, [pc, #216]	@ (800c254 <xTaskIncrementTick+0x154>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d104      	bne.n	800c18e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	4b36      	ldr	r3, [pc, #216]	@ (800c260 <xTaskIncrementTick+0x160>)
 800c186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c18a:	601a      	str	r2, [r3, #0]
					break;
 800c18c:	e03e      	b.n	800c20c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c18e:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <xTaskIncrementTick+0x154>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d203      	bcs.n	800c1ae <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1a6:	4a2e      	ldr	r2, [pc, #184]	@ (800c260 <xTaskIncrementTick+0x160>)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1ac:	e02e      	b.n	800c20c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe feea 	bl	800af8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	3318      	adds	r3, #24
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fee1 	bl	800af8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	409a      	lsls	r2, r3
 800c1d2:	4b24      	ldr	r3, [pc, #144]	@ (800c264 <xTaskIncrementTick+0x164>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	4a22      	ldr	r2, [pc, #136]	@ (800c264 <xTaskIncrementTick+0x164>)
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800c268 <xTaskIncrementTick+0x168>)
 800c1ea:	441a      	add	r2, r3
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f7fe fe6d 	bl	800aed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	@ (800c26c <xTaskIncrementTick+0x16c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c202:	429a      	cmp	r2, r3
 800c204:	d3b9      	bcc.n	800c17a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c206:	2301      	movs	r3, #1
 800c208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c20a:	e7b6      	b.n	800c17a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c20c:	4b17      	ldr	r3, [pc, #92]	@ (800c26c <xTaskIncrementTick+0x16c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c212:	4915      	ldr	r1, [pc, #84]	@ (800c268 <xTaskIncrementTick+0x168>)
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	440b      	add	r3, r1
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d907      	bls.n	800c234 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c224:	2301      	movs	r3, #1
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	e004      	b.n	800c234 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c22a:	4b11      	ldr	r3, [pc, #68]	@ (800c270 <xTaskIncrementTick+0x170>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3301      	adds	r3, #1
 800c230:	4a0f      	ldr	r2, [pc, #60]	@ (800c270 <xTaskIncrementTick+0x170>)
 800c232:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c234:	4b0f      	ldr	r3, [pc, #60]	@ (800c274 <xTaskIncrementTick+0x174>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c240:	697b      	ldr	r3, [r7, #20]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20000df4 	.word	0x20000df4
 800c250:	20000dd0 	.word	0x20000dd0
 800c254:	20000d84 	.word	0x20000d84
 800c258:	20000d88 	.word	0x20000d88
 800c25c:	20000de4 	.word	0x20000de4
 800c260:	20000dec 	.word	0x20000dec
 800c264:	20000dd4 	.word	0x20000dd4
 800c268:	20000cd0 	.word	0x20000cd0
 800c26c:	20000ccc 	.word	0x20000ccc
 800c270:	20000ddc 	.word	0x20000ddc
 800c274:	20000de0 	.word	0x20000de0

0800c278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c278:	b480      	push	{r7}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c27e:	4b2b      	ldr	r3, [pc, #172]	@ (800c32c <vTaskSwitchContext+0xb4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c286:	4b2a      	ldr	r3, [pc, #168]	@ (800c330 <vTaskSwitchContext+0xb8>)
 800c288:	2201      	movs	r2, #1
 800c28a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c28c:	e047      	b.n	800c31e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c28e:	4b28      	ldr	r3, [pc, #160]	@ (800c330 <vTaskSwitchContext+0xb8>)
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c294:	4b27      	ldr	r3, [pc, #156]	@ (800c334 <vTaskSwitchContext+0xbc>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	fab3 f383 	clz	r3, r3
 800c2a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c2a2:	7afb      	ldrb	r3, [r7, #11]
 800c2a4:	f1c3 031f 	rsb	r3, r3, #31
 800c2a8:	617b      	str	r3, [r7, #20]
 800c2aa:	4923      	ldr	r1, [pc, #140]	@ (800c338 <vTaskSwitchContext+0xc0>)
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	440b      	add	r3, r1
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10d      	bne.n	800c2da <vTaskSwitchContext+0x62>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c2:	b672      	cpsid	i
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	b662      	cpsie	i
 800c2d2:	607b      	str	r3, [r7, #4]
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	e7fd      	b.n	800c2d6 <vTaskSwitchContext+0x5e>
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4a14      	ldr	r2, [pc, #80]	@ (800c338 <vTaskSwitchContext+0xc0>)
 800c2e6:	4413      	add	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	605a      	str	r2, [r3, #4]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	685a      	ldr	r2, [r3, #4]
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d104      	bne.n	800c30a <vTaskSwitchContext+0x92>
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	605a      	str	r2, [r3, #4]
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4a0a      	ldr	r2, [pc, #40]	@ (800c33c <vTaskSwitchContext+0xc4>)
 800c312:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c314:	4b09      	ldr	r3, [pc, #36]	@ (800c33c <vTaskSwitchContext+0xc4>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	334c      	adds	r3, #76	@ 0x4c
 800c31a:	4a09      	ldr	r2, [pc, #36]	@ (800c340 <vTaskSwitchContext+0xc8>)
 800c31c:	6013      	str	r3, [r2, #0]
}
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	20000df4 	.word	0x20000df4
 800c330:	20000de0 	.word	0x20000de0
 800c334:	20000dd4 	.word	0x20000dd4
 800c338:	20000cd0 	.word	0x20000cd0
 800c33c:	20000ccc 	.word	0x20000ccc
 800c340:	2000004c 	.word	0x2000004c

0800c344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10d      	bne.n	800c370 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c358:	b672      	cpsid	i
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	b662      	cpsie	i
 800c368:	60fb      	str	r3, [r7, #12]
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	e7fd      	b.n	800c36c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c370:	4b07      	ldr	r3, [pc, #28]	@ (800c390 <vTaskPlaceOnEventList+0x4c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3318      	adds	r3, #24
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7fe fdce 	bl	800af1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c37e:	2101      	movs	r1, #1
 800c380:	6838      	ldr	r0, [r7, #0]
 800c382:	f000 fa7f 	bl	800c884 <prvAddCurrentTaskToDelayedList>
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20000ccc 	.word	0x20000ccc

0800c394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10d      	bne.n	800c3c6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ae:	b672      	cpsid	i
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	b662      	cpsie	i
 800c3be:	60fb      	str	r3, [r7, #12]
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	3318      	adds	r3, #24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe fdde 	bl	800af8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c448 <xTaskRemoveFromEventList+0xb4>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d11c      	bne.n	800c412 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe fdd5 	bl	800af8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	409a      	lsls	r2, r3
 800c3ea:	4b18      	ldr	r3, [pc, #96]	@ (800c44c <xTaskRemoveFromEventList+0xb8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	4a16      	ldr	r2, [pc, #88]	@ (800c44c <xTaskRemoveFromEventList+0xb8>)
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4a13      	ldr	r2, [pc, #76]	@ (800c450 <xTaskRemoveFromEventList+0xbc>)
 800c402:	441a      	add	r2, r3
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fe fd61 	bl	800aed2 <vListInsertEnd>
 800c410:	e005      	b.n	800c41e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	3318      	adds	r3, #24
 800c416:	4619      	mov	r1, r3
 800c418:	480e      	ldr	r0, [pc, #56]	@ (800c454 <xTaskRemoveFromEventList+0xc0>)
 800c41a:	f7fe fd5a 	bl	800aed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c422:	4b0d      	ldr	r3, [pc, #52]	@ (800c458 <xTaskRemoveFromEventList+0xc4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c428:	429a      	cmp	r2, r3
 800c42a:	d905      	bls.n	800c438 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c42c:	2301      	movs	r3, #1
 800c42e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c430:	4b0a      	ldr	r3, [pc, #40]	@ (800c45c <xTaskRemoveFromEventList+0xc8>)
 800c432:	2201      	movs	r2, #1
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	e001      	b.n	800c43c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c43c:	697b      	ldr	r3, [r7, #20]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20000df4 	.word	0x20000df4
 800c44c:	20000dd4 	.word	0x20000dd4
 800c450:	20000cd0 	.word	0x20000cd0
 800c454:	20000d8c 	.word	0x20000d8c
 800c458:	20000ccc 	.word	0x20000ccc
 800c45c:	20000de0 	.word	0x20000de0

0800c460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c468:	4b06      	ldr	r3, [pc, #24]	@ (800c484 <vTaskInternalSetTimeOutState+0x24>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c470:	4b05      	ldr	r3, [pc, #20]	@ (800c488 <vTaskInternalSetTimeOutState+0x28>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	605a      	str	r2, [r3, #4]
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	20000de4 	.word	0x20000de4
 800c488:	20000dd0 	.word	0x20000dd0

0800c48c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10d      	bne.n	800c4b8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a0:	b672      	cpsid	i
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	b662      	cpsie	i
 800c4b0:	613b      	str	r3, [r7, #16]
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	e7fd      	b.n	800c4b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10d      	bne.n	800c4da <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c2:	b672      	cpsid	i
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	b662      	cpsie	i
 800c4d2:	60fb      	str	r3, [r7, #12]
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop
 800c4d8:	e7fd      	b.n	800c4d6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c4da:	f000 fb47 	bl	800cb6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4de:	4b1d      	ldr	r3, [pc, #116]	@ (800c554 <xTaskCheckForTimeOut+0xc8>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	69ba      	ldr	r2, [r7, #24]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4f6:	d102      	bne.n	800c4fe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	e023      	b.n	800c546 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b15      	ldr	r3, [pc, #84]	@ (800c558 <xTaskCheckForTimeOut+0xcc>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d007      	beq.n	800c51a <xTaskCheckForTimeOut+0x8e>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	69ba      	ldr	r2, [r7, #24]
 800c510:	429a      	cmp	r2, r3
 800c512:	d302      	bcc.n	800c51a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c514:	2301      	movs	r3, #1
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	e015      	b.n	800c546 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	429a      	cmp	r2, r3
 800c522:	d20b      	bcs.n	800c53c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	1ad2      	subs	r2, r2, r3
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff95 	bl	800c460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c536:	2300      	movs	r3, #0
 800c538:	61fb      	str	r3, [r7, #28]
 800c53a:	e004      	b.n	800c546 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2200      	movs	r2, #0
 800c540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c542:	2301      	movs	r3, #1
 800c544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c546:	f000 fb47 	bl	800cbd8 <vPortExitCritical>

	return xReturn;
 800c54a:	69fb      	ldr	r3, [r7, #28]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3720      	adds	r7, #32
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20000dd0 	.word	0x20000dd0
 800c558:	20000de4 	.word	0x20000de4

0800c55c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c560:	4b03      	ldr	r3, [pc, #12]	@ (800c570 <vTaskMissedYield+0x14>)
 800c562:	2201      	movs	r2, #1
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	bf00      	nop
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000de0 	.word	0x20000de0

0800c574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c57c:	f000 f852 	bl	800c624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c580:	4b06      	ldr	r3, [pc, #24]	@ (800c59c <prvIdleTask+0x28>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d9f9      	bls.n	800c57c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c588:	4b05      	ldr	r3, [pc, #20]	@ (800c5a0 <prvIdleTask+0x2c>)
 800c58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c598:	e7f0      	b.n	800c57c <prvIdleTask+0x8>
 800c59a:	bf00      	nop
 800c59c:	20000cd0 	.word	0x20000cd0
 800c5a0:	e000ed04 	.word	0xe000ed04

0800c5a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	e00c      	b.n	800c5ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4a12      	ldr	r2, [pc, #72]	@ (800c604 <prvInitialiseTaskLists+0x60>)
 800c5bc:	4413      	add	r3, r2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fc5a 	bl	800ae78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	607b      	str	r3, [r7, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b06      	cmp	r3, #6
 800c5ce:	d9ef      	bls.n	800c5b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5d0:	480d      	ldr	r0, [pc, #52]	@ (800c608 <prvInitialiseTaskLists+0x64>)
 800c5d2:	f7fe fc51 	bl	800ae78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5d6:	480d      	ldr	r0, [pc, #52]	@ (800c60c <prvInitialiseTaskLists+0x68>)
 800c5d8:	f7fe fc4e 	bl	800ae78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5dc:	480c      	ldr	r0, [pc, #48]	@ (800c610 <prvInitialiseTaskLists+0x6c>)
 800c5de:	f7fe fc4b 	bl	800ae78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5e2:	480c      	ldr	r0, [pc, #48]	@ (800c614 <prvInitialiseTaskLists+0x70>)
 800c5e4:	f7fe fc48 	bl	800ae78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5e8:	480b      	ldr	r0, [pc, #44]	@ (800c618 <prvInitialiseTaskLists+0x74>)
 800c5ea:	f7fe fc45 	bl	800ae78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c61c <prvInitialiseTaskLists+0x78>)
 800c5f0:	4a05      	ldr	r2, [pc, #20]	@ (800c608 <prvInitialiseTaskLists+0x64>)
 800c5f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c620 <prvInitialiseTaskLists+0x7c>)
 800c5f6:	4a05      	ldr	r2, [pc, #20]	@ (800c60c <prvInitialiseTaskLists+0x68>)
 800c5f8:	601a      	str	r2, [r3, #0]
}
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20000cd0 	.word	0x20000cd0
 800c608:	20000d5c 	.word	0x20000d5c
 800c60c:	20000d70 	.word	0x20000d70
 800c610:	20000d8c 	.word	0x20000d8c
 800c614:	20000da0 	.word	0x20000da0
 800c618:	20000db8 	.word	0x20000db8
 800c61c:	20000d84 	.word	0x20000d84
 800c620:	20000d88 	.word	0x20000d88

0800c624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c62a:	e019      	b.n	800c660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c62c:	f000 fa9e 	bl	800cb6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c630:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <prvCheckTasksWaitingTermination+0x50>)
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fca5 	bl	800af8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c642:	4b0d      	ldr	r3, [pc, #52]	@ (800c678 <prvCheckTasksWaitingTermination+0x54>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3b01      	subs	r3, #1
 800c648:	4a0b      	ldr	r2, [pc, #44]	@ (800c678 <prvCheckTasksWaitingTermination+0x54>)
 800c64a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c64c:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <prvCheckTasksWaitingTermination+0x58>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3b01      	subs	r3, #1
 800c652:	4a0a      	ldr	r2, [pc, #40]	@ (800c67c <prvCheckTasksWaitingTermination+0x58>)
 800c654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c656:	f000 fabf 	bl	800cbd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f810 	bl	800c680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c660:	4b06      	ldr	r3, [pc, #24]	@ (800c67c <prvCheckTasksWaitingTermination+0x58>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1e1      	bne.n	800c62c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20000da0 	.word	0x20000da0
 800c678:	20000dcc 	.word	0x20000dcc
 800c67c:	20000db4 	.word	0x20000db4

0800c680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	334c      	adds	r3, #76	@ 0x4c
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fd8d 	bl	800d1ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d108      	bne.n	800c6ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 fc5f 	bl	800cf64 <vPortFree>
				vPortFree( pxTCB );
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fc5c 	bl	800cf64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6ac:	e01b      	b.n	800c6e6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d103      	bne.n	800c6c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fc53 	bl	800cf64 <vPortFree>
	}
 800c6be:	e012      	b.n	800c6e6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d00d      	beq.n	800c6e6 <prvDeleteTCB+0x66>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ce:	b672      	cpsid	i
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	b662      	cpsie	i
 800c6de:	60fb      	str	r3, [r7, #12]
}
 800c6e0:	bf00      	nop
 800c6e2:	bf00      	nop
 800c6e4:	e7fd      	b.n	800c6e2 <prvDeleteTCB+0x62>
	}
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c728 <prvResetNextTaskUnblockTime+0x38>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c700:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <prvResetNextTaskUnblockTime+0x3c>)
 800c702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c708:	e008      	b.n	800c71c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70a:	4b07      	ldr	r3, [pc, #28]	@ (800c728 <prvResetNextTaskUnblockTime+0x38>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4a04      	ldr	r2, [pc, #16]	@ (800c72c <prvResetNextTaskUnblockTime+0x3c>)
 800c71a:	6013      	str	r3, [r2, #0]
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	20000d84 	.word	0x20000d84
 800c72c:	20000dec 	.word	0x20000dec

0800c730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c736:	4b0b      	ldr	r3, [pc, #44]	@ (800c764 <xTaskGetSchedulerState+0x34>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c73e:	2301      	movs	r3, #1
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	e008      	b.n	800c756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c744:	4b08      	ldr	r3, [pc, #32]	@ (800c768 <xTaskGetSchedulerState+0x38>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d102      	bne.n	800c752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c74c:	2302      	movs	r3, #2
 800c74e:	607b      	str	r3, [r7, #4]
 800c750:	e001      	b.n	800c756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c752:	2300      	movs	r3, #0
 800c754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c756:	687b      	ldr	r3, [r7, #4]
	}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	20000dd8 	.word	0x20000dd8
 800c768:	20000df4 	.word	0x20000df4

0800c76c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d074      	beq.n	800c86c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c782:	4b3d      	ldr	r3, [pc, #244]	@ (800c878 <xTaskPriorityDisinherit+0x10c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d00d      	beq.n	800c7a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c790:	b672      	cpsid	i
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	b662      	cpsie	i
 800c7a0:	60fb      	str	r3, [r7, #12]
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	e7fd      	b.n	800c7a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10d      	bne.n	800c7cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b4:	b672      	cpsid	i
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	b662      	cpsie	i
 800c7c4:	60bb      	str	r3, [r7, #8]
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	e7fd      	b.n	800c7c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7d0:	1e5a      	subs	r2, r3, #1
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d044      	beq.n	800c86c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d140      	bne.n	800c86c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe fbcc 	bl	800af8c <uxListRemove>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d115      	bne.n	800c826 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7fe:	491f      	ldr	r1, [pc, #124]	@ (800c87c <xTaskPriorityDisinherit+0x110>)
 800c800:	4613      	mov	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	440b      	add	r3, r1
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10a      	bne.n	800c826 <xTaskPriorityDisinherit+0xba>
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c814:	2201      	movs	r2, #1
 800c816:	fa02 f303 	lsl.w	r3, r2, r3
 800c81a:	43da      	mvns	r2, r3
 800c81c:	4b18      	ldr	r3, [pc, #96]	@ (800c880 <xTaskPriorityDisinherit+0x114>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4013      	ands	r3, r2
 800c822:	4a17      	ldr	r2, [pc, #92]	@ (800c880 <xTaskPriorityDisinherit+0x114>)
 800c824:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c832:	f1c3 0207 	rsb	r2, r3, #7
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83e:	2201      	movs	r2, #1
 800c840:	409a      	lsls	r2, r3
 800c842:	4b0f      	ldr	r3, [pc, #60]	@ (800c880 <xTaskPriorityDisinherit+0x114>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4313      	orrs	r3, r2
 800c848:	4a0d      	ldr	r2, [pc, #52]	@ (800c880 <xTaskPriorityDisinherit+0x114>)
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c850:	4613      	mov	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4a08      	ldr	r2, [pc, #32]	@ (800c87c <xTaskPriorityDisinherit+0x110>)
 800c85a:	441a      	add	r2, r3
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3304      	adds	r3, #4
 800c860:	4619      	mov	r1, r3
 800c862:	4610      	mov	r0, r2
 800c864:	f7fe fb35 	bl	800aed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c868:	2301      	movs	r3, #1
 800c86a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c86c:	697b      	ldr	r3, [r7, #20]
	}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20000ccc 	.word	0x20000ccc
 800c87c:	20000cd0 	.word	0x20000cd0
 800c880:	20000dd4 	.word	0x20000dd4

0800c884 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c88e:	4b29      	ldr	r3, [pc, #164]	@ (800c934 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c894:	4b28      	ldr	r3, [pc, #160]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3304      	adds	r3, #4
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fb76 	bl	800af8c <uxListRemove>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10b      	bne.n	800c8be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c8a6:	4b24      	ldr	r3, [pc, #144]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b2:	43da      	mvns	r2, r3
 800c8b4:	4b21      	ldr	r3, [pc, #132]	@ (800c93c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	4a20      	ldr	r2, [pc, #128]	@ (800c93c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c8bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8c4:	d10a      	bne.n	800c8dc <prvAddCurrentTaskToDelayedList+0x58>
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	481a      	ldr	r0, [pc, #104]	@ (800c940 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c8d6:	f7fe fafc 	bl	800aed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8da:	e026      	b.n	800c92a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8e4:	4b14      	ldr	r3, [pc, #80]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d209      	bcs.n	800c908 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8f4:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7fe fb0a 	bl	800af1a <vListInsert>
}
 800c906:	e010      	b.n	800c92a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c908:	4b0f      	ldr	r3, [pc, #60]	@ (800c948 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	4b0a      	ldr	r3, [pc, #40]	@ (800c938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3304      	adds	r3, #4
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f7fe fb00 	bl	800af1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c91a:	4b0c      	ldr	r3, [pc, #48]	@ (800c94c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	429a      	cmp	r2, r3
 800c922:	d202      	bcs.n	800c92a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c924:	4a09      	ldr	r2, [pc, #36]	@ (800c94c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	6013      	str	r3, [r2, #0]
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20000dd0 	.word	0x20000dd0
 800c938:	20000ccc 	.word	0x20000ccc
 800c93c:	20000dd4 	.word	0x20000dd4
 800c940:	20000db8 	.word	0x20000db8
 800c944:	20000d88 	.word	0x20000d88
 800c948:	20000d84 	.word	0x20000d84
 800c94c:	20000dec 	.word	0x20000dec

0800c950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3b04      	subs	r3, #4
 800c960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3b04      	subs	r3, #4
 800c96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	f023 0201 	bic.w	r2, r3, #1
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3b04      	subs	r3, #4
 800c97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c980:	4a0c      	ldr	r2, [pc, #48]	@ (800c9b4 <pxPortInitialiseStack+0x64>)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3b14      	subs	r3, #20
 800c98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3b04      	subs	r3, #4
 800c996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f06f 0202 	mvn.w	r2, #2
 800c99e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3b20      	subs	r3, #32
 800c9a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	0800c9b9 	.word	0x0800c9b9

0800c9b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9c2:	4b15      	ldr	r3, [pc, #84]	@ (800ca18 <prvTaskExitError+0x60>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9ca:	d00d      	beq.n	800c9e8 <prvTaskExitError+0x30>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d0:	b672      	cpsid	i
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	b662      	cpsie	i
 800c9e0:	60fb      	str	r3, [r7, #12]
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	e7fd      	b.n	800c9e4 <prvTaskExitError+0x2c>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ec:	b672      	cpsid	i
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	b662      	cpsie	i
 800c9fc:	60bb      	str	r3, [r7, #8]
}
 800c9fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca00:	bf00      	nop
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d0fc      	beq.n	800ca02 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca08:	bf00      	nop
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	20000048 	.word	0x20000048
 800ca1c:	00000000 	.word	0x00000000

0800ca20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca20:	4b07      	ldr	r3, [pc, #28]	@ (800ca40 <pxCurrentTCBConst2>)
 800ca22:	6819      	ldr	r1, [r3, #0]
 800ca24:	6808      	ldr	r0, [r1, #0]
 800ca26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	f380 8809 	msr	PSP, r0
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f04f 0000 	mov.w	r0, #0
 800ca36:	f380 8811 	msr	BASEPRI, r0
 800ca3a:	4770      	bx	lr
 800ca3c:	f3af 8000 	nop.w

0800ca40 <pxCurrentTCBConst2>:
 800ca40:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop

0800ca48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca48:	4808      	ldr	r0, [pc, #32]	@ (800ca6c <prvPortStartFirstTask+0x24>)
 800ca4a:	6800      	ldr	r0, [r0, #0]
 800ca4c:	6800      	ldr	r0, [r0, #0]
 800ca4e:	f380 8808 	msr	MSP, r0
 800ca52:	f04f 0000 	mov.w	r0, #0
 800ca56:	f380 8814 	msr	CONTROL, r0
 800ca5a:	b662      	cpsie	i
 800ca5c:	b661      	cpsie	f
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	df00      	svc	0
 800ca68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca6a:	bf00      	nop
 800ca6c:	e000ed08 	.word	0xe000ed08

0800ca70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca76:	4b37      	ldr	r3, [pc, #220]	@ (800cb54 <xPortStartScheduler+0xe4>)
 800ca78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	22ff      	movs	r2, #255	@ 0xff
 800ca86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca90:	78fb      	ldrb	r3, [r7, #3]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	4b2f      	ldr	r3, [pc, #188]	@ (800cb58 <xPortStartScheduler+0xe8>)
 800ca9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca9e:	4b2f      	ldr	r3, [pc, #188]	@ (800cb5c <xPortStartScheduler+0xec>)
 800caa0:	2207      	movs	r2, #7
 800caa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caa4:	e009      	b.n	800caba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800caa6:	4b2d      	ldr	r3, [pc, #180]	@ (800cb5c <xPortStartScheduler+0xec>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3b01      	subs	r3, #1
 800caac:	4a2b      	ldr	r2, [pc, #172]	@ (800cb5c <xPortStartScheduler+0xec>)
 800caae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cac2:	2b80      	cmp	r3, #128	@ 0x80
 800cac4:	d0ef      	beq.n	800caa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cac6:	4b25      	ldr	r3, [pc, #148]	@ (800cb5c <xPortStartScheduler+0xec>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1c3 0307 	rsb	r3, r3, #7
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d00d      	beq.n	800caee <xPortStartScheduler+0x7e>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad6:	b672      	cpsid	i
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	b662      	cpsie	i
 800cae6:	60bb      	str	r3, [r7, #8]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caee:	4b1b      	ldr	r3, [pc, #108]	@ (800cb5c <xPortStartScheduler+0xec>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	4a19      	ldr	r2, [pc, #100]	@ (800cb5c <xPortStartScheduler+0xec>)
 800caf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caf8:	4b18      	ldr	r3, [pc, #96]	@ (800cb5c <xPortStartScheduler+0xec>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb00:	4a16      	ldr	r2, [pc, #88]	@ (800cb5c <xPortStartScheduler+0xec>)
 800cb02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb0c:	4b14      	ldr	r3, [pc, #80]	@ (800cb60 <xPortStartScheduler+0xf0>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a13      	ldr	r2, [pc, #76]	@ (800cb60 <xPortStartScheduler+0xf0>)
 800cb12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cb16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb18:	4b11      	ldr	r3, [pc, #68]	@ (800cb60 <xPortStartScheduler+0xf0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a10      	ldr	r2, [pc, #64]	@ (800cb60 <xPortStartScheduler+0xf0>)
 800cb1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cb22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb24:	f000 f8dc 	bl	800cce0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb28:	4b0e      	ldr	r3, [pc, #56]	@ (800cb64 <xPortStartScheduler+0xf4>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb2e:	f000 f8fb 	bl	800cd28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb32:	4b0d      	ldr	r3, [pc, #52]	@ (800cb68 <xPortStartScheduler+0xf8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0c      	ldr	r2, [pc, #48]	@ (800cb68 <xPortStartScheduler+0xf8>)
 800cb38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cb3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb3e:	f7ff ff83 	bl	800ca48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb42:	f7ff fb99 	bl	800c278 <vTaskSwitchContext>
	prvTaskExitError();
 800cb46:	f7ff ff37 	bl	800c9b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	e000e400 	.word	0xe000e400
 800cb58:	20000df8 	.word	0x20000df8
 800cb5c:	20000dfc 	.word	0x20000dfc
 800cb60:	e000ed20 	.word	0xe000ed20
 800cb64:	20000048 	.word	0x20000048
 800cb68:	e000ef34 	.word	0xe000ef34

0800cb6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb76:	b672      	cpsid	i
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	b662      	cpsie	i
 800cb86:	607b      	str	r3, [r7, #4]
}
 800cb88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb8a:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <vPortEnterCritical+0x64>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	4a0f      	ldr	r2, [pc, #60]	@ (800cbd0 <vPortEnterCritical+0x64>)
 800cb92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb94:	4b0e      	ldr	r3, [pc, #56]	@ (800cbd0 <vPortEnterCritical+0x64>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d112      	bne.n	800cbc2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd4 <vPortEnterCritical+0x68>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <vPortEnterCritical+0x56>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbaa:	b672      	cpsid	i
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	b662      	cpsie	i
 800cbba:	603b      	str	r3, [r7, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	e7fd      	b.n	800cbbe <vPortEnterCritical+0x52>
	}
}
 800cbc2:	bf00      	nop
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20000048 	.word	0x20000048
 800cbd4:	e000ed04 	.word	0xe000ed04

0800cbd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbde:	4b13      	ldr	r3, [pc, #76]	@ (800cc2c <vPortExitCritical+0x54>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10d      	bne.n	800cc02 <vPortExitCritical+0x2a>
	__asm volatile
 800cbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbea:	b672      	cpsid	i
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	b662      	cpsie	i
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
 800cbfe:	bf00      	nop
 800cc00:	e7fd      	b.n	800cbfe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cc02:	4b0a      	ldr	r3, [pc, #40]	@ (800cc2c <vPortExitCritical+0x54>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4a08      	ldr	r2, [pc, #32]	@ (800cc2c <vPortExitCritical+0x54>)
 800cc0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc0c:	4b07      	ldr	r3, [pc, #28]	@ (800cc2c <vPortExitCritical+0x54>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <vPortExitCritical+0x48>
 800cc14:	2300      	movs	r3, #0
 800cc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f383 8811 	msr	BASEPRI, r3
}
 800cc1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20000048 	.word	0x20000048

0800cc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc30:	f3ef 8009 	mrs	r0, PSP
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4b15      	ldr	r3, [pc, #84]	@ (800cc90 <pxCurrentTCBConst>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f01e 0f10 	tst.w	lr, #16
 800cc40:	bf08      	it	eq
 800cc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cc54:	b672      	cpsid	i
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	b662      	cpsie	i
 800cc64:	f7ff fb08 	bl	800c278 <vTaskSwitchContext>
 800cc68:	f04f 0000 	mov.w	r0, #0
 800cc6c:	f380 8811 	msr	BASEPRI, r0
 800cc70:	bc09      	pop	{r0, r3}
 800cc72:	6819      	ldr	r1, [r3, #0]
 800cc74:	6808      	ldr	r0, [r1, #0]
 800cc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7a:	f01e 0f10 	tst.w	lr, #16
 800cc7e:	bf08      	it	eq
 800cc80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc84:	f380 8809 	msr	PSP, r0
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop

0800cc90 <pxCurrentTCBConst>:
 800cc90:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	b672      	cpsid	i
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	b662      	cpsie	i
 800ccb2:	607b      	str	r3, [r7, #4]
}
 800ccb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccb6:	f7ff fa23 	bl	800c100 <xTaskIncrementTick>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d003      	beq.n	800ccc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccc0:	4b06      	ldr	r3, [pc, #24]	@ (800ccdc <SysTick_Handler+0x44>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	f383 8811 	msr	BASEPRI, r3
}
 800ccd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	e000ed04 	.word	0xe000ed04

0800cce0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cce0:	b480      	push	{r7}
 800cce2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cce4:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <vPortSetupTimerInterrupt+0x34>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccea:	4b0b      	ldr	r3, [pc, #44]	@ (800cd18 <vPortSetupTimerInterrupt+0x38>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	@ (800cd1c <vPortSetupTimerInterrupt+0x3c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a0a      	ldr	r2, [pc, #40]	@ (800cd20 <vPortSetupTimerInterrupt+0x40>)
 800ccf6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccfa:	099b      	lsrs	r3, r3, #6
 800ccfc:	4a09      	ldr	r2, [pc, #36]	@ (800cd24 <vPortSetupTimerInterrupt+0x44>)
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd02:	4b04      	ldr	r3, [pc, #16]	@ (800cd14 <vPortSetupTimerInterrupt+0x34>)
 800cd04:	2207      	movs	r2, #7
 800cd06:	601a      	str	r2, [r3, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	e000e010 	.word	0xe000e010
 800cd18:	e000e018 	.word	0xe000e018
 800cd1c:	2000003c 	.word	0x2000003c
 800cd20:	10624dd3 	.word	0x10624dd3
 800cd24:	e000e014 	.word	0xe000e014

0800cd28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cd38 <vPortEnableVFP+0x10>
 800cd2c:	6801      	ldr	r1, [r0, #0]
 800cd2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cd32:	6001      	str	r1, [r0, #0]
 800cd34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd36:	bf00      	nop
 800cd38:	e000ed88 	.word	0xe000ed88

0800cd3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd42:	f3ef 8305 	mrs	r3, IPSR
 800cd46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b0f      	cmp	r3, #15
 800cd4c:	d917      	bls.n	800cd7e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd4e:	4a1a      	ldr	r2, [pc, #104]	@ (800cdb8 <vPortValidateInterruptPriority+0x7c>)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd58:	4b18      	ldr	r3, [pc, #96]	@ (800cdbc <vPortValidateInterruptPriority+0x80>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	7afa      	ldrb	r2, [r7, #11]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d20d      	bcs.n	800cd7e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd66:	b672      	cpsid	i
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	b662      	cpsie	i
 800cd76:	607b      	str	r3, [r7, #4]
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	e7fd      	b.n	800cd7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd7e:	4b10      	ldr	r3, [pc, #64]	@ (800cdc0 <vPortValidateInterruptPriority+0x84>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cd86:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc4 <vPortValidateInterruptPriority+0x88>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d90d      	bls.n	800cdaa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd92:	b672      	cpsid	i
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	b662      	cpsie	i
 800cda2:	603b      	str	r3, [r7, #0]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <vPortValidateInterruptPriority+0x6a>
	}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	e000e3f0 	.word	0xe000e3f0
 800cdbc:	20000df8 	.word	0x20000df8
 800cdc0:	e000ed0c 	.word	0xe000ed0c
 800cdc4:	20000dfc 	.word	0x20000dfc

0800cdc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	@ 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdd4:	f7ff f8e6 	bl	800bfa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdd8:	4b5d      	ldr	r3, [pc, #372]	@ (800cf50 <pvPortMalloc+0x188>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cde0:	f000 f920 	bl	800d024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cde4:	4b5b      	ldr	r3, [pc, #364]	@ (800cf54 <pvPortMalloc+0x18c>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f040 8094 	bne.w	800cf1a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d020      	beq.n	800ce3a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d017      	beq.n	800ce3a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f023 0307 	bic.w	r3, r3, #7
 800ce10:	3308      	adds	r3, #8
 800ce12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00d      	beq.n	800ce3a <pvPortMalloc+0x72>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	b672      	cpsid	i
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	b662      	cpsie	i
 800ce32:	617b      	str	r3, [r7, #20]
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	e7fd      	b.n	800ce36 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d06c      	beq.n	800cf1a <pvPortMalloc+0x152>
 800ce40:	4b45      	ldr	r3, [pc, #276]	@ (800cf58 <pvPortMalloc+0x190>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d867      	bhi.n	800cf1a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce4a:	4b44      	ldr	r3, [pc, #272]	@ (800cf5c <pvPortMalloc+0x194>)
 800ce4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce4e:	4b43      	ldr	r3, [pc, #268]	@ (800cf5c <pvPortMalloc+0x194>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce54:	e004      	b.n	800ce60 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d903      	bls.n	800ce72 <pvPortMalloc+0xaa>
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1f1      	bne.n	800ce56 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce72:	4b37      	ldr	r3, [pc, #220]	@ (800cf50 <pvPortMalloc+0x188>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d04e      	beq.n	800cf1a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce7c:	6a3b      	ldr	r3, [r7, #32]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2208      	movs	r2, #8
 800ce82:	4413      	add	r3, r2
 800ce84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	1ad2      	subs	r2, r2, r3
 800ce96:	2308      	movs	r3, #8
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d922      	bls.n	800cee4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	f003 0307 	and.w	r3, r3, #7
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00d      	beq.n	800cecc <pvPortMalloc+0x104>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb4:	b672      	cpsid	i
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	b662      	cpsie	i
 800cec4:	613b      	str	r3, [r7, #16]
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	e7fd      	b.n	800cec8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cede:	69b8      	ldr	r0, [r7, #24]
 800cee0:	f000 f902 	bl	800d0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cee4:	4b1c      	ldr	r3, [pc, #112]	@ (800cf58 <pvPortMalloc+0x190>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	4a1a      	ldr	r2, [pc, #104]	@ (800cf58 <pvPortMalloc+0x190>)
 800cef0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cef2:	4b19      	ldr	r3, [pc, #100]	@ (800cf58 <pvPortMalloc+0x190>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	4b1a      	ldr	r3, [pc, #104]	@ (800cf60 <pvPortMalloc+0x198>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d203      	bcs.n	800cf06 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cefe:	4b16      	ldr	r3, [pc, #88]	@ (800cf58 <pvPortMalloc+0x190>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a17      	ldr	r2, [pc, #92]	@ (800cf60 <pvPortMalloc+0x198>)
 800cf04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	4b12      	ldr	r3, [pc, #72]	@ (800cf54 <pvPortMalloc+0x18c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf16:	2200      	movs	r2, #0
 800cf18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf1a:	f7ff f851 	bl	800bfc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	f003 0307 	and.w	r3, r3, #7
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00d      	beq.n	800cf44 <pvPortMalloc+0x17c>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2c:	b672      	cpsid	i
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	b662      	cpsie	i
 800cf3c:	60fb      	str	r3, [r7, #12]
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	e7fd      	b.n	800cf40 <pvPortMalloc+0x178>
	return pvReturn;
 800cf44:	69fb      	ldr	r3, [r7, #28]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3728      	adds	r7, #40	@ 0x28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20004a08 	.word	0x20004a08
 800cf54:	20004a14 	.word	0x20004a14
 800cf58:	20004a0c 	.word	0x20004a0c
 800cf5c:	20004a00 	.word	0x20004a00
 800cf60:	20004a10 	.word	0x20004a10

0800cf64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d04e      	beq.n	800d014 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf76:	2308      	movs	r3, #8
 800cf78:	425b      	negs	r3, r3
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	4b24      	ldr	r3, [pc, #144]	@ (800d01c <vPortFree+0xb8>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10d      	bne.n	800cfae <vPortFree+0x4a>
	__asm volatile
 800cf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf96:	b672      	cpsid	i
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	b662      	cpsie	i
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	bf00      	nop
 800cfac:	e7fd      	b.n	800cfaa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00d      	beq.n	800cfd2 <vPortFree+0x6e>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfba:	b672      	cpsid	i
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	b662      	cpsie	i
 800cfca:	60bb      	str	r3, [r7, #8]
}
 800cfcc:	bf00      	nop
 800cfce:	bf00      	nop
 800cfd0:	e7fd      	b.n	800cfce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	4b11      	ldr	r3, [pc, #68]	@ (800d01c <vPortFree+0xb8>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4013      	ands	r3, r2
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d019      	beq.n	800d014 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d115      	bne.n	800d014 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	4b0b      	ldr	r3, [pc, #44]	@ (800d01c <vPortFree+0xb8>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	43db      	mvns	r3, r3
 800cff2:	401a      	ands	r2, r3
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cff8:	f7fe ffd4 	bl	800bfa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	4b07      	ldr	r3, [pc, #28]	@ (800d020 <vPortFree+0xbc>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4413      	add	r3, r2
 800d006:	4a06      	ldr	r2, [pc, #24]	@ (800d020 <vPortFree+0xbc>)
 800d008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d00a:	6938      	ldr	r0, [r7, #16]
 800d00c:	f000 f86c 	bl	800d0e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d010:	f7fe ffd6 	bl	800bfc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d014:	bf00      	nop
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20004a14 	.word	0x20004a14
 800d020:	20004a0c 	.word	0x20004a0c

0800d024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d02a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d030:	4b27      	ldr	r3, [pc, #156]	@ (800d0d0 <prvHeapInit+0xac>)
 800d032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00c      	beq.n	800d058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3307      	adds	r3, #7
 800d042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f023 0307 	bic.w	r3, r3, #7
 800d04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	4a1f      	ldr	r2, [pc, #124]	@ (800d0d0 <prvHeapInit+0xac>)
 800d054:	4413      	add	r3, r2
 800d056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d05c:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d4 <prvHeapInit+0xb0>)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d062:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d4 <prvHeapInit+0xb0>)
 800d064:	2200      	movs	r2, #0
 800d066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	4413      	add	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d070:	2208      	movs	r2, #8
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f023 0307 	bic.w	r3, r3, #7
 800d07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a15      	ldr	r2, [pc, #84]	@ (800d0d8 <prvHeapInit+0xb4>)
 800d084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d086:	4b14      	ldr	r3, [pc, #80]	@ (800d0d8 <prvHeapInit+0xb4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08e:	4b12      	ldr	r3, [pc, #72]	@ (800d0d8 <prvHeapInit+0xb4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d8 <prvHeapInit+0xb4>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d0dc <prvHeapInit+0xb8>)
 800d0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a09      	ldr	r2, [pc, #36]	@ (800d0e0 <prvHeapInit+0xbc>)
 800d0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0bc:	4b09      	ldr	r3, [pc, #36]	@ (800d0e4 <prvHeapInit+0xc0>)
 800d0be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20000e00 	.word	0x20000e00
 800d0d4:	20004a00 	.word	0x20004a00
 800d0d8:	20004a08 	.word	0x20004a08
 800d0dc:	20004a10 	.word	0x20004a10
 800d0e0:	20004a0c 	.word	0x20004a0c
 800d0e4:	20004a14 	.word	0x20004a14

0800d0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0f0:	4b28      	ldr	r3, [pc, #160]	@ (800d194 <prvInsertBlockIntoFreeList+0xac>)
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <prvInsertBlockIntoFreeList+0x14>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d8f7      	bhi.n	800d0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	4413      	add	r3, r2
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d108      	bne.n	800d12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	441a      	add	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d118      	bne.n	800d170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4b15      	ldr	r3, [pc, #84]	@ (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d00d      	beq.n	800d166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	441a      	add	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	e008      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d166:	4b0c      	ldr	r3, [pc, #48]	@ (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	e003      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d002      	beq.n	800d186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20004a00 	.word	0x20004a00
 800d198:	20004a08 	.word	0x20004a08

0800d19c <memset>:
 800d19c:	4402      	add	r2, r0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d100      	bne.n	800d1a6 <memset+0xa>
 800d1a4:	4770      	bx	lr
 800d1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1aa:	e7f9      	b.n	800d1a0 <memset+0x4>

0800d1ac <_reclaim_reent>:
 800d1ac:	4b29      	ldr	r3, [pc, #164]	@ (800d254 <_reclaim_reent+0xa8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4283      	cmp	r3, r0
 800d1b2:	b570      	push	{r4, r5, r6, lr}
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	d04b      	beq.n	800d250 <_reclaim_reent+0xa4>
 800d1b8:	69c3      	ldr	r3, [r0, #28]
 800d1ba:	b1ab      	cbz	r3, 800d1e8 <_reclaim_reent+0x3c>
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	b16b      	cbz	r3, 800d1dc <_reclaim_reent+0x30>
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	69e3      	ldr	r3, [r4, #28]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	5959      	ldr	r1, [r3, r5]
 800d1c8:	2900      	cmp	r1, #0
 800d1ca:	d13b      	bne.n	800d244 <_reclaim_reent+0x98>
 800d1cc:	3504      	adds	r5, #4
 800d1ce:	2d80      	cmp	r5, #128	@ 0x80
 800d1d0:	d1f7      	bne.n	800d1c2 <_reclaim_reent+0x16>
 800d1d2:	69e3      	ldr	r3, [r4, #28]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	68d9      	ldr	r1, [r3, #12]
 800d1d8:	f000 f872 	bl	800d2c0 <_free_r>
 800d1dc:	69e3      	ldr	r3, [r4, #28]
 800d1de:	6819      	ldr	r1, [r3, #0]
 800d1e0:	b111      	cbz	r1, 800d1e8 <_reclaim_reent+0x3c>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f86c 	bl	800d2c0 <_free_r>
 800d1e8:	6961      	ldr	r1, [r4, #20]
 800d1ea:	b111      	cbz	r1, 800d1f2 <_reclaim_reent+0x46>
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f867 	bl	800d2c0 <_free_r>
 800d1f2:	69e1      	ldr	r1, [r4, #28]
 800d1f4:	b111      	cbz	r1, 800d1fc <_reclaim_reent+0x50>
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 f862 	bl	800d2c0 <_free_r>
 800d1fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d1fe:	b111      	cbz	r1, 800d206 <_reclaim_reent+0x5a>
 800d200:	4620      	mov	r0, r4
 800d202:	f000 f85d 	bl	800d2c0 <_free_r>
 800d206:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d208:	b111      	cbz	r1, 800d210 <_reclaim_reent+0x64>
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f858 	bl	800d2c0 <_free_r>
 800d210:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d212:	b111      	cbz	r1, 800d21a <_reclaim_reent+0x6e>
 800d214:	4620      	mov	r0, r4
 800d216:	f000 f853 	bl	800d2c0 <_free_r>
 800d21a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d21c:	b111      	cbz	r1, 800d224 <_reclaim_reent+0x78>
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 f84e 	bl	800d2c0 <_free_r>
 800d224:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d226:	b111      	cbz	r1, 800d22e <_reclaim_reent+0x82>
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 f849 	bl	800d2c0 <_free_r>
 800d22e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d230:	b111      	cbz	r1, 800d238 <_reclaim_reent+0x8c>
 800d232:	4620      	mov	r0, r4
 800d234:	f000 f844 	bl	800d2c0 <_free_r>
 800d238:	6a23      	ldr	r3, [r4, #32]
 800d23a:	b14b      	cbz	r3, 800d250 <_reclaim_reent+0xa4>
 800d23c:	4620      	mov	r0, r4
 800d23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d242:	4718      	bx	r3
 800d244:	680e      	ldr	r6, [r1, #0]
 800d246:	4620      	mov	r0, r4
 800d248:	f000 f83a 	bl	800d2c0 <_free_r>
 800d24c:	4631      	mov	r1, r6
 800d24e:	e7bb      	b.n	800d1c8 <_reclaim_reent+0x1c>
 800d250:	bd70      	pop	{r4, r5, r6, pc}
 800d252:	bf00      	nop
 800d254:	2000004c 	.word	0x2000004c

0800d258 <__libc_init_array>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	4d0d      	ldr	r5, [pc, #52]	@ (800d290 <__libc_init_array+0x38>)
 800d25c:	4c0d      	ldr	r4, [pc, #52]	@ (800d294 <__libc_init_array+0x3c>)
 800d25e:	1b64      	subs	r4, r4, r5
 800d260:	10a4      	asrs	r4, r4, #2
 800d262:	2600      	movs	r6, #0
 800d264:	42a6      	cmp	r6, r4
 800d266:	d109      	bne.n	800d27c <__libc_init_array+0x24>
 800d268:	4d0b      	ldr	r5, [pc, #44]	@ (800d298 <__libc_init_array+0x40>)
 800d26a:	4c0c      	ldr	r4, [pc, #48]	@ (800d29c <__libc_init_array+0x44>)
 800d26c:	f000 f87e 	bl	800d36c <_init>
 800d270:	1b64      	subs	r4, r4, r5
 800d272:	10a4      	asrs	r4, r4, #2
 800d274:	2600      	movs	r6, #0
 800d276:	42a6      	cmp	r6, r4
 800d278:	d105      	bne.n	800d286 <__libc_init_array+0x2e>
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d280:	4798      	blx	r3
 800d282:	3601      	adds	r6, #1
 800d284:	e7ee      	b.n	800d264 <__libc_init_array+0xc>
 800d286:	f855 3b04 	ldr.w	r3, [r5], #4
 800d28a:	4798      	blx	r3
 800d28c:	3601      	adds	r6, #1
 800d28e:	e7f2      	b.n	800d276 <__libc_init_array+0x1e>
 800d290:	0804f028 	.word	0x0804f028
 800d294:	0804f028 	.word	0x0804f028
 800d298:	0804f028 	.word	0x0804f028
 800d29c:	0804f02c 	.word	0x0804f02c

0800d2a0 <__retarget_lock_acquire_recursive>:
 800d2a0:	4770      	bx	lr

0800d2a2 <__retarget_lock_release_recursive>:
 800d2a2:	4770      	bx	lr

0800d2a4 <memcpy>:
 800d2a4:	440a      	add	r2, r1
 800d2a6:	4291      	cmp	r1, r2
 800d2a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d2ac:	d100      	bne.n	800d2b0 <memcpy+0xc>
 800d2ae:	4770      	bx	lr
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	d1f9      	bne.n	800d2b2 <memcpy+0xe>
 800d2be:	bd10      	pop	{r4, pc}

0800d2c0 <_free_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	d041      	beq.n	800d34c <_free_r+0x8c>
 800d2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2cc:	1f0c      	subs	r4, r1, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bfb8      	it	lt
 800d2d2:	18e4      	addlt	r4, r4, r3
 800d2d4:	f000 f83e 	bl	800d354 <__malloc_lock>
 800d2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d350 <_free_r+0x90>)
 800d2da:	6813      	ldr	r3, [r2, #0]
 800d2dc:	b933      	cbnz	r3, 800d2ec <_free_r+0x2c>
 800d2de:	6063      	str	r3, [r4, #4]
 800d2e0:	6014      	str	r4, [r2, #0]
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2e8:	f000 b83a 	b.w	800d360 <__malloc_unlock>
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	d908      	bls.n	800d302 <_free_r+0x42>
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	1821      	adds	r1, r4, r0
 800d2f4:	428b      	cmp	r3, r1
 800d2f6:	bf01      	itttt	eq
 800d2f8:	6819      	ldreq	r1, [r3, #0]
 800d2fa:	685b      	ldreq	r3, [r3, #4]
 800d2fc:	1809      	addeq	r1, r1, r0
 800d2fe:	6021      	streq	r1, [r4, #0]
 800d300:	e7ed      	b.n	800d2de <_free_r+0x1e>
 800d302:	461a      	mov	r2, r3
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	b10b      	cbz	r3, 800d30c <_free_r+0x4c>
 800d308:	42a3      	cmp	r3, r4
 800d30a:	d9fa      	bls.n	800d302 <_free_r+0x42>
 800d30c:	6811      	ldr	r1, [r2, #0]
 800d30e:	1850      	adds	r0, r2, r1
 800d310:	42a0      	cmp	r0, r4
 800d312:	d10b      	bne.n	800d32c <_free_r+0x6c>
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	4401      	add	r1, r0
 800d318:	1850      	adds	r0, r2, r1
 800d31a:	4283      	cmp	r3, r0
 800d31c:	6011      	str	r1, [r2, #0]
 800d31e:	d1e0      	bne.n	800d2e2 <_free_r+0x22>
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	6053      	str	r3, [r2, #4]
 800d326:	4408      	add	r0, r1
 800d328:	6010      	str	r0, [r2, #0]
 800d32a:	e7da      	b.n	800d2e2 <_free_r+0x22>
 800d32c:	d902      	bls.n	800d334 <_free_r+0x74>
 800d32e:	230c      	movs	r3, #12
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	e7d6      	b.n	800d2e2 <_free_r+0x22>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	1821      	adds	r1, r4, r0
 800d338:	428b      	cmp	r3, r1
 800d33a:	bf04      	itt	eq
 800d33c:	6819      	ldreq	r1, [r3, #0]
 800d33e:	685b      	ldreq	r3, [r3, #4]
 800d340:	6063      	str	r3, [r4, #4]
 800d342:	bf04      	itt	eq
 800d344:	1809      	addeq	r1, r1, r0
 800d346:	6021      	streq	r1, [r4, #0]
 800d348:	6054      	str	r4, [r2, #4]
 800d34a:	e7ca      	b.n	800d2e2 <_free_r+0x22>
 800d34c:	bd38      	pop	{r3, r4, r5, pc}
 800d34e:	bf00      	nop
 800d350:	20004b54 	.word	0x20004b54

0800d354 <__malloc_lock>:
 800d354:	4801      	ldr	r0, [pc, #4]	@ (800d35c <__malloc_lock+0x8>)
 800d356:	f7ff bfa3 	b.w	800d2a0 <__retarget_lock_acquire_recursive>
 800d35a:	bf00      	nop
 800d35c:	20004b50 	.word	0x20004b50

0800d360 <__malloc_unlock>:
 800d360:	4801      	ldr	r0, [pc, #4]	@ (800d368 <__malloc_unlock+0x8>)
 800d362:	f7ff bf9e 	b.w	800d2a2 <__retarget_lock_release_recursive>
 800d366:	bf00      	nop
 800d368:	20004b50 	.word	0x20004b50

0800d36c <_init>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	bf00      	nop
 800d370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d372:	bc08      	pop	{r3}
 800d374:	469e      	mov	lr, r3
 800d376:	4770      	bx	lr

0800d378 <_fini>:
 800d378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37a:	bf00      	nop
 800d37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37e:	bc08      	pop	{r3}
 800d380:	469e      	mov	lr, r3
 800d382:	4770      	bx	lr
